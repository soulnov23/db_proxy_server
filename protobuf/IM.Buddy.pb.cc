// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Buddy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Buddy {

void protobuf_ShutdownFile_IM_2eBuddy_2eproto() {
  delete IMRecentContactReq::default_instance_;
  delete IMRecentContactRsp::default_instance_;
  delete IMUpdateRecentContactReq::default_instance_;
  delete IMUpdateRecentContactRsp::default_instance_;
  delete IMListItemSetReq::default_instance_;
  delete IMListItemSetRsp::default_instance_;
  delete IMGetFixTopListReq::default_instance_;
  delete IMGetFixTopListRsp::default_instance_;
  delete IMFrequentContactReq::default_instance_;
  delete IMFrequentContactRsp::default_instance_;
  delete IMSingleUserInfoReq::default_instance_;
  delete IMSingleUserInfoRsp::default_instance_;
  delete IMAllUserReq::default_instance_;
  delete IMAllUserRsp::default_instance_;
  delete IMServerNotifyClient::default_instance_;
  delete IMAvatarChangedNotify::default_instance_;
  delete IMChangeAvatarReq::default_instance_;
  delete IMChangeAvatarRsp::default_instance_;
  delete IMSignInfoChangedNotify::default_instance_;
  delete IMChangeSignInfoReq::default_instance_;
  delete IMChangeSignInfoRsp::default_instance_;
  delete IMModifyUserInfoReq::default_instance_;
  delete IMModifyUserInfoRsp::default_instance_;
  delete IMLoginStatusNotify::default_instance_;
  delete IMOptBuddyReq::default_instance_;
  delete IMOptBuddyRsp::default_instance_;
  delete IMModiNickNameReq::default_instance_;
  delete IMModiNickNameRsp::default_instance_;
  delete IMGetBuddyReqListReq::default_instance_;
  delete IMGetBuddyReqListRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eBuddy_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eBuddy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMRecentContactReq::default_instance_ = new IMRecentContactReq();
  IMRecentContactRsp::default_instance_ = new IMRecentContactRsp();
  IMUpdateRecentContactReq::default_instance_ = new IMUpdateRecentContactReq();
  IMUpdateRecentContactRsp::default_instance_ = new IMUpdateRecentContactRsp();
  IMListItemSetReq::default_instance_ = new IMListItemSetReq();
  IMListItemSetRsp::default_instance_ = new IMListItemSetRsp();
  IMGetFixTopListReq::default_instance_ = new IMGetFixTopListReq();
  IMGetFixTopListRsp::default_instance_ = new IMGetFixTopListRsp();
  IMFrequentContactReq::default_instance_ = new IMFrequentContactReq();
  IMFrequentContactRsp::default_instance_ = new IMFrequentContactRsp();
  IMSingleUserInfoReq::default_instance_ = new IMSingleUserInfoReq();
  IMSingleUserInfoRsp::default_instance_ = new IMSingleUserInfoRsp();
  IMAllUserReq::default_instance_ = new IMAllUserReq();
  IMAllUserRsp::default_instance_ = new IMAllUserRsp();
  IMServerNotifyClient::default_instance_ = new IMServerNotifyClient();
  IMAvatarChangedNotify::default_instance_ = new IMAvatarChangedNotify();
  IMChangeAvatarReq::default_instance_ = new IMChangeAvatarReq();
  IMChangeAvatarRsp::default_instance_ = new IMChangeAvatarRsp();
  IMSignInfoChangedNotify::default_instance_ = new IMSignInfoChangedNotify();
  IMChangeSignInfoReq::default_instance_ = new IMChangeSignInfoReq();
  IMChangeSignInfoRsp::default_instance_ = new IMChangeSignInfoRsp();
  IMModifyUserInfoReq::default_instance_ = new IMModifyUserInfoReq();
  IMModifyUserInfoRsp::default_instance_ = new IMModifyUserInfoRsp();
  IMLoginStatusNotify::default_instance_ = new IMLoginStatusNotify();
  IMOptBuddyReq::default_instance_ = new IMOptBuddyReq();
  IMOptBuddyRsp::default_instance_ = new IMOptBuddyRsp();
  IMModiNickNameReq::default_instance_ = new IMModiNickNameReq();
  IMModiNickNameRsp::default_instance_ = new IMModiNickNameRsp();
  IMGetBuddyReqListReq::default_instance_ = new IMGetBuddyReqListReq();
  IMGetBuddyReqListRsp::default_instance_ = new IMGetBuddyReqListRsp();
  IMRecentContactReq::default_instance_->InitAsDefaultInstance();
  IMRecentContactRsp::default_instance_->InitAsDefaultInstance();
  IMUpdateRecentContactReq::default_instance_->InitAsDefaultInstance();
  IMUpdateRecentContactRsp::default_instance_->InitAsDefaultInstance();
  IMListItemSetReq::default_instance_->InitAsDefaultInstance();
  IMListItemSetRsp::default_instance_->InitAsDefaultInstance();
  IMGetFixTopListReq::default_instance_->InitAsDefaultInstance();
  IMGetFixTopListRsp::default_instance_->InitAsDefaultInstance();
  IMFrequentContactReq::default_instance_->InitAsDefaultInstance();
  IMFrequentContactRsp::default_instance_->InitAsDefaultInstance();
  IMSingleUserInfoReq::default_instance_->InitAsDefaultInstance();
  IMSingleUserInfoRsp::default_instance_->InitAsDefaultInstance();
  IMAllUserReq::default_instance_->InitAsDefaultInstance();
  IMAllUserRsp::default_instance_->InitAsDefaultInstance();
  IMServerNotifyClient::default_instance_->InitAsDefaultInstance();
  IMAvatarChangedNotify::default_instance_->InitAsDefaultInstance();
  IMChangeAvatarReq::default_instance_->InitAsDefaultInstance();
  IMChangeAvatarRsp::default_instance_->InitAsDefaultInstance();
  IMSignInfoChangedNotify::default_instance_->InitAsDefaultInstance();
  IMChangeSignInfoReq::default_instance_->InitAsDefaultInstance();
  IMChangeSignInfoRsp::default_instance_->InitAsDefaultInstance();
  IMModifyUserInfoReq::default_instance_->InitAsDefaultInstance();
  IMModifyUserInfoRsp::default_instance_->InitAsDefaultInstance();
  IMLoginStatusNotify::default_instance_->InitAsDefaultInstance();
  IMOptBuddyReq::default_instance_->InitAsDefaultInstance();
  IMOptBuddyRsp::default_instance_->InitAsDefaultInstance();
  IMModiNickNameReq::default_instance_->InitAsDefaultInstance();
  IMModiNickNameRsp::default_instance_->InitAsDefaultInstance();
  IMGetBuddyReqListReq::default_instance_->InitAsDefaultInstance();
  IMGetBuddyReqListRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBuddy_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eBuddy_2eproto_once_);
void protobuf_AddDesc_IM_2eBuddy_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eBuddy_2eproto_once_,
                 &protobuf_AddDesc_IM_2eBuddy_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBuddy_2eproto {
  StaticDescriptorInitializer_IM_2eBuddy_2eproto() {
    protobuf_AddDesc_IM_2eBuddy_2eproto();
  }
} static_descriptor_initializer_IM_2eBuddy_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMRecentContactReq::kCompanyIdFieldNumber;
const int IMRecentContactReq::kUserIdFieldNumber;
const int IMRecentContactReq::kUpdateTimeFieldNumber;
const int IMRecentContactReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRecentContactReq::IMRecentContactReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactReq)
}

void IMRecentContactReq::InitAsDefaultInstance() {
}

IMRecentContactReq::IMRecentContactReq(const IMRecentContactReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactReq)
}

void IMRecentContactReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRecentContactReq::~IMRecentContactReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactReq)
  SharedDtor();
}

void IMRecentContactReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRecentContactReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactReq& IMRecentContactReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRecentContactReq* IMRecentContactReq::default_instance_ = NULL;

IMRecentContactReq* IMRecentContactReq::New() const {
  return new IMRecentContactReq;
}

void IMRecentContactReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMRecentContactReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRecentContactReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactReq)
  return false;
#undef DO_
}

void IMRecentContactReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactReq)
}

int IMRecentContactReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactReq*>(&from));
}

void IMRecentContactReq::MergeFrom(const IMRecentContactReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRecentContactReq::CopyFrom(const IMRecentContactReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMRecentContactReq::Swap(IMRecentContactReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRecentContactReq::GetTypeName() const {
  return "IM.Buddy.IMRecentContactReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRecentContactRsp::kUpdateTimeFieldNumber;
const int IMRecentContactRsp::kIsMoreDataFieldNumber;
const int IMRecentContactRsp::kContactInfoListFieldNumber;
const int IMRecentContactRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRecentContactRsp::IMRecentContactRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactRsp)
}

void IMRecentContactRsp::InitAsDefaultInstance() {
}

IMRecentContactRsp::IMRecentContactRsp(const IMRecentContactRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactRsp)
}

void IMRecentContactRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  update_time_ = GOOGLE_ULONGLONG(0);
  is_more_data_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRecentContactRsp::~IMRecentContactRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactRsp)
  SharedDtor();
}

void IMRecentContactRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRecentContactRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactRsp& IMRecentContactRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRecentContactRsp* IMRecentContactRsp::default_instance_ = NULL;

IMRecentContactRsp* IMRecentContactRsp::New() const {
  return new IMRecentContactRsp;
}

void IMRecentContactRsp::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    update_time_ = GOOGLE_ULONGLONG(0);
    is_more_data_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  contact_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRecentContactRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_more_data;
        break;
      }

      // required uint32 is_more_data = 2;
      case 2: {
        if (tag == 16) {
         parse_is_more_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_more_data_)));
          set_has_is_more_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contact_info_list;
        break;
      }

      // repeated .IM.BaseDefine.RecentContactInfo contact_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_contact_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contact_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactRsp)
  return false;
#undef DO_
}

void IMRecentContactRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactRsp)
  // required uint64 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_time(), output);
  }

  // required uint32 is_more_data = 2;
  if (has_is_more_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_more_data(), output);
  }

  // repeated .IM.BaseDefine.RecentContactInfo contact_info_list = 3;
  for (int i = 0; i < this->contact_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->contact_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactRsp)
}

int IMRecentContactRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 is_more_data = 2;
    if (has_is_more_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_more_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.RecentContactInfo contact_info_list = 3;
  total_size += 1 * this->contact_info_list_size();
  for (int i = 0; i < this->contact_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactRsp*>(&from));
}

void IMRecentContactRsp::MergeFrom(const IMRecentContactRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_info_list_.MergeFrom(from.contact_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_more_data()) {
      set_is_more_data(from.is_more_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRecentContactRsp::CopyFrom(const IMRecentContactRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->contact_info_list())) return false;
  return true;
}

void IMRecentContactRsp::Swap(IMRecentContactRsp* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(is_more_data_, other->is_more_data_);
    contact_info_list_.Swap(&other->contact_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRecentContactRsp::GetTypeName() const {
  return "IM.Buddy.IMRecentContactRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUpdateRecentContactReq::kCompanyIdFieldNumber;
const int IMUpdateRecentContactReq::kUserIdFieldNumber;
const int IMUpdateRecentContactReq::kSessionTypeFieldNumber;
const int IMUpdateRecentContactReq::kContactIdFieldNumber;
const int IMUpdateRecentContactReq::kContactCompanyIdFieldNumber;
const int IMUpdateRecentContactReq::kIsDeleteFieldNumber;
const int IMUpdateRecentContactReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUpdateRecentContactReq::IMUpdateRecentContactReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUpdateRecentContactReq)
}

void IMUpdateRecentContactReq::InitAsDefaultInstance() {
}

IMUpdateRecentContactReq::IMUpdateRecentContactReq(const IMUpdateRecentContactReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUpdateRecentContactReq)
}

void IMUpdateRecentContactReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  session_type_ = 1;
  contact_id_ = 0u;
  contact_company_id_ = 0u;
  isdelete_ = false;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUpdateRecentContactReq::~IMUpdateRecentContactReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUpdateRecentContactReq)
  SharedDtor();
}

void IMUpdateRecentContactReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUpdateRecentContactReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUpdateRecentContactReq& IMUpdateRecentContactReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUpdateRecentContactReq* IMUpdateRecentContactReq::default_instance_ = NULL;

IMUpdateRecentContactReq* IMUpdateRecentContactReq::New() const {
  return new IMUpdateRecentContactReq;
}

void IMUpdateRecentContactReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUpdateRecentContactReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, user_id_);
    ZR_(contact_id_, isdelete_);
    session_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUpdateRecentContactReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUpdateRecentContactReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 3;
      case 3: {
        if (tag == 24) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_contact_id;
        break;
      }

      // required uint32 contact_id = 4;
      case 4: {
        if (tag == 32) {
         parse_contact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contact_id_)));
          set_has_contact_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_contact_company_id;
        break;
      }

      // required uint32 contact_company_id = 5;
      case 5: {
        if (tag == 40) {
         parse_contact_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contact_company_id_)));
          set_has_contact_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isDelete;
        break;
      }

      // required bool isDelete = 6;
      case 6: {
        if (tag == 48) {
         parse_isDelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUpdateRecentContactReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUpdateRecentContactReq)
  return false;
#undef DO_
}

void IMUpdateRecentContactReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUpdateRecentContactReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 3;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // required uint32 contact_id = 4;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contact_id(), output);
  }

  // required uint32 contact_company_id = 5;
  if (has_contact_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->contact_company_id(), output);
  }

  // required bool isDelete = 6;
  if (has_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdelete(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUpdateRecentContactReq)
}

int IMUpdateRecentContactReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 3;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 contact_id = 4;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contact_id());
    }

    // required uint32 contact_company_id = 5;
    if (has_contact_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contact_company_id());
    }

    // required bool isDelete = 6;
    if (has_isdelete()) {
      total_size += 1 + 1;
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUpdateRecentContactReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUpdateRecentContactReq*>(&from));
}

void IMUpdateRecentContactReq::MergeFrom(const IMUpdateRecentContactReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_contact_id()) {
      set_contact_id(from.contact_id());
    }
    if (from.has_contact_company_id()) {
      set_contact_company_id(from.contact_company_id());
    }
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUpdateRecentContactReq::CopyFrom(const IMUpdateRecentContactReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUpdateRecentContactReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMUpdateRecentContactReq::Swap(IMUpdateRecentContactReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(contact_id_, other->contact_id_);
    std::swap(contact_company_id_, other->contact_company_id_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUpdateRecentContactReq::GetTypeName() const {
  return "IM.Buddy.IMUpdateRecentContactReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUpdateRecentContactRsp::kUpdateTimeFieldNumber;
const int IMUpdateRecentContactRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUpdateRecentContactRsp::IMUpdateRecentContactRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUpdateRecentContactRsp)
}

void IMUpdateRecentContactRsp::InitAsDefaultInstance() {
}

IMUpdateRecentContactRsp::IMUpdateRecentContactRsp(const IMUpdateRecentContactRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUpdateRecentContactRsp)
}

void IMUpdateRecentContactRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUpdateRecentContactRsp::~IMUpdateRecentContactRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUpdateRecentContactRsp)
  SharedDtor();
}

void IMUpdateRecentContactRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUpdateRecentContactRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUpdateRecentContactRsp& IMUpdateRecentContactRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUpdateRecentContactRsp* IMUpdateRecentContactRsp::default_instance_ = NULL;

IMUpdateRecentContactRsp* IMUpdateRecentContactRsp::New() const {
  return new IMUpdateRecentContactRsp;
}

void IMUpdateRecentContactRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    update_time_ = GOOGLE_ULONGLONG(0);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUpdateRecentContactRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUpdateRecentContactRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUpdateRecentContactRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUpdateRecentContactRsp)
  return false;
#undef DO_
}

void IMUpdateRecentContactRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUpdateRecentContactRsp)
  // required uint64 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUpdateRecentContactRsp)
}

int IMUpdateRecentContactRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUpdateRecentContactRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUpdateRecentContactRsp*>(&from));
}

void IMUpdateRecentContactRsp::MergeFrom(const IMUpdateRecentContactRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUpdateRecentContactRsp::CopyFrom(const IMUpdateRecentContactRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUpdateRecentContactRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUpdateRecentContactRsp::Swap(IMUpdateRecentContactRsp* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUpdateRecentContactRsp::GetTypeName() const {
  return "IM.Buddy.IMUpdateRecentContactRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMListItemSetReq::kCompanyIdFieldNumber;
const int IMListItemSetReq::kUserIdFieldNumber;
const int IMListItemSetReq::kDestCompanyIdFieldNumber;
const int IMListItemSetReq::kDestUserIdFieldNumber;
const int IMListItemSetReq::kSessionTypeFieldNumber;
const int IMListItemSetReq::kTypeFieldNumber;
#endif  // !_MSC_VER

IMListItemSetReq::IMListItemSetReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMListItemSetReq)
}

void IMListItemSetReq::InitAsDefaultInstance() {
}

IMListItemSetReq::IMListItemSetReq(const IMListItemSetReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMListItemSetReq)
}

void IMListItemSetReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  dest_company_id_ = 0u;
  dest_user_id_ = 0u;
  session_type_ = 1;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMListItemSetReq::~IMListItemSetReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMListItemSetReq)
  SharedDtor();
}

void IMListItemSetReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMListItemSetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMListItemSetReq& IMListItemSetReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMListItemSetReq* IMListItemSetReq::default_instance_ = NULL;

IMListItemSetReq* IMListItemSetReq::New() const {
  return new IMListItemSetReq;
}

void IMListItemSetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMListItemSetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(company_id_, dest_user_id_);
    session_type_ = 1;
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMListItemSetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMListItemSetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_company_id;
        break;
      }

      // required uint32 dest_company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_company_id_)));
          set_has_dest_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dest_user_id;
        break;
      }

      // required uint32 dest_user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_user_id_)));
          set_has_dest_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 5;
      case 5: {
        if (tag == 40) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required .IM.BaseDefine.ListItemOptType type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ListItemOptType_IsValid(value)) {
            set_type(static_cast< ::IM::BaseDefine::ListItemOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMListItemSetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMListItemSetReq)
  return false;
#undef DO_
}

void IMListItemSetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMListItemSetReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 dest_company_id = 3;
  if (has_dest_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_company_id(), output);
  }

  // required uint32 dest_user_id = 4;
  if (has_dest_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 5;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->session_type(), output);
  }

  // required .IM.BaseDefine.ListItemOptType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMListItemSetReq)
}

int IMListItemSetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 dest_company_id = 3;
    if (has_dest_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_company_id());
    }

    // required uint32 dest_user_id = 4;
    if (has_dest_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 5;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required .IM.BaseDefine.ListItemOptType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMListItemSetReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMListItemSetReq*>(&from));
}

void IMListItemSetReq::MergeFrom(const IMListItemSetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dest_company_id()) {
      set_dest_company_id(from.dest_company_id());
    }
    if (from.has_dest_user_id()) {
      set_dest_user_id(from.dest_user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMListItemSetReq::CopyFrom(const IMListItemSetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMListItemSetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMListItemSetReq::Swap(IMListItemSetReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(dest_company_id_, other->dest_company_id_);
    std::swap(dest_user_id_, other->dest_user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMListItemSetReq::GetTypeName() const {
  return "IM.Buddy.IMListItemSetReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMListItemSetRsp::kCompanyIdFieldNumber;
const int IMListItemSetRsp::kUserIdFieldNumber;
const int IMListItemSetRsp::kResultCodeFieldNumber;
const int IMListItemSetRsp::kTypeFieldNumber;
const int IMListItemSetRsp::kSessionTypeFieldNumber;
const int IMListItemSetRsp::kFixtopPriorityFieldNumber;
const int IMListItemSetRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMListItemSetRsp::IMListItemSetRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMListItemSetRsp)
}

void IMListItemSetRsp::InitAsDefaultInstance() {
}

IMListItemSetRsp::IMListItemSetRsp(const IMListItemSetRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMListItemSetRsp)
}

void IMListItemSetRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  result_code_ = 1;
  type_ = 1;
  session_type_ = 1;
  fixtop_priority_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMListItemSetRsp::~IMListItemSetRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMListItemSetRsp)
  SharedDtor();
}

void IMListItemSetRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMListItemSetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMListItemSetRsp& IMListItemSetRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMListItemSetRsp* IMListItemSetRsp::default_instance_ = NULL;

IMListItemSetRsp* IMListItemSetRsp::New() const {
  return new IMListItemSetRsp;
}

void IMListItemSetRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMListItemSetRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, user_id_);
    result_code_ = 1;
    type_ = 1;
    session_type_ = 1;
    fixtop_priority_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMListItemSetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMListItemSetRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .IM.BaseDefine.ListItemOptType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ListItemOptType_IsValid(value)) {
            set_type(static_cast< ::IM::BaseDefine::ListItemOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 5;
      case 5: {
        if (tag == 40) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fixtop_priority;
        break;
      }

      // required uint32 fixtop_priority = 6;
      case 6: {
        if (tag == 48) {
         parse_fixtop_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixtop_priority_)));
          set_has_fixtop_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMListItemSetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMListItemSetRsp)
  return false;
#undef DO_
}

void IMListItemSetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMListItemSetRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_code(), output);
  }

  // required .IM.BaseDefine.ListItemOptType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 5;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->session_type(), output);
  }

  // required uint32 fixtop_priority = 6;
  if (has_fixtop_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fixtop_priority(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMListItemSetRsp)
}

int IMListItemSetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required .IM.BaseDefine.ListItemOptType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .IM.BaseDefine.SessionType session_type = 5;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 fixtop_priority = 6;
    if (has_fixtop_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixtop_priority());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMListItemSetRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMListItemSetRsp*>(&from));
}

void IMListItemSetRsp::MergeFrom(const IMListItemSetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_fixtop_priority()) {
      set_fixtop_priority(from.fixtop_priority());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMListItemSetRsp::CopyFrom(const IMListItemSetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMListItemSetRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMListItemSetRsp::Swap(IMListItemSetRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(type_, other->type_);
    std::swap(session_type_, other->session_type_);
    std::swap(fixtop_priority_, other->fixtop_priority_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMListItemSetRsp::GetTypeName() const {
  return "IM.Buddy.IMListItemSetRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetFixTopListReq::kCompanyIdFieldNumber;
const int IMGetFixTopListReq::kUserIdFieldNumber;
const int IMGetFixTopListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetFixTopListReq::IMGetFixTopListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMGetFixTopListReq)
}

void IMGetFixTopListReq::InitAsDefaultInstance() {
}

IMGetFixTopListReq::IMGetFixTopListReq(const IMGetFixTopListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMGetFixTopListReq)
}

void IMGetFixTopListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetFixTopListReq::~IMGetFixTopListReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMGetFixTopListReq)
  SharedDtor();
}

void IMGetFixTopListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetFixTopListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetFixTopListReq& IMGetFixTopListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMGetFixTopListReq* IMGetFixTopListReq::default_instance_ = NULL;

IMGetFixTopListReq* IMGetFixTopListReq::New() const {
  return new IMGetFixTopListReq;
}

void IMGetFixTopListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetFixTopListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGetFixTopListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMGetFixTopListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMGetFixTopListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMGetFixTopListReq)
  return false;
#undef DO_
}

void IMGetFixTopListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMGetFixTopListReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMGetFixTopListReq)
}

int IMGetFixTopListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetFixTopListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetFixTopListReq*>(&from));
}

void IMGetFixTopListReq::MergeFrom(const IMGetFixTopListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGetFixTopListReq::CopyFrom(const IMGetFixTopListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetFixTopListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGetFixTopListReq::Swap(IMGetFixTopListReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGetFixTopListReq::GetTypeName() const {
  return "IM.Buddy.IMGetFixTopListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetFixTopListRsp::kCompanyIdFieldNumber;
const int IMGetFixTopListRsp::kUserIdFieldNumber;
const int IMGetFixTopListRsp::kListFixTopFieldNumber;
const int IMGetFixTopListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetFixTopListRsp::IMGetFixTopListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMGetFixTopListRsp)
}

void IMGetFixTopListRsp::InitAsDefaultInstance() {
}

IMGetFixTopListRsp::IMGetFixTopListRsp(const IMGetFixTopListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMGetFixTopListRsp)
}

void IMGetFixTopListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetFixTopListRsp::~IMGetFixTopListRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMGetFixTopListRsp)
  SharedDtor();
}

void IMGetFixTopListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetFixTopListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetFixTopListRsp& IMGetFixTopListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMGetFixTopListRsp* IMGetFixTopListRsp::default_instance_ = NULL;

IMGetFixTopListRsp* IMGetFixTopListRsp::New() const {
  return new IMGetFixTopListRsp;
}

void IMGetFixTopListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetFixTopListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_fix_top_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGetFixTopListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMGetFixTopListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_fix_top;
        break;
      }

      // repeated .IM.BaseDefine.RecentFixTop list_fix_top = 3;
      case 3: {
        if (tag == 26) {
         parse_list_fix_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_fix_top()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_fix_top;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMGetFixTopListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMGetFixTopListRsp)
  return false;
#undef DO_
}

void IMGetFixTopListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMGetFixTopListRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.RecentFixTop list_fix_top = 3;
  for (int i = 0; i < this->list_fix_top_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->list_fix_top(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMGetFixTopListRsp)
}

int IMGetFixTopListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.RecentFixTop list_fix_top = 3;
  total_size += 1 * this->list_fix_top_size();
  for (int i = 0; i < this->list_fix_top_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_fix_top(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetFixTopListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetFixTopListRsp*>(&from));
}

void IMGetFixTopListRsp::MergeFrom(const IMGetFixTopListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_fix_top_.MergeFrom(from.list_fix_top_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGetFixTopListRsp::CopyFrom(const IMGetFixTopListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetFixTopListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list_fix_top())) return false;
  return true;
}

void IMGetFixTopListRsp::Swap(IMGetFixTopListRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    list_fix_top_.Swap(&other->list_fix_top_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGetFixTopListRsp::GetTypeName() const {
  return "IM.Buddy.IMGetFixTopListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMFrequentContactReq::kCompanyIdFieldNumber;
const int IMFrequentContactReq::kUserIdFieldNumber;
const int IMFrequentContactReq::kUpdateTimeFieldNumber;
const int IMFrequentContactReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMFrequentContactReq::IMFrequentContactReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMFrequentContactReq)
}

void IMFrequentContactReq::InitAsDefaultInstance() {
}

IMFrequentContactReq::IMFrequentContactReq(const IMFrequentContactReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMFrequentContactReq)
}

void IMFrequentContactReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFrequentContactReq::~IMFrequentContactReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMFrequentContactReq)
  SharedDtor();
}

void IMFrequentContactReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFrequentContactReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFrequentContactReq& IMFrequentContactReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMFrequentContactReq* IMFrequentContactReq::default_instance_ = NULL;

IMFrequentContactReq* IMFrequentContactReq::New() const {
  return new IMFrequentContactReq;
}

void IMFrequentContactReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMFrequentContactReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMFrequentContactReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMFrequentContactReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMFrequentContactReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMFrequentContactReq)
  return false;
#undef DO_
}

void IMFrequentContactReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMFrequentContactReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMFrequentContactReq)
}

int IMFrequentContactReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFrequentContactReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFrequentContactReq*>(&from));
}

void IMFrequentContactReq::MergeFrom(const IMFrequentContactReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMFrequentContactReq::CopyFrom(const IMFrequentContactReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFrequentContactReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMFrequentContactReq::Swap(IMFrequentContactReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMFrequentContactReq::GetTypeName() const {
  return "IM.Buddy.IMFrequentContactReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMFrequentContactRsp::kUpdateTimeFieldNumber;
const int IMFrequentContactRsp::kIsMoreDataFieldNumber;
const int IMFrequentContactRsp::kFrequentBaseinfoListFieldNumber;
const int IMFrequentContactRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMFrequentContactRsp::IMFrequentContactRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMFrequentContactRsp)
}

void IMFrequentContactRsp::InitAsDefaultInstance() {
}

IMFrequentContactRsp::IMFrequentContactRsp(const IMFrequentContactRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMFrequentContactRsp)
}

void IMFrequentContactRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  update_time_ = GOOGLE_ULONGLONG(0);
  is_more_data_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFrequentContactRsp::~IMFrequentContactRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMFrequentContactRsp)
  SharedDtor();
}

void IMFrequentContactRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFrequentContactRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFrequentContactRsp& IMFrequentContactRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMFrequentContactRsp* IMFrequentContactRsp::default_instance_ = NULL;

IMFrequentContactRsp* IMFrequentContactRsp::New() const {
  return new IMFrequentContactRsp;
}

void IMFrequentContactRsp::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    update_time_ = GOOGLE_ULONGLONG(0);
    is_more_data_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  frequent_baseinfo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMFrequentContactRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMFrequentContactRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_more_data;
        break;
      }

      // required uint32 is_more_data = 2;
      case 2: {
        if (tag == 16) {
         parse_is_more_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_more_data_)));
          set_has_is_more_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frequent_baseinfo_list;
        break;
      }

      // repeated .IM.BaseDefine.FrequentContactInfo frequent_baseinfo_list = 3;
      case 3: {
        if (tag == 26) {
         parse_frequent_baseinfo_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frequent_baseinfo_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frequent_baseinfo_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMFrequentContactRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMFrequentContactRsp)
  return false;
#undef DO_
}

void IMFrequentContactRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMFrequentContactRsp)
  // required uint64 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_time(), output);
  }

  // required uint32 is_more_data = 2;
  if (has_is_more_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_more_data(), output);
  }

  // repeated .IM.BaseDefine.FrequentContactInfo frequent_baseinfo_list = 3;
  for (int i = 0; i < this->frequent_baseinfo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->frequent_baseinfo_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMFrequentContactRsp)
}

int IMFrequentContactRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 is_more_data = 2;
    if (has_is_more_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_more_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.FrequentContactInfo frequent_baseinfo_list = 3;
  total_size += 1 * this->frequent_baseinfo_list_size();
  for (int i = 0; i < this->frequent_baseinfo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frequent_baseinfo_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFrequentContactRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFrequentContactRsp*>(&from));
}

void IMFrequentContactRsp::MergeFrom(const IMFrequentContactRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  frequent_baseinfo_list_.MergeFrom(from.frequent_baseinfo_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_more_data()) {
      set_is_more_data(from.is_more_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMFrequentContactRsp::CopyFrom(const IMFrequentContactRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFrequentContactRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->frequent_baseinfo_list())) return false;
  return true;
}

void IMFrequentContactRsp::Swap(IMFrequentContactRsp* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(is_more_data_, other->is_more_data_);
    frequent_baseinfo_list_.Swap(&other->frequent_baseinfo_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMFrequentContactRsp::GetTypeName() const {
  return "IM.Buddy.IMFrequentContactRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMSingleUserInfoReq::kCompanyIdFieldNumber;
const int IMSingleUserInfoReq::kUserIdFieldNumber;
const int IMSingleUserInfoReq::kUserIdListFieldNumber;
const int IMSingleUserInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMSingleUserInfoReq::IMSingleUserInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSingleUserInfoReq)
}

void IMSingleUserInfoReq::InitAsDefaultInstance() {
}

IMSingleUserInfoReq::IMSingleUserInfoReq(const IMSingleUserInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSingleUserInfoReq)
}

void IMSingleUserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSingleUserInfoReq::~IMSingleUserInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSingleUserInfoReq)
  SharedDtor();
}

void IMSingleUserInfoReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMSingleUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSingleUserInfoReq& IMSingleUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMSingleUserInfoReq* IMSingleUserInfoReq::default_instance_ = NULL;

IMSingleUserInfoReq* IMSingleUserInfoReq::New() const {
  return new IMSingleUserInfoReq;
}

void IMSingleUserInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMSingleUserInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMSingleUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSingleUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem user_id_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSingleUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSingleUserInfoReq)
  return false;
#undef DO_
}

void IMSingleUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSingleUserInfoReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem user_id_list = 3;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSingleUserInfoReq)
}

int IMSingleUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem user_id_list = 3;
  total_size += 1 * this->user_id_list_size();
  for (int i = 0; i < this->user_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSingleUserInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSingleUserInfoReq*>(&from));
}

void IMSingleUserInfoReq::MergeFrom(const IMSingleUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMSingleUserInfoReq::CopyFrom(const IMSingleUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSingleUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_id_list())) return false;
  return true;
}

void IMSingleUserInfoReq::Swap(IMSingleUserInfoReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMSingleUserInfoReq::GetTypeName() const {
  return "IM.Buddy.IMSingleUserInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMSingleUserInfoRsp::kUserInfoListFieldNumber;
const int IMSingleUserInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMSingleUserInfoRsp::IMSingleUserInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSingleUserInfoRsp)
}

void IMSingleUserInfoRsp::InitAsDefaultInstance() {
}

IMSingleUserInfoRsp::IMSingleUserInfoRsp(const IMSingleUserInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSingleUserInfoRsp)
}

void IMSingleUserInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSingleUserInfoRsp::~IMSingleUserInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSingleUserInfoRsp)
  SharedDtor();
}

void IMSingleUserInfoRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMSingleUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSingleUserInfoRsp& IMSingleUserInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMSingleUserInfoRsp* IMSingleUserInfoRsp::default_instance_ = NULL;

IMSingleUserInfoRsp* IMSingleUserInfoRsp::New() const {
  return new IMSingleUserInfoRsp;
}

void IMSingleUserInfoRsp::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMSingleUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSingleUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.UserInfo user_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSingleUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSingleUserInfoRsp)
  return false;
#undef DO_
}

void IMSingleUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSingleUserInfoRsp)
  // repeated .IM.BaseDefine.UserInfo user_info_list = 3;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSingleUserInfoRsp)
}

int IMSingleUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_info_list = 3;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSingleUserInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSingleUserInfoRsp*>(&from));
}

void IMSingleUserInfoRsp::MergeFrom(const IMSingleUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMSingleUserInfoRsp::CopyFrom(const IMSingleUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSingleUserInfoRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  return true;
}

void IMSingleUserInfoRsp::Swap(IMSingleUserInfoRsp* other) {
  if (other != this) {
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMSingleUserInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMSingleUserInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAllUserReq::kCompanyIdFieldNumber;
const int IMAllUserReq::kUserIdFieldNumber;
const int IMAllUserReq::kUpdateTimeFieldNumber;
const int IMAllUserReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMAllUserReq::IMAllUserReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::InitAsDefaultInstance() {
}

IMAllUserReq::IMAllUserReq(const IMAllUserReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAllUserReq::~IMAllUserReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserReq)
  SharedDtor();
}

void IMAllUserReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAllUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserReq& IMAllUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAllUserReq* IMAllUserReq::default_instance_ = NULL;

IMAllUserReq* IMAllUserReq::New() const {
  return new IMAllUserReq;
}

void IMAllUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMAllUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAllUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserReq)
  return false;
#undef DO_
}

void IMAllUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserReq)
}

int IMAllUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserReq*>(&from));
}

void IMAllUserReq::MergeFrom(const IMAllUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAllUserReq::CopyFrom(const IMAllUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMAllUserReq::Swap(IMAllUserReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAllUserReq::GetTypeName() const {
  return "IM.Buddy.IMAllUserReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAllUserRsp::kUpdateTimeFieldNumber;
const int IMAllUserRsp::kIsMoreDataFieldNumber;
const int IMAllUserRsp::kUserListFieldNumber;
const int IMAllUserRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMAllUserRsp::IMAllUserRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::InitAsDefaultInstance() {
}

IMAllUserRsp::IMAllUserRsp(const IMAllUserRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  update_time_ = GOOGLE_ULONGLONG(0);
  is_more_data_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAllUserRsp::~IMAllUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserRsp)
  SharedDtor();
}

void IMAllUserRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAllUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserRsp& IMAllUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAllUserRsp* IMAllUserRsp::default_instance_ = NULL;

IMAllUserRsp* IMAllUserRsp::New() const {
  return new IMAllUserRsp;
}

void IMAllUserRsp::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    update_time_ = GOOGLE_ULONGLONG(0);
    is_more_data_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAllUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_more_data;
        break;
      }

      // required uint32 is_more_data = 2;
      case 2: {
        if (tag == 16) {
         parse_is_more_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_more_data_)));
          set_has_is_more_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserRsp)
  return false;
#undef DO_
}

void IMAllUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserRsp)
  // required uint64 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_time(), output);
  }

  // required uint32 is_more_data = 2;
  if (has_is_more_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_more_data(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserRsp)
}

int IMAllUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 is_more_data = 2;
    if (has_is_more_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_more_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserRsp*>(&from));
}

void IMAllUserRsp::MergeFrom(const IMAllUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_more_data()) {
      set_is_more_data(from.is_more_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAllUserRsp::CopyFrom(const IMAllUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void IMAllUserRsp::Swap(IMAllUserRsp* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(is_more_data_, other->is_more_data_);
    user_list_.Swap(&other->user_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAllUserRsp::GetTypeName() const {
  return "IM.Buddy.IMAllUserRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMServerNotifyClient::kCompanyIdFieldNumber;
const int IMServerNotifyClient::kUserIdFieldNumber;
const int IMServerNotifyClient::kNotifyTypeFieldNumber;
#endif  // !_MSC_VER

IMServerNotifyClient::IMServerNotifyClient()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMServerNotifyClient)
}

void IMServerNotifyClient::InitAsDefaultInstance() {
}

IMServerNotifyClient::IMServerNotifyClient(const IMServerNotifyClient& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMServerNotifyClient)
}

void IMServerNotifyClient::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  notify_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMServerNotifyClient::~IMServerNotifyClient() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMServerNotifyClient)
  SharedDtor();
}

void IMServerNotifyClient::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMServerNotifyClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMServerNotifyClient& IMServerNotifyClient::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMServerNotifyClient* IMServerNotifyClient::default_instance_ = NULL;

IMServerNotifyClient* IMServerNotifyClient::New() const {
  return new IMServerNotifyClient;
}

void IMServerNotifyClient::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMServerNotifyClient*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    notify_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMServerNotifyClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMServerNotifyClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_notify_type;
        break;
      }

      // required .IM.BaseDefine.ServerNotifyType notify_type = 3;
      case 3: {
        if (tag == 24) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ServerNotifyType_IsValid(value)) {
            set_notify_type(static_cast< ::IM::BaseDefine::ServerNotifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMServerNotifyClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMServerNotifyClient)
  return false;
#undef DO_
}

void IMServerNotifyClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMServerNotifyClient)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.ServerNotifyType notify_type = 3;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->notify_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMServerNotifyClient)
}

int IMServerNotifyClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.ServerNotifyType notify_type = 3;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMServerNotifyClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMServerNotifyClient*>(&from));
}

void IMServerNotifyClient::MergeFrom(const IMServerNotifyClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMServerNotifyClient::CopyFrom(const IMServerNotifyClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerNotifyClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMServerNotifyClient::Swap(IMServerNotifyClient* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMServerNotifyClient::GetTypeName() const {
  return "IM.Buddy.IMServerNotifyClient";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAvatarChangedNotify::kCompanyIdFieldNumber;
const int IMAvatarChangedNotify::kChangedUserIdFieldNumber;
const int IMAvatarChangedNotify::kAvatarUrlFieldNumber;
const int IMAvatarChangedNotify::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

IMAvatarChangedNotify::IMAvatarChangedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::InitAsDefaultInstance() {
}

IMAvatarChangedNotify::IMAvatarChangedNotify(const IMAvatarChangedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  changed_user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAvatarChangedNotify::~IMAvatarChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAvatarChangedNotify)
  SharedDtor();
}

void IMAvatarChangedNotify::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAvatarChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAvatarChangedNotify& IMAvatarChangedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAvatarChangedNotify* IMAvatarChangedNotify::default_instance_ = NULL;

IMAvatarChangedNotify* IMAvatarChangedNotify::New() const {
  return new IMAvatarChangedNotify;
}

void IMAvatarChangedNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMAvatarChangedNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, changed_user_id_);
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    update_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAvatarChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAvatarChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_changed_user_id;
        break;
      }

      // required uint32 changed_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_changed_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
          set_has_changed_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAvatarChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAvatarChangedNotify)
  return false;
#undef DO_
}

void IMAvatarChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAvatarChangedNotify)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 changed_user_id = 2;
  if (has_changed_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->changed_user_id(), output);
  }

  // required string avatar_url = 3;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar_url(), output);
  }

  // required uint64 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAvatarChangedNotify)
}

int IMAvatarChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 changed_user_id = 2;
    if (has_changed_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changed_user_id());
    }

    // required string avatar_url = 3;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required uint64 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAvatarChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAvatarChangedNotify*>(&from));
}

void IMAvatarChangedNotify::MergeFrom(const IMAvatarChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_changed_user_id()) {
      set_changed_user_id(from.changed_user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAvatarChangedNotify::CopyFrom(const IMAvatarChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAvatarChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMAvatarChangedNotify::Swap(IMAvatarChangedNotify* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(changed_user_id_, other->changed_user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAvatarChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMAvatarChangedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeAvatarReq::kCompanyIdFieldNumber;
const int IMChangeAvatarReq::kUserIdFieldNumber;
const int IMChangeAvatarReq::kAvatarUrlFieldNumber;
const int IMChangeAvatarReq::kSessionTypeFieldNumber;
const int IMChangeAvatarReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeAvatarReq::IMChangeAvatarReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::InitAsDefaultInstance() {
}

IMChangeAvatarReq::IMChangeAvatarReq(const IMChangeAvatarReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_type_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeAvatarReq::~IMChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarReq)
  SharedDtor();
}

void IMChangeAvatarReq::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarReq& IMChangeAvatarReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeAvatarReq* IMChangeAvatarReq::default_instance_ = NULL;

IMChangeAvatarReq* IMChangeAvatarReq::New() const {
  return new IMChangeAvatarReq;
}

void IMChangeAvatarReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMChangeAvatarReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(company_id_, user_id_);
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    session_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarReq)
  return false;
#undef DO_
}

void IMChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string avatar_url = 3;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar_url(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarReq)
}

int IMChangeAvatarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string avatar_url = 3;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required .IM.BaseDefine.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarReq*>(&from));
}

void IMChangeAvatarReq::MergeFrom(const IMChangeAvatarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeAvatarReq::CopyFrom(const IMChangeAvatarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMChangeAvatarReq::Swap(IMChangeAvatarReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(session_type_, other->session_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeAvatarReq::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeAvatarRsp::kResultCodeFieldNumber;
const int IMChangeAvatarRsp::kUpdateTimeFieldNumber;
const int IMChangeAvatarRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeAvatarRsp::IMChangeAvatarRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::InitAsDefaultInstance() {
}

IMChangeAvatarRsp::IMChangeAvatarRsp(const IMChangeAvatarRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeAvatarRsp::~IMChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarRsp)
  SharedDtor();
}

void IMChangeAvatarRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarRsp& IMChangeAvatarRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeAvatarRsp* IMChangeAvatarRsp::default_instance_ = NULL;

IMChangeAvatarRsp* IMChangeAvatarRsp::New() const {
  return new IMChangeAvatarRsp;
}

void IMChangeAvatarRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_code_ = 0u;
    update_time_ = GOOGLE_ULONGLONG(0);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarRsp)
  return false;
#undef DO_
}

void IMChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarRsp)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required uint64 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarRsp)
}

int IMChangeAvatarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint64 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarRsp*>(&from));
}

void IMChangeAvatarRsp::MergeFrom(const IMChangeAvatarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeAvatarRsp::CopyFrom(const IMChangeAvatarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeAvatarRsp::Swap(IMChangeAvatarRsp* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeAvatarRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMSignInfoChangedNotify::kCompanyIdFieldNumber;
const int IMSignInfoChangedNotify::kChangedUserIdFieldNumber;
const int IMSignInfoChangedNotify::kSignInfoFieldNumber;
#endif  // !_MSC_VER

IMSignInfoChangedNotify::IMSignInfoChangedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::InitAsDefaultInstance() {
}

IMSignInfoChangedNotify::IMSignInfoChangedNotify(const IMSignInfoChangedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  changed_user_id_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSignInfoChangedNotify::~IMSignInfoChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSignInfoChangedNotify)
  SharedDtor();
}

void IMSignInfoChangedNotify::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMSignInfoChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSignInfoChangedNotify& IMSignInfoChangedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMSignInfoChangedNotify* IMSignInfoChangedNotify::default_instance_ = NULL;

IMSignInfoChangedNotify* IMSignInfoChangedNotify::New() const {
  return new IMSignInfoChangedNotify;
}

void IMSignInfoChangedNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMSignInfoChangedNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, changed_user_id_);
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMSignInfoChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSignInfoChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_changed_user_id;
        break;
      }

      // required uint32 changed_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_changed_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
          set_has_changed_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sign_info;
        break;
      }

      // required string sign_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSignInfoChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSignInfoChangedNotify)
  return false;
#undef DO_
}

void IMSignInfoChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSignInfoChangedNotify)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 changed_user_id = 2;
  if (has_changed_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->changed_user_id(), output);
  }

  // required string sign_info = 3;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSignInfoChangedNotify)
}

int IMSignInfoChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 changed_user_id = 2;
    if (has_changed_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changed_user_id());
    }

    // required string sign_info = 3;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSignInfoChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSignInfoChangedNotify*>(&from));
}

void IMSignInfoChangedNotify::MergeFrom(const IMSignInfoChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_changed_user_id()) {
      set_changed_user_id(from.changed_user_id());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMSignInfoChangedNotify::CopyFrom(const IMSignInfoChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSignInfoChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMSignInfoChangedNotify::Swap(IMSignInfoChangedNotify* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(changed_user_id_, other->changed_user_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMSignInfoChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMSignInfoChangedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeSignInfoReq::kCompanyIdFieldNumber;
const int IMChangeSignInfoReq::kUserIdFieldNumber;
const int IMChangeSignInfoReq::kSignInfoFieldNumber;
const int IMChangeSignInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeSignInfoReq::IMChangeSignInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::InitAsDefaultInstance() {
}

IMChangeSignInfoReq::IMChangeSignInfoReq(const IMChangeSignInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeSignInfoReq::~IMChangeSignInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoReq)
  SharedDtor();
}

void IMChangeSignInfoReq::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeSignInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoReq& IMChangeSignInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeSignInfoReq* IMChangeSignInfoReq::default_instance_ = NULL;

IMChangeSignInfoReq* IMChangeSignInfoReq::New() const {
  return new IMChangeSignInfoReq;
}

void IMChangeSignInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMChangeSignInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeSignInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sign_info;
        break;
      }

      // required string sign_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoReq)
  return false;
#undef DO_
}

void IMChangeSignInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string sign_info = 3;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoReq)
}

int IMChangeSignInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string sign_info = 3;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoReq*>(&from));
}

void IMChangeSignInfoReq::MergeFrom(const IMChangeSignInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeSignInfoReq::CopyFrom(const IMChangeSignInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMChangeSignInfoReq::Swap(IMChangeSignInfoReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeSignInfoReq::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeSignInfoRsp::kResultCodeFieldNumber;
const int IMChangeSignInfoRsp::kUpdateTimeFieldNumber;
const int IMChangeSignInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeSignInfoRsp::IMChangeSignInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::InitAsDefaultInstance() {
}

IMChangeSignInfoRsp::IMChangeSignInfoRsp(const IMChangeSignInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeSignInfoRsp::~IMChangeSignInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoRsp)
  SharedDtor();
}

void IMChangeSignInfoRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeSignInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoRsp& IMChangeSignInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeSignInfoRsp* IMChangeSignInfoRsp::default_instance_ = NULL;

IMChangeSignInfoRsp* IMChangeSignInfoRsp::New() const {
  return new IMChangeSignInfoRsp;
}

void IMChangeSignInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_code_ = 0u;
    update_time_ = GOOGLE_ULONGLONG(0);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeSignInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoRsp)
  return false;
#undef DO_
}

void IMChangeSignInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoRsp)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required uint64 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoRsp)
}

int IMChangeSignInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint64 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoRsp*>(&from));
}

void IMChangeSignInfoRsp::MergeFrom(const IMChangeSignInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeSignInfoRsp::CopyFrom(const IMChangeSignInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeSignInfoRsp::Swap(IMChangeSignInfoRsp* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeSignInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMModifyUserInfoReq::kFromUserIdFieldNumber;
const int IMModifyUserInfoReq::kFromCompanyIdFieldNumber;
const int IMModifyUserInfoReq::kUserInfoFieldNumber;
#endif  // !_MSC_VER

IMModifyUserInfoReq::IMModifyUserInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMModifyUserInfoReq)
}

void IMModifyUserInfoReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(&::IM::BaseDefine::UserInfo::default_instance());
#endif
}

IMModifyUserInfoReq::IMModifyUserInfoReq(const IMModifyUserInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMModifyUserInfoReq)
}

void IMModifyUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = 0u;
  from_company_id_ = 0u;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMModifyUserInfoReq::~IMModifyUserInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMModifyUserInfoReq)
  SharedDtor();
}

void IMModifyUserInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void IMModifyUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMModifyUserInfoReq& IMModifyUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMModifyUserInfoReq* IMModifyUserInfoReq::default_instance_ = NULL;

IMModifyUserInfoReq* IMModifyUserInfoReq::New() const {
  return new IMModifyUserInfoReq;
}

void IMModifyUserInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMModifyUserInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(from_user_id_, from_company_id_);
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMModifyUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMModifyUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_company_id;
        break;
      }

      // required uint32 from_company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_company_id_)));
          set_has_from_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info;
        break;
      }

      // required .IM.BaseDefine.UserInfo user_info = 3;
      case 3: {
        if (tag == 26) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMModifyUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMModifyUserInfoReq)
  return false;
#undef DO_
}

void IMModifyUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMModifyUserInfoReq)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 from_company_id = 2;
  if (has_from_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_company_id(), output);
  }

  // required .IM.BaseDefine.UserInfo user_info = 3;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMModifyUserInfoReq)
}

int IMModifyUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 from_company_id = 2;
    if (has_from_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_company_id());
    }

    // required .IM.BaseDefine.UserInfo user_info = 3;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMModifyUserInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMModifyUserInfoReq*>(&from));
}

void IMModifyUserInfoReq::MergeFrom(const IMModifyUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_from_company_id()) {
      set_from_company_id(from.from_company_id());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMModifyUserInfoReq::CopyFrom(const IMModifyUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMModifyUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void IMModifyUserInfoReq::Swap(IMModifyUserInfoReq* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(from_company_id_, other->from_company_id_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMModifyUserInfoReq::GetTypeName() const {
  return "IM.Buddy.IMModifyUserInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMModifyUserInfoRsp::kResultFieldNumber;
const int IMModifyUserInfoRsp::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

IMModifyUserInfoRsp::IMModifyUserInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMModifyUserInfoRsp)
}

void IMModifyUserInfoRsp::InitAsDefaultInstance() {
}

IMModifyUserInfoRsp::IMModifyUserInfoRsp(const IMModifyUserInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMModifyUserInfoRsp)
}

void IMModifyUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMModifyUserInfoRsp::~IMModifyUserInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMModifyUserInfoRsp)
  SharedDtor();
}

void IMModifyUserInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMModifyUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMModifyUserInfoRsp& IMModifyUserInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMModifyUserInfoRsp* IMModifyUserInfoRsp::default_instance_ = NULL;

IMModifyUserInfoRsp* IMModifyUserInfoRsp::New() const {
  return new IMModifyUserInfoRsp;
}

void IMModifyUserInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 1;
    update_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMModifyUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMModifyUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.OptResultCode result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMModifyUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMModifyUserInfoRsp)
  return false;
#undef DO_
}

void IMModifyUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMModifyUserInfoRsp)
  // required .IM.BaseDefine.OptResultCode result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint64 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMModifyUserInfoRsp)
}

int IMModifyUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.OptResultCode result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint64 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMModifyUserInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMModifyUserInfoRsp*>(&from));
}

void IMModifyUserInfoRsp::MergeFrom(const IMModifyUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMModifyUserInfoRsp::CopyFrom(const IMModifyUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMModifyUserInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMModifyUserInfoRsp::Swap(IMModifyUserInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMModifyUserInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMModifyUserInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMLoginStatusNotify::kCompanyIdFieldNumber;
const int IMLoginStatusNotify::kUserIdFieldNumber;
const int IMLoginStatusNotify::kDeviceTypeFieldNumber;
const int IMLoginStatusNotify::kLoginStatFieldNumber;
#endif  // !_MSC_VER

IMLoginStatusNotify::IMLoginStatusNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMLoginStatusNotify)
}

void IMLoginStatusNotify::InitAsDefaultInstance() {
}

IMLoginStatusNotify::IMLoginStatusNotify(const IMLoginStatusNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMLoginStatusNotify)
}

void IMLoginStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  device_type_ = 0u;
  login_stat_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginStatusNotify::~IMLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMLoginStatusNotify)
  SharedDtor();
}

void IMLoginStatusNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginStatusNotify& IMLoginStatusNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMLoginStatusNotify* IMLoginStatusNotify::default_instance_ = NULL;

IMLoginStatusNotify* IMLoginStatusNotify::New() const {
  return new IMLoginStatusNotify;
}

void IMLoginStatusNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMLoginStatusNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, device_type_);
    login_stat_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device_type;
        break;
      }

      // required uint32 device_type = 3;
      case 3: {
        if (tag == 24) {
         parse_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_login_stat;
        break;
      }

      // required .IM.BaseDefine.UserStatType login_stat = 4;
      case 4: {
        if (tag == 32) {
         parse_login_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_login_stat(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMLoginStatusNotify)
  return false;
#undef DO_
}

void IMLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMLoginStatusNotify)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 device_type = 3;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->device_type(), output);
  }

  // required .IM.BaseDefine.UserStatType login_stat = 4;
  if (has_login_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->login_stat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMLoginStatusNotify)
}

int IMLoginStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 device_type = 3;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_type());
    }

    // required .IM.BaseDefine.UserStatType login_stat = 4;
    if (has_login_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_stat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginStatusNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginStatusNotify*>(&from));
}

void IMLoginStatusNotify::MergeFrom(const IMLoginStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_login_stat()) {
      set_login_stat(from.login_stat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMLoginStatusNotify::CopyFrom(const IMLoginStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMLoginStatusNotify::Swap(IMLoginStatusNotify* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(device_type_, other->device_type_);
    std::swap(login_stat_, other->login_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMLoginStatusNotify::GetTypeName() const {
  return "IM.Buddy.IMLoginStatusNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMOptBuddyReq::kReqUserIdFieldNumber;
const int IMOptBuddyReq::kReqCompanyIdFieldNumber;
const int IMOptBuddyReq::kDestUserIdFieldNumber;
const int IMOptBuddyReq::kDestCompanyIdFieldNumber;
const int IMOptBuddyReq::kCreateTimeFieldNumber;
const int IMOptBuddyReq::kOptTypeFieldNumber;
const int IMOptBuddyReq::kOptRemarkFieldNumber;
#endif  // !_MSC_VER

IMOptBuddyReq::IMOptBuddyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMOptBuddyReq)
}

void IMOptBuddyReq::InitAsDefaultInstance() {
}

IMOptBuddyReq::IMOptBuddyReq(const IMOptBuddyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMOptBuddyReq)
}

void IMOptBuddyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_user_id_ = 0u;
  req_company_id_ = 0u;
  dest_user_id_ = 0u;
  dest_company_id_ = 0u;
  create_time_ = GOOGLE_ULONGLONG(0);
  opt_type_ = 1;
  opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMOptBuddyReq::~IMOptBuddyReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMOptBuddyReq)
  SharedDtor();
}

void IMOptBuddyReq::SharedDtor() {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_remark_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMOptBuddyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMOptBuddyReq& IMOptBuddyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMOptBuddyReq* IMOptBuddyReq::default_instance_ = NULL;

IMOptBuddyReq* IMOptBuddyReq::New() const {
  return new IMOptBuddyReq;
}

void IMOptBuddyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMOptBuddyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(req_user_id_, create_time_);
    opt_type_ = 1;
    if (has_opt_remark()) {
      if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opt_remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMOptBuddyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMOptBuddyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_user_id_)));
          set_has_req_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_company_id;
        break;
      }

      // required uint32 req_company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_req_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_company_id_)));
          set_has_req_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_user_id;
        break;
      }

      // required uint32 dest_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_user_id_)));
          set_has_dest_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dest_company_id;
        break;
      }

      // required uint32 dest_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_company_id_)));
          set_has_dest_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required uint64 create_time = 5;
      case 5: {
        if (tag == 40) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_opt_type;
        break;
      }

      // required .IM.BaseDefine.BuddyOptType opt_type = 6;
      case 6: {
        if (tag == 48) {
         parse_opt_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::BuddyOptType_IsValid(value)) {
            set_opt_type(static_cast< ::IM::BaseDefine::BuddyOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_opt_remark;
        break;
      }

      // required string opt_remark = 7;
      case 7: {
        if (tag == 58) {
         parse_opt_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt_remark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMOptBuddyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMOptBuddyReq)
  return false;
#undef DO_
}

void IMOptBuddyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMOptBuddyReq)
  // required uint32 req_user_id = 1;
  if (has_req_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_user_id(), output);
  }

  // required uint32 req_company_id = 2;
  if (has_req_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->req_company_id(), output);
  }

  // required uint32 dest_user_id = 3;
  if (has_dest_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_user_id(), output);
  }

  // required uint32 dest_company_id = 4;
  if (has_dest_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_company_id(), output);
  }

  // required uint64 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->create_time(), output);
  }

  // required .IM.BaseDefine.BuddyOptType opt_type = 6;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->opt_type(), output);
  }

  // required string opt_remark = 7;
  if (has_opt_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->opt_remark(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMOptBuddyReq)
}

int IMOptBuddyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_user_id = 1;
    if (has_req_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_user_id());
    }

    // required uint32 req_company_id = 2;
    if (has_req_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_company_id());
    }

    // required uint32 dest_user_id = 3;
    if (has_dest_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_user_id());
    }

    // required uint32 dest_company_id = 4;
    if (has_dest_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_company_id());
    }

    // required uint64 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // required .IM.BaseDefine.BuddyOptType opt_type = 6;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_type());
    }

    // required string opt_remark = 7;
    if (has_opt_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt_remark());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMOptBuddyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMOptBuddyReq*>(&from));
}

void IMOptBuddyReq::MergeFrom(const IMOptBuddyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_user_id()) {
      set_req_user_id(from.req_user_id());
    }
    if (from.has_req_company_id()) {
      set_req_company_id(from.req_company_id());
    }
    if (from.has_dest_user_id()) {
      set_dest_user_id(from.dest_user_id());
    }
    if (from.has_dest_company_id()) {
      set_dest_company_id(from.dest_company_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_opt_remark()) {
      set_opt_remark(from.opt_remark());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMOptBuddyReq::CopyFrom(const IMOptBuddyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMOptBuddyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMOptBuddyReq::Swap(IMOptBuddyReq* other) {
  if (other != this) {
    std::swap(req_user_id_, other->req_user_id_);
    std::swap(req_company_id_, other->req_company_id_);
    std::swap(dest_user_id_, other->dest_user_id_);
    std::swap(dest_company_id_, other->dest_company_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(opt_remark_, other->opt_remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMOptBuddyReq::GetTypeName() const {
  return "IM.Buddy.IMOptBuddyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMOptBuddyRsp::kReqUserIdFieldNumber;
const int IMOptBuddyRsp::kReqCompanyIdFieldNumber;
const int IMOptBuddyRsp::kDestUserIdFieldNumber;
const int IMOptBuddyRsp::kDestCompanyIdFieldNumber;
const int IMOptBuddyRsp::kResponseTimeFieldNumber;
const int IMOptBuddyRsp::kOptTypeFieldNumber;
const int IMOptBuddyRsp::kResultFieldNumber;
const int IMOptBuddyRsp::kOptRemarkFieldNumber;
#endif  // !_MSC_VER

IMOptBuddyRsp::IMOptBuddyRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMOptBuddyRsp)
}

void IMOptBuddyRsp::InitAsDefaultInstance() {
}

IMOptBuddyRsp::IMOptBuddyRsp(const IMOptBuddyRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMOptBuddyRsp)
}

void IMOptBuddyRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_user_id_ = 0u;
  req_company_id_ = 0u;
  dest_user_id_ = 0u;
  dest_company_id_ = 0u;
  response_time_ = GOOGLE_ULONGLONG(0);
  opt_type_ = 1;
  result_ = 1;
  opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMOptBuddyRsp::~IMOptBuddyRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMOptBuddyRsp)
  SharedDtor();
}

void IMOptBuddyRsp::SharedDtor() {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_remark_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMOptBuddyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMOptBuddyRsp& IMOptBuddyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMOptBuddyRsp* IMOptBuddyRsp::default_instance_ = NULL;

IMOptBuddyRsp* IMOptBuddyRsp::New() const {
  return new IMOptBuddyRsp;
}

void IMOptBuddyRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMOptBuddyRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(req_user_id_, response_time_);
    opt_type_ = 1;
    result_ = 1;
    if (has_opt_remark()) {
      if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opt_remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMOptBuddyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMOptBuddyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_user_id_)));
          set_has_req_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_company_id;
        break;
      }

      // required uint32 req_company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_req_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_company_id_)));
          set_has_req_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_user_id;
        break;
      }

      // required uint32 dest_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_user_id_)));
          set_has_dest_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dest_company_id;
        break;
      }

      // required uint32 dest_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_company_id_)));
          set_has_dest_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_response_time;
        break;
      }

      // required uint64 response_time = 5;
      case 5: {
        if (tag == 40) {
         parse_response_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &response_time_)));
          set_has_response_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_opt_type;
        break;
      }

      // required .IM.BaseDefine.BuddyOptType opt_type = 7;
      case 7: {
        if (tag == 56) {
         parse_opt_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::BuddyOptType_IsValid(value)) {
            set_opt_type(static_cast< ::IM::BaseDefine::BuddyOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result = 8;
      case 8: {
        if (tag == 64) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_opt_remark;
        break;
      }

      // required string opt_remark = 9;
      case 9: {
        if (tag == 74) {
         parse_opt_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt_remark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMOptBuddyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMOptBuddyRsp)
  return false;
#undef DO_
}

void IMOptBuddyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMOptBuddyRsp)
  // required uint32 req_user_id = 1;
  if (has_req_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_user_id(), output);
  }

  // required uint32 req_company_id = 2;
  if (has_req_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->req_company_id(), output);
  }

  // required uint32 dest_user_id = 3;
  if (has_dest_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_user_id(), output);
  }

  // required uint32 dest_company_id = 4;
  if (has_dest_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_company_id(), output);
  }

  // required uint64 response_time = 5;
  if (has_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->response_time(), output);
  }

  // required .IM.BaseDefine.BuddyOptType opt_type = 7;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->opt_type(), output);
  }

  // required .IM.BaseDefine.OptResultCode result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->result(), output);
  }

  // required string opt_remark = 9;
  if (has_opt_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->opt_remark(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMOptBuddyRsp)
}

int IMOptBuddyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_user_id = 1;
    if (has_req_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_user_id());
    }

    // required uint32 req_company_id = 2;
    if (has_req_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_company_id());
    }

    // required uint32 dest_user_id = 3;
    if (has_dest_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_user_id());
    }

    // required uint32 dest_company_id = 4;
    if (has_dest_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_company_id());
    }

    // required uint64 response_time = 5;
    if (has_response_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->response_time());
    }

    // required .IM.BaseDefine.BuddyOptType opt_type = 7;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_type());
    }

    // required .IM.BaseDefine.OptResultCode result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string opt_remark = 9;
    if (has_opt_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt_remark());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMOptBuddyRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMOptBuddyRsp*>(&from));
}

void IMOptBuddyRsp::MergeFrom(const IMOptBuddyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_user_id()) {
      set_req_user_id(from.req_user_id());
    }
    if (from.has_req_company_id()) {
      set_req_company_id(from.req_company_id());
    }
    if (from.has_dest_user_id()) {
      set_dest_user_id(from.dest_user_id());
    }
    if (from.has_dest_company_id()) {
      set_dest_company_id(from.dest_company_id());
    }
    if (from.has_response_time()) {
      set_response_time(from.response_time());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_opt_remark()) {
      set_opt_remark(from.opt_remark());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMOptBuddyRsp::CopyFrom(const IMOptBuddyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMOptBuddyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void IMOptBuddyRsp::Swap(IMOptBuddyRsp* other) {
  if (other != this) {
    std::swap(req_user_id_, other->req_user_id_);
    std::swap(req_company_id_, other->req_company_id_);
    std::swap(dest_user_id_, other->dest_user_id_);
    std::swap(dest_company_id_, other->dest_company_id_);
    std::swap(response_time_, other->response_time_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(result_, other->result_);
    std::swap(opt_remark_, other->opt_remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMOptBuddyRsp::GetTypeName() const {
  return "IM.Buddy.IMOptBuddyRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMModiNickNameReq::kUserIdFieldNumber;
const int IMModiNickNameReq::kCompanyIdFieldNumber;
const int IMModiNickNameReq::kDestUserIdFieldNumber;
const int IMModiNickNameReq::kDestCompanyIdFieldNumber;
const int IMModiNickNameReq::kNickNameFieldNumber;
#endif  // !_MSC_VER

IMModiNickNameReq::IMModiNickNameReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMModiNickNameReq)
}

void IMModiNickNameReq::InitAsDefaultInstance() {
}

IMModiNickNameReq::IMModiNickNameReq(const IMModiNickNameReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMModiNickNameReq)
}

void IMModiNickNameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  company_id_ = 0u;
  dest_user_id_ = 0u;
  dest_company_id_ = 0u;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMModiNickNameReq::~IMModiNickNameReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMModiNickNameReq)
  SharedDtor();
}

void IMModiNickNameReq::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMModiNickNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMModiNickNameReq& IMModiNickNameReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMModiNickNameReq* IMModiNickNameReq::default_instance_ = NULL;

IMModiNickNameReq* IMModiNickNameReq::New() const {
  return new IMModiNickNameReq;
}

void IMModiNickNameReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMModiNickNameReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, dest_company_id_);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMModiNickNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMModiNickNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_user_id;
        break;
      }

      // required uint32 dest_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_user_id_)));
          set_has_dest_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dest_company_id;
        break;
      }

      // required uint32 dest_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_company_id_)));
          set_has_dest_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 20;
      case 20: {
        if (tag == 162) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMModiNickNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMModiNickNameReq)
  return false;
#undef DO_
}

void IMModiNickNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMModiNickNameReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 company_id = 2;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->company_id(), output);
  }

  // required uint32 dest_user_id = 3;
  if (has_dest_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_user_id(), output);
  }

  // required uint32 dest_company_id = 4;
  if (has_dest_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_company_id(), output);
  }

  // required bytes nick_name = 20;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->nick_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMModiNickNameReq)
}

int IMModiNickNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 company_id = 2;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 dest_user_id = 3;
    if (has_dest_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_user_id());
    }

    // required uint32 dest_company_id = 4;
    if (has_dest_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_company_id());
    }

    // required bytes nick_name = 20;
    if (has_nick_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMModiNickNameReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMModiNickNameReq*>(&from));
}

void IMModiNickNameReq::MergeFrom(const IMModiNickNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_dest_user_id()) {
      set_dest_user_id(from.dest_user_id());
    }
    if (from.has_dest_company_id()) {
      set_dest_company_id(from.dest_company_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMModiNickNameReq::CopyFrom(const IMModiNickNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMModiNickNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMModiNickNameReq::Swap(IMModiNickNameReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(company_id_, other->company_id_);
    std::swap(dest_user_id_, other->dest_user_id_);
    std::swap(dest_company_id_, other->dest_company_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMModiNickNameReq::GetTypeName() const {
  return "IM.Buddy.IMModiNickNameReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMModiNickNameRsp::kUserIdFieldNumber;
const int IMModiNickNameRsp::kCompanyIdFieldNumber;
const int IMModiNickNameRsp::kDestUserIdFieldNumber;
const int IMModiNickNameRsp::kDestCompanyIdFieldNumber;
const int IMModiNickNameRsp::kNickNameFieldNumber;
const int IMModiNickNameRsp::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

IMModiNickNameRsp::IMModiNickNameRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMModiNickNameRsp)
}

void IMModiNickNameRsp::InitAsDefaultInstance() {
}

IMModiNickNameRsp::IMModiNickNameRsp(const IMModiNickNameRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMModiNickNameRsp)
}

void IMModiNickNameRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  company_id_ = 0u;
  dest_user_id_ = 0u;
  dest_company_id_ = 0u;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMModiNickNameRsp::~IMModiNickNameRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMModiNickNameRsp)
  SharedDtor();
}

void IMModiNickNameRsp::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMModiNickNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMModiNickNameRsp& IMModiNickNameRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMModiNickNameRsp* IMModiNickNameRsp::default_instance_ = NULL;

IMModiNickNameRsp* IMModiNickNameRsp::New() const {
  return new IMModiNickNameRsp;
}

void IMModiNickNameRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMModiNickNameRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(user_id_, dest_company_id_);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    update_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMModiNickNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMModiNickNameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_user_id;
        break;
      }

      // required uint32 dest_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_user_id_)));
          set_has_dest_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dest_company_id;
        break;
      }

      // required uint32 dest_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_company_id_)));
          set_has_dest_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 5;
      case 5: {
        if (tag == 42) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMModiNickNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMModiNickNameRsp)
  return false;
#undef DO_
}

void IMModiNickNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMModiNickNameRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 company_id = 2;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->company_id(), output);
  }

  // required uint32 dest_user_id = 3;
  if (has_dest_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_user_id(), output);
  }

  // required uint32 dest_company_id = 4;
  if (has_dest_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_company_id(), output);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->nick_name(), output);
  }

  // required uint64 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->update_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMModiNickNameRsp)
}

int IMModiNickNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 company_id = 2;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 dest_user_id = 3;
    if (has_dest_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_user_id());
    }

    // required uint32 dest_company_id = 4;
    if (has_dest_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_company_id());
    }

    // required bytes nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required uint64 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMModiNickNameRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMModiNickNameRsp*>(&from));
}

void IMModiNickNameRsp::MergeFrom(const IMModiNickNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_dest_user_id()) {
      set_dest_user_id(from.dest_user_id());
    }
    if (from.has_dest_company_id()) {
      set_dest_company_id(from.dest_company_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMModiNickNameRsp::CopyFrom(const IMModiNickNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMModiNickNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMModiNickNameRsp::Swap(IMModiNickNameRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(company_id_, other->company_id_);
    std::swap(dest_user_id_, other->dest_user_id_);
    std::swap(dest_company_id_, other->dest_company_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMModiNickNameRsp::GetTypeName() const {
  return "IM.Buddy.IMModiNickNameRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetBuddyReqListReq::kUserIdFieldNumber;
const int IMGetBuddyReqListReq::kCompanyIdFieldNumber;
const int IMGetBuddyReqListReq::kUpdateTimeFieldNumber;
const int IMGetBuddyReqListReq::kPackIndexFieldNumber;
#endif  // !_MSC_VER

IMGetBuddyReqListReq::IMGetBuddyReqListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMGetBuddyReqListReq)
}

void IMGetBuddyReqListReq::InitAsDefaultInstance() {
}

IMGetBuddyReqListReq::IMGetBuddyReqListReq(const IMGetBuddyReqListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMGetBuddyReqListReq)
}

void IMGetBuddyReqListReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  company_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  pack_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetBuddyReqListReq::~IMGetBuddyReqListReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMGetBuddyReqListReq)
  SharedDtor();
}

void IMGetBuddyReqListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetBuddyReqListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetBuddyReqListReq& IMGetBuddyReqListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMGetBuddyReqListReq* IMGetBuddyReqListReq::default_instance_ = NULL;

IMGetBuddyReqListReq* IMGetBuddyReqListReq::New() const {
  return new IMGetBuddyReqListReq;
}

void IMGetBuddyReqListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetBuddyReqListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, pack_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGetBuddyReqListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMGetBuddyReqListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pack_index;
        break;
      }

      // required uint32 pack_index = 4;
      case 4: {
        if (tag == 32) {
         parse_pack_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pack_index_)));
          set_has_pack_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMGetBuddyReqListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMGetBuddyReqListReq)
  return false;
#undef DO_
}

void IMGetBuddyReqListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMGetBuddyReqListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 company_id = 2;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->company_id(), output);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  // required uint32 pack_index = 4;
  if (has_pack_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pack_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMGetBuddyReqListReq)
}

int IMGetBuddyReqListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 company_id = 2;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 pack_index = 4;
    if (has_pack_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pack_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetBuddyReqListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetBuddyReqListReq*>(&from));
}

void IMGetBuddyReqListReq::MergeFrom(const IMGetBuddyReqListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_pack_index()) {
      set_pack_index(from.pack_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGetBuddyReqListReq::CopyFrom(const IMGetBuddyReqListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetBuddyReqListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGetBuddyReqListReq::Swap(IMGetBuddyReqListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(company_id_, other->company_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(pack_index_, other->pack_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGetBuddyReqListReq::GetTypeName() const {
  return "IM.Buddy.IMGetBuddyReqListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetBuddyReqListRsp::kUpdateTimeFieldNumber;
const int IMGetBuddyReqListRsp::kBuddysReqsFieldNumber;
const int IMGetBuddyReqListRsp::kPackIndexFieldNumber;
const int IMGetBuddyReqListRsp::kPackCountFieldNumber;
#endif  // !_MSC_VER

IMGetBuddyReqListRsp::IMGetBuddyReqListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMGetBuddyReqListRsp)
}

void IMGetBuddyReqListRsp::InitAsDefaultInstance() {
}

IMGetBuddyReqListRsp::IMGetBuddyReqListRsp(const IMGetBuddyReqListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMGetBuddyReqListRsp)
}

void IMGetBuddyReqListRsp::SharedCtor() {
  _cached_size_ = 0;
  update_time_ = GOOGLE_ULONGLONG(0);
  pack_index_ = 0u;
  pack_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetBuddyReqListRsp::~IMGetBuddyReqListRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMGetBuddyReqListRsp)
  SharedDtor();
}

void IMGetBuddyReqListRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetBuddyReqListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetBuddyReqListRsp& IMGetBuddyReqListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMGetBuddyReqListRsp* IMGetBuddyReqListRsp::default_instance_ = NULL;

IMGetBuddyReqListRsp* IMGetBuddyReqListRsp::New() const {
  return new IMGetBuddyReqListRsp;
}

void IMGetBuddyReqListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetBuddyReqListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(pack_index_, pack_count_);
    update_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buddysreqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGetBuddyReqListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMGetBuddyReqListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BuddysReqs;
        break;
      }

      // repeated .IM.BaseDefine.IMBuddyReqInfo BuddysReqs = 2;
      case 2: {
        if (tag == 18) {
         parse_BuddysReqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buddysreqs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BuddysReqs;
        if (input->ExpectTag(24)) goto parse_pack_index;
        break;
      }

      // required uint32 pack_index = 3;
      case 3: {
        if (tag == 24) {
         parse_pack_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pack_index_)));
          set_has_pack_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pack_count;
        break;
      }

      // required uint32 pack_count = 4;
      case 4: {
        if (tag == 32) {
         parse_pack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pack_count_)));
          set_has_pack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMGetBuddyReqListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMGetBuddyReqListRsp)
  return false;
#undef DO_
}

void IMGetBuddyReqListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMGetBuddyReqListRsp)
  // required uint64 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_time(), output);
  }

  // repeated .IM.BaseDefine.IMBuddyReqInfo BuddysReqs = 2;
  for (int i = 0; i < this->buddysreqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->buddysreqs(i), output);
  }

  // required uint32 pack_index = 3;
  if (has_pack_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pack_index(), output);
  }

  // required uint32 pack_count = 4;
  if (has_pack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pack_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMGetBuddyReqListRsp)
}

int IMGetBuddyReqListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 pack_index = 3;
    if (has_pack_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pack_index());
    }

    // required uint32 pack_count = 4;
    if (has_pack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pack_count());
    }

  }
  // repeated .IM.BaseDefine.IMBuddyReqInfo BuddysReqs = 2;
  total_size += 1 * this->buddysreqs_size();
  for (int i = 0; i < this->buddysreqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buddysreqs(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetBuddyReqListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetBuddyReqListRsp*>(&from));
}

void IMGetBuddyReqListRsp::MergeFrom(const IMGetBuddyReqListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buddysreqs_.MergeFrom(from.buddysreqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_pack_index()) {
      set_pack_index(from.pack_index());
    }
    if (from.has_pack_count()) {
      set_pack_count(from.pack_count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGetBuddyReqListRsp::CopyFrom(const IMGetBuddyReqListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetBuddyReqListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->buddysreqs())) return false;
  return true;
}

void IMGetBuddyReqListRsp::Swap(IMGetBuddyReqListRsp* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    buddysreqs_.Swap(&other->buddysreqs_);
    std::swap(pack_index_, other->pack_index_);
    std::swap(pack_count_, other->pack_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGetBuddyReqListRsp::GetTypeName() const {
  return "IM.Buddy.IMGetBuddyReqListRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

// @@protoc_insertion_point(global_scope)
