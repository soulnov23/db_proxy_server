// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Login {

void protobuf_ShutdownFile_IM_2eLogin_2eproto() {
  delete IMMsgServReq::default_instance_;
  delete IMMsgServRes::default_instance_;
  delete IMLoginReq::default_instance_;
  delete IMLoginRes::default_instance_;
  delete IMLogoutReq::default_instance_;
  delete IMLogoutRes::default_instance_;
  delete IMKickUser::default_instance_;
  delete IMDeviceTokenReq::default_instance_;
  delete IMDeviceTokenRsp::default_instance_;
  delete IMKickOtherClientReq::default_instance_;
  delete IMKickOtherClientRsp::default_instance_;
  delete IMPushShieldReq::default_instance_;
  delete IMPushShieldRsp::default_instance_;
  delete IMQueryPushShieldReq::default_instance_;
  delete IMQueryPushShieldRsp::default_instance_;
  delete IMModifyPswdReq::default_instance_;
  delete IMModifyPswdRsp::default_instance_;
  delete IMUserStatUpdateReq::default_instance_;
  delete IMUserRoleAuthorityReq::default_instance_;
  delete IMUserRoleAuthorityRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eLogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMMsgServReq::default_instance_ = new IMMsgServReq();
  IMMsgServRes::default_instance_ = new IMMsgServRes();
  IMLoginReq::default_instance_ = new IMLoginReq();
  IMLoginRes::default_instance_ = new IMLoginRes();
  IMLogoutReq::default_instance_ = new IMLogoutReq();
  IMLogoutRes::default_instance_ = new IMLogoutRes();
  IMKickUser::default_instance_ = new IMKickUser();
  IMDeviceTokenReq::default_instance_ = new IMDeviceTokenReq();
  IMDeviceTokenRsp::default_instance_ = new IMDeviceTokenRsp();
  IMKickOtherClientReq::default_instance_ = new IMKickOtherClientReq();
  IMKickOtherClientRsp::default_instance_ = new IMKickOtherClientRsp();
  IMPushShieldReq::default_instance_ = new IMPushShieldReq();
  IMPushShieldRsp::default_instance_ = new IMPushShieldRsp();
  IMQueryPushShieldReq::default_instance_ = new IMQueryPushShieldReq();
  IMQueryPushShieldRsp::default_instance_ = new IMQueryPushShieldRsp();
  IMModifyPswdReq::default_instance_ = new IMModifyPswdReq();
  IMModifyPswdRsp::default_instance_ = new IMModifyPswdRsp();
  IMUserStatUpdateReq::default_instance_ = new IMUserStatUpdateReq();
  IMUserRoleAuthorityReq::default_instance_ = new IMUserRoleAuthorityReq();
  IMUserRoleAuthorityRsp::default_instance_ = new IMUserRoleAuthorityRsp();
  IMMsgServReq::default_instance_->InitAsDefaultInstance();
  IMMsgServRes::default_instance_->InitAsDefaultInstance();
  IMLoginReq::default_instance_->InitAsDefaultInstance();
  IMLoginRes::default_instance_->InitAsDefaultInstance();
  IMLogoutReq::default_instance_->InitAsDefaultInstance();
  IMLogoutRes::default_instance_->InitAsDefaultInstance();
  IMKickUser::default_instance_->InitAsDefaultInstance();
  IMDeviceTokenReq::default_instance_->InitAsDefaultInstance();
  IMDeviceTokenRsp::default_instance_->InitAsDefaultInstance();
  IMKickOtherClientReq::default_instance_->InitAsDefaultInstance();
  IMKickOtherClientRsp::default_instance_->InitAsDefaultInstance();
  IMPushShieldReq::default_instance_->InitAsDefaultInstance();
  IMPushShieldRsp::default_instance_->InitAsDefaultInstance();
  IMQueryPushShieldReq::default_instance_->InitAsDefaultInstance();
  IMQueryPushShieldRsp::default_instance_->InitAsDefaultInstance();
  IMModifyPswdReq::default_instance_->InitAsDefaultInstance();
  IMModifyPswdRsp::default_instance_->InitAsDefaultInstance();
  IMUserStatUpdateReq::default_instance_->InitAsDefaultInstance();
  IMUserRoleAuthorityReq::default_instance_->InitAsDefaultInstance();
  IMUserRoleAuthorityRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eLogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eLogin_2eproto_once_);
void protobuf_AddDesc_IM_2eLogin_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eLogin_2eproto_once_,
                 &protobuf_AddDesc_IM_2eLogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eLogin_2eproto {
  StaticDescriptorInitializer_IM_2eLogin_2eproto() {
    protobuf_AddDesc_IM_2eLogin_2eproto();
  }
} static_descriptor_initializer_IM_2eLogin_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMMsgServReq::kCompanyIdFieldNumber;
#endif  // !_MSC_VER

IMMsgServReq::IMMsgServReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMMsgServReq)
}

void IMMsgServReq::InitAsDefaultInstance() {
}

IMMsgServReq::IMMsgServReq(const IMMsgServReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServReq)
}

void IMMsgServReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgServReq::~IMMsgServReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServReq)
  SharedDtor();
}

void IMMsgServReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgServReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgServReq& IMMsgServReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMMsgServReq* IMMsgServReq::default_instance_ = NULL;

IMMsgServReq* IMMsgServReq::New() const {
  return new IMMsgServReq;
}

void IMMsgServReq::Clear() {
  company_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMMsgServReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMMsgServReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMMsgServReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMMsgServReq)
  return false;
#undef DO_
}

void IMMsgServReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMMsgServReq)
  // optional uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMMsgServReq)
}

int IMMsgServReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgServReq*>(&from));
}

void IMMsgServReq::MergeFrom(const IMMsgServReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMMsgServReq::CopyFrom(const IMMsgServReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServReq::IsInitialized() const {

  return true;
}

void IMMsgServReq::Swap(IMMsgServReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMMsgServReq::GetTypeName() const {
  return "IM.Login.IMMsgServReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMMsgServRes::kResultCodeFieldNumber;
const int IMMsgServRes::kIpFieldNumber;
const int IMMsgServRes::kPortFieldNumber;
const int IMMsgServRes::kBackipIpFieldNumber;
const int IMMsgServRes::kBackipPortFieldNumber;
#endif  // !_MSC_VER

IMMsgServRes::IMMsgServRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMMsgServRes)
}

void IMMsgServRes::InitAsDefaultInstance() {
}

IMMsgServRes::IMMsgServRes(const IMMsgServRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServRes)
}

void IMMsgServRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgServRes::~IMMsgServRes() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServRes)
  SharedDtor();
}

void IMMsgServRes::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backip_ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgServRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgServRes& IMMsgServRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMMsgServRes* IMMsgServRes::default_instance_ = NULL;

IMMsgServRes* IMMsgServRes::New() const {
  return new IMMsgServRes;
}

void IMMsgServRes::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    result_code_ = 1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_backip_ip()) {
      if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backip_ip_->clear();
      }
    }
    backip_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMMsgServRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMMsgServRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.ResultType result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ResultType_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_backip_ip;
        break;
      }

      // optional string backip_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_backip_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backip_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_backip_port;
        break;
      }

      // optional uint32 backip_port = 5;
      case 5: {
        if (tag == 40) {
         parse_backip_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backip_port_)));
          set_has_backip_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMMsgServRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMMsgServRes)
  return false;
#undef DO_
}

void IMMsgServRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMMsgServRes)
  // required .IM.BaseDefine.ResultType result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional string backip_ip = 4;
  if (has_backip_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->backip_ip(), output);
  }

  // optional uint32 backip_port = 5;
  if (has_backip_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->backip_port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMMsgServRes)
}

int IMMsgServRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.ResultType result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string backip_ip = 4;
    if (has_backip_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backip_ip());
    }

    // optional uint32 backip_port = 5;
    if (has_backip_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backip_port());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgServRes*>(&from));
}

void IMMsgServRes::MergeFrom(const IMMsgServRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_backip_ip()) {
      set_backip_ip(from.backip_ip());
    }
    if (from.has_backip_port()) {
      set_backip_port(from.backip_port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMMsgServRes::CopyFrom(const IMMsgServRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMMsgServRes::Swap(IMMsgServRes* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(backip_ip_, other->backip_ip_);
    std::swap(backip_port_, other->backip_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMMsgServRes::GetTypeName() const {
  return "IM.Login.IMMsgServRes";
}


// ===================================================================

#ifndef _MSC_VER
const int IMLoginReq::kCompanyIdFieldNumber;
const int IMLoginReq::kUserNameFieldNumber;
const int IMLoginReq::kPasswordFieldNumber;
const int IMLoginReq::kOnlineStatusFieldNumber;
const int IMLoginReq::kClientTypeFieldNumber;
const int IMLoginReq::kUpdateTimeFieldNumber;
const int IMLoginReq::kClientVerFieldNumber;
#endif  // !_MSC_VER

IMLoginReq::IMLoginReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLoginReq)
}

void IMLoginReq::InitAsDefaultInstance() {
}

IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginReq)
}

void IMLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 1;
  client_type_ = 1;
  update_time_ = GOOGLE_ULONGLONG(0);
  client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginReq::~IMLoginReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginReq)
  SharedDtor();
}

void IMLoginReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ver_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginReq& IMLoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMLoginReq* IMLoginReq::default_instance_ = NULL;

IMLoginReq* IMLoginReq::New() const {
  return new IMLoginReq;
}

void IMLoginReq::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    company_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    online_status_ = 1;
    client_type_ = 1;
    update_time_ = GOOGLE_ULONGLONG(0);
    if (has_client_ver()) {
      if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_status;
        break;
      }

      // required .IM.BaseDefine.UserStatType online_status = 4;
      case 4: {
        if (tag == 32) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_online_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_client_type;
        break;
      }

      // required .IM.BaseDefine.ClientType client_type = 5;
      case 5: {
        if (tag == 40) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // optional uint64 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_client_ver;
        break;
      }

      // optional string client_ver = 7;
      case 7: {
        if (tag == 58) {
         parse_client_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLoginReq)
  return false;
#undef DO_
}

void IMLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLoginReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // required .IM.BaseDefine.UserStatType online_status = 4;
  if (has_online_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_status(), output);
  }

  // required .IM.BaseDefine.ClientType client_type = 5;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->client_type(), output);
  }

  // optional uint64 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->update_time(), output);
  }

  // optional string client_ver = 7;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->client_ver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLoginReq)
}

int IMLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required .IM.BaseDefine.UserStatType online_status = 4;
    if (has_online_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
    }

    // required .IM.BaseDefine.ClientType client_type = 5;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional uint64 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional string client_ver = 7;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ver());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginReq*>(&from));
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_online_status()) {
      set_online_status(from.online_status());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_client_ver()) {
      set_client_ver(from.client_ver());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMLoginReq::Swap(IMLoginReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(online_status_, other->online_status_);
    std::swap(client_type_, other->client_type_);
    std::swap(update_time_, other->update_time_);
    std::swap(client_ver_, other->client_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMLoginReq::GetTypeName() const {
  return "IM.Login.IMLoginReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMLoginRes::kServerTimeFieldNumber;
const int IMLoginRes::kResultCodeFieldNumber;
const int IMLoginRes::kOnlineStatusFieldNumber;
const int IMLoginRes::kUserSessionFieldNumber;
const int IMLoginRes::kUserInfoFieldNumber;
const int IMLoginRes::kPcLastOfflineTimeFieldNumber;
const int IMLoginRes::kPhoneLastOfflineTimeFieldNumber;
const int IMLoginRes::kNewClientVerFieldNumber;
#endif  // !_MSC_VER

IMLoginRes::IMLoginRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLoginRes)
}

void IMLoginRes::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(&::IM::BaseDefine::UserInfo::default_instance());
#endif
}

IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginRes)
}

void IMLoginRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_time_ = GOOGLE_ULONGLONG(0);
  result_code_ = 1;
  online_status_ = 1;
  user_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_ = NULL;
  pc_last_offline_time_ = GOOGLE_ULONGLONG(0);
  phone_last_offline_time_ = GOOGLE_ULONGLONG(0);
  new_client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginRes::~IMLoginRes() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginRes)
  SharedDtor();
}

void IMLoginRes::SharedDtor() {
  if (user_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_session_;
  }
  if (new_client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_client_ver_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void IMLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginRes& IMLoginRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMLoginRes* IMLoginRes::default_instance_ = NULL;

IMLoginRes* IMLoginRes::New() const {
  return new IMLoginRes;
}

void IMLoginRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMLoginRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pc_last_offline_time_, phone_last_offline_time_);
    server_time_ = GOOGLE_ULONGLONG(0);
    result_code_ = 1;
    online_status_ = 1;
    if (has_user_session()) {
      if (user_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_session_->clear();
      }
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
    }
    if (has_new_client_ver()) {
      if (new_client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_client_ver_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMLoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.LoginResultCode result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::LoginResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::LoginResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_status;
        break;
      }

      // required .IM.BaseDefine.UserStatType online_status = 3;
      case 3: {
        if (tag == 24) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_online_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_session;
        break;
      }

      // optional string user_session = 4;
      case 4: {
        if (tag == 34) {
         parse_user_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_info;
        break;
      }

      // optional .IM.BaseDefine.UserInfo user_info = 5;
      case 5: {
        if (tag == 42) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pc_last_offline_time;
        break;
      }

      // optional uint64 pc_last_offline_time = 6;
      case 6: {
        if (tag == 48) {
         parse_pc_last_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_last_offline_time_)));
          set_has_pc_last_offline_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_phone_last_offline_time;
        break;
      }

      // optional uint64 phone_last_offline_time = 7;
      case 7: {
        if (tag == 56) {
         parse_phone_last_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_last_offline_time_)));
          set_has_phone_last_offline_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_new_client_ver;
        break;
      }

      // optional string new_client_ver = 8;
      case 8: {
        if (tag == 66) {
         parse_new_client_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_client_ver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLoginRes)
  return false;
#undef DO_
}

void IMLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLoginRes)
  // required uint64 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_time(), output);
  }

  // required .IM.BaseDefine.LoginResultCode result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_code(), output);
  }

  // required .IM.BaseDefine.UserStatType online_status = 3;
  if (has_online_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_status(), output);
  }

  // optional string user_session = 4;
  if (has_user_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_session(), output);
  }

  // optional .IM.BaseDefine.UserInfo user_info = 5;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_info(), output);
  }

  // optional uint64 pc_last_offline_time = 6;
  if (has_pc_last_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pc_last_offline_time(), output);
  }

  // optional uint64 phone_last_offline_time = 7;
  if (has_phone_last_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->phone_last_offline_time(), output);
  }

  // optional string new_client_ver = 8;
  if (has_new_client_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->new_client_ver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLoginRes)
}

int IMLoginRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

    // required .IM.BaseDefine.LoginResultCode result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required .IM.BaseDefine.UserStatType online_status = 3;
    if (has_online_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
    }

    // optional string user_session = 4;
    if (has_user_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_session());
    }

    // optional .IM.BaseDefine.UserInfo user_info = 5;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional uint64 pc_last_offline_time = 6;
    if (has_pc_last_offline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc_last_offline_time());
    }

    // optional uint64 phone_last_offline_time = 7;
    if (has_phone_last_offline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_last_offline_time());
    }

    // optional string new_client_ver = 8;
    if (has_new_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_client_ver());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginRes*>(&from));
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_online_status()) {
      set_online_status(from.online_status());
    }
    if (from.has_user_session()) {
      set_user_session(from.user_session());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_pc_last_offline_time()) {
      set_pc_last_offline_time(from.pc_last_offline_time());
    }
    if (from.has_phone_last_offline_time()) {
      set_phone_last_offline_time(from.phone_last_offline_time());
    }
    if (from.has_new_client_ver()) {
      set_new_client_ver(from.new_client_ver());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void IMLoginRes::Swap(IMLoginRes* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(result_code_, other->result_code_);
    std::swap(online_status_, other->online_status_);
    std::swap(user_session_, other->user_session_);
    std::swap(user_info_, other->user_info_);
    std::swap(pc_last_offline_time_, other->pc_last_offline_time_);
    std::swap(phone_last_offline_time_, other->phone_last_offline_time_);
    std::swap(new_client_ver_, other->new_client_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMLoginRes::GetTypeName() const {
  return "IM.Login.IMLoginRes";
}


// ===================================================================

#ifndef _MSC_VER
const int IMLogoutReq::kCompanyIdFieldNumber;
const int IMLogoutReq::kUserIdFieldNumber;
const int IMLogoutReq::kClientTypeFieldNumber;
#endif  // !_MSC_VER

IMLogoutReq::IMLogoutReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLogoutReq)
}

void IMLogoutReq::InitAsDefaultInstance() {
}

IMLogoutReq::IMLogoutReq(const IMLogoutReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutReq)
}

void IMLogoutReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  client_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLogoutReq::~IMLogoutReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutReq)
  SharedDtor();
}

void IMLogoutReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLogoutReq& IMLogoutReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMLogoutReq* IMLogoutReq::default_instance_ = NULL;

IMLogoutReq* IMLogoutReq::New() const {
  return new IMLogoutReq;
}

void IMLogoutReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMLogoutReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    client_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMLogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }

      // required .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (tag == 24) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLogoutReq)
  return false;
#undef DO_
}

void IMLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLogoutReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.ClientType client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLogoutReq)
}

int IMLogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.ClientType client_type = 3;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLogoutReq*>(&from));
}

void IMLogoutReq::MergeFrom(const IMLogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMLogoutReq::CopyFrom(const IMLogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMLogoutReq::Swap(IMLogoutReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMLogoutReq::GetTypeName() const {
  return "IM.Login.IMLogoutReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMLogoutRes::kResultCodeFieldNumber;
#endif  // !_MSC_VER

IMLogoutRes::IMLogoutRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLogoutRes)
}

void IMLogoutRes::InitAsDefaultInstance() {
}

IMLogoutRes::IMLogoutRes(const IMLogoutRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutRes)
}

void IMLogoutRes::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLogoutRes::~IMLogoutRes() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutRes)
  SharedDtor();
}

void IMLogoutRes::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMLogoutRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLogoutRes& IMLogoutRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMLogoutRes* IMLogoutRes::default_instance_ = NULL;

IMLogoutRes* IMLogoutRes::New() const {
  return new IMLogoutRes;
}

void IMLogoutRes::Clear() {
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMLogoutRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMLogoutRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.LoginResultCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::LoginResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::LoginResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLogoutRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLogoutRes)
  return false;
#undef DO_
}

void IMLogoutRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLogoutRes)
  // required .IM.BaseDefine.LoginResultCode result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLogoutRes)
}

int IMLogoutRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.LoginResultCode result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLogoutRes*>(&from));
}

void IMLogoutRes::MergeFrom(const IMLogoutRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMLogoutRes::CopyFrom(const IMLogoutRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMLogoutRes::Swap(IMLogoutRes* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMLogoutRes::GetTypeName() const {
  return "IM.Login.IMLogoutRes";
}


// ===================================================================

#ifndef _MSC_VER
const int IMKickUser::kCompanyIdFieldNumber;
const int IMKickUser::kUserIdFieldNumber;
const int IMKickUser::kKickReasonFieldNumber;
#endif  // !_MSC_VER

IMKickUser::IMKickUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickUser)
}

void IMKickUser::InitAsDefaultInstance() {
}

IMKickUser::IMKickUser(const IMKickUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickUser)
}

void IMKickUser::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  kick_reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMKickUser::~IMKickUser() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickUser)
  SharedDtor();
}

void IMKickUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMKickUser& IMKickUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMKickUser* IMKickUser::default_instance_ = NULL;

IMKickUser* IMKickUser::New() const {
  return new IMKickUser;
}

void IMKickUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMKickUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    kick_reason_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kick_reason;
        break;
      }

      // required .IM.BaseDefine.KickReasonType kick_reason = 3;
      case 3: {
        if (tag == 24) {
         parse_kick_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::KickReasonType_IsValid(value)) {
            set_kick_reason(static_cast< ::IM::BaseDefine::KickReasonType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickUser)
  return false;
#undef DO_
}

void IMKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickUser)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.KickReasonType kick_reason = 3;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kick_reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickUser)
}

int IMKickUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.KickReasonType kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kick_reason());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMKickUser*>(&from));
}

void IMKickUser::MergeFrom(const IMKickUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMKickUser::CopyFrom(const IMKickUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMKickUser::Swap(IMKickUser* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMKickUser::GetTypeName() const {
  return "IM.Login.IMKickUser";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDeviceTokenReq::kCompanyIdFieldNumber;
const int IMDeviceTokenReq::kUserIdFieldNumber;
const int IMDeviceTokenReq::kDeviceTokenFieldNumber;
const int IMDeviceTokenReq::kClientTypeFieldNumber;
const int IMDeviceTokenReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDeviceTokenReq::IMDeviceTokenReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMDeviceTokenReq)
}

void IMDeviceTokenReq::InitAsDefaultInstance() {
}

IMDeviceTokenReq::IMDeviceTokenReq(const IMDeviceTokenReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenReq)
}

void IMDeviceTokenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_type_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDeviceTokenReq::~IMDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenReq)
  SharedDtor();
}

void IMDeviceTokenReq::SharedDtor() {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_token_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDeviceTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDeviceTokenReq& IMDeviceTokenReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMDeviceTokenReq* IMDeviceTokenReq::default_instance_ = NULL;

IMDeviceTokenReq* IMDeviceTokenReq::New() const {
  return new IMDeviceTokenReq;
}

void IMDeviceTokenReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDeviceTokenReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(company_id_, user_id_);
    if (has_device_token()) {
      if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_token_->clear();
      }
    }
    client_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDeviceTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMDeviceTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_token;
        break;
      }

      // required string device_token = 3;
      case 3: {
        if (tag == 26) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_type;
        break;
      }

      // optional .IM.BaseDefine.ClientType client_type = 4;
      case 4: {
        if (tag == 32) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMDeviceTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMDeviceTokenReq)
  return false;
#undef DO_
}

void IMDeviceTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMDeviceTokenReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string device_token = 3;
  if (has_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_token(), output);
  }

  // optional .IM.BaseDefine.ClientType client_type = 4;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMDeviceTokenReq)
}

int IMDeviceTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string device_token = 3;
    if (has_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_token());
    }

    // optional .IM.BaseDefine.ClientType client_type = 4;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDeviceTokenReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDeviceTokenReq*>(&from));
}

void IMDeviceTokenReq::MergeFrom(const IMDeviceTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_token()) {
      set_device_token(from.device_token());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDeviceTokenReq::CopyFrom(const IMDeviceTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDeviceTokenReq::Swap(IMDeviceTokenReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(device_token_, other->device_token_);
    std::swap(client_type_, other->client_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDeviceTokenReq::GetTypeName() const {
  return "IM.Login.IMDeviceTokenReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDeviceTokenRsp::kCompanyIdFieldNumber;
const int IMDeviceTokenRsp::kUserIdFieldNumber;
const int IMDeviceTokenRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDeviceTokenRsp::IMDeviceTokenRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMDeviceTokenRsp)
}

void IMDeviceTokenRsp::InitAsDefaultInstance() {
}

IMDeviceTokenRsp::IMDeviceTokenRsp(const IMDeviceTokenRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenRsp)
}

void IMDeviceTokenRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDeviceTokenRsp::~IMDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenRsp)
  SharedDtor();
}

void IMDeviceTokenRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDeviceTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDeviceTokenRsp& IMDeviceTokenRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMDeviceTokenRsp* IMDeviceTokenRsp::default_instance_ = NULL;

IMDeviceTokenRsp* IMDeviceTokenRsp::New() const {
  return new IMDeviceTokenRsp;
}

void IMDeviceTokenRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDeviceTokenRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDeviceTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMDeviceTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMDeviceTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMDeviceTokenRsp)
  return false;
#undef DO_
}

void IMDeviceTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMDeviceTokenRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMDeviceTokenRsp)
}

int IMDeviceTokenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDeviceTokenRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDeviceTokenRsp*>(&from));
}

void IMDeviceTokenRsp::MergeFrom(const IMDeviceTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDeviceTokenRsp::CopyFrom(const IMDeviceTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDeviceTokenRsp::Swap(IMDeviceTokenRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDeviceTokenRsp::GetTypeName() const {
  return "IM.Login.IMDeviceTokenRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMKickOtherClientReq::kCompanyIdFieldNumber;
const int IMKickOtherClientReq::kUserIdFieldNumber;
const int IMKickOtherClientReq::kClientTypeFieldNumber;
#endif  // !_MSC_VER

IMKickOtherClientReq::IMKickOtherClientReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickOtherClientReq)
}

void IMKickOtherClientReq::InitAsDefaultInstance() {
}

IMKickOtherClientReq::IMKickOtherClientReq(const IMKickOtherClientReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickOtherClientReq)
}

void IMKickOtherClientReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  client_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMKickOtherClientReq::~IMKickOtherClientReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickOtherClientReq)
  SharedDtor();
}

void IMKickOtherClientReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMKickOtherClientReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMKickOtherClientReq& IMKickOtherClientReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMKickOtherClientReq* IMKickOtherClientReq::default_instance_ = NULL;

IMKickOtherClientReq* IMKickOtherClientReq::New() const {
  return new IMKickOtherClientReq;
}

void IMKickOtherClientReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMKickOtherClientReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    client_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMKickOtherClientReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickOtherClientReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }

      // required .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (tag == 24) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickOtherClientReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickOtherClientReq)
  return false;
#undef DO_
}

void IMKickOtherClientReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickOtherClientReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.ClientType client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickOtherClientReq)
}

int IMKickOtherClientReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.ClientType client_type = 3;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickOtherClientReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMKickOtherClientReq*>(&from));
}

void IMKickOtherClientReq::MergeFrom(const IMKickOtherClientReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMKickOtherClientReq::CopyFrom(const IMKickOtherClientReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickOtherClientReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMKickOtherClientReq::Swap(IMKickOtherClientReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMKickOtherClientReq::GetTypeName() const {
  return "IM.Login.IMKickOtherClientReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMKickOtherClientRsp::kCompanyIdFieldNumber;
const int IMKickOtherClientRsp::kUserIdFieldNumber;
const int IMKickOtherClientRsp::kResultCodeFieldNumber;
#endif  // !_MSC_VER

IMKickOtherClientRsp::IMKickOtherClientRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickOtherClientRsp)
}

void IMKickOtherClientRsp::InitAsDefaultInstance() {
}

IMKickOtherClientRsp::IMKickOtherClientRsp(const IMKickOtherClientRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickOtherClientRsp)
}

void IMKickOtherClientRsp::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMKickOtherClientRsp::~IMKickOtherClientRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickOtherClientRsp)
  SharedDtor();
}

void IMKickOtherClientRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMKickOtherClientRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMKickOtherClientRsp& IMKickOtherClientRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMKickOtherClientRsp* IMKickOtherClientRsp::default_instance_ = NULL;

IMKickOtherClientRsp* IMKickOtherClientRsp::New() const {
  return new IMKickOtherClientRsp;
}

void IMKickOtherClientRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMKickOtherClientRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    result_code_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMKickOtherClientRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickOtherClientRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickOtherClientRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickOtherClientRsp)
  return false;
#undef DO_
}

void IMKickOtherClientRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickOtherClientRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickOtherClientRsp)
}

int IMKickOtherClientRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickOtherClientRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMKickOtherClientRsp*>(&from));
}

void IMKickOtherClientRsp::MergeFrom(const IMKickOtherClientRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMKickOtherClientRsp::CopyFrom(const IMKickOtherClientRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickOtherClientRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMKickOtherClientRsp::Swap(IMKickOtherClientRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMKickOtherClientRsp::GetTypeName() const {
  return "IM.Login.IMKickOtherClientRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMPushShieldReq::kCompanyIdFieldNumber;
const int IMPushShieldReq::kUserIdFieldNumber;
const int IMPushShieldReq::kShieldStatusFieldNumber;
const int IMPushShieldReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMPushShieldReq::IMPushShieldReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMPushShieldReq)
}

void IMPushShieldReq::InitAsDefaultInstance() {
}

IMPushShieldReq::IMPushShieldReq(const IMPushShieldReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMPushShieldReq)
}

void IMPushShieldReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  shield_status_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMPushShieldReq::~IMPushShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMPushShieldReq)
  SharedDtor();
}

void IMPushShieldReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMPushShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPushShieldReq& IMPushShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMPushShieldReq* IMPushShieldReq::default_instance_ = NULL;

IMPushShieldReq* IMPushShieldReq::New() const {
  return new IMPushShieldReq;
}

void IMPushShieldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMPushShieldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    shield_status_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMPushShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMPushShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 3;
      case 3: {
        if (tag == 24) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMPushShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMPushShieldReq)
  return false;
#undef DO_
}

void IMPushShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMPushShieldReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMPushShieldReq)
}

int IMPushShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 shield_status = 3;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPushShieldReq*>(&from));
}

void IMPushShieldReq::MergeFrom(const IMPushShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMPushShieldReq::CopyFrom(const IMPushShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMPushShieldReq::Swap(IMPushShieldReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(shield_status_, other->shield_status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMPushShieldReq::GetTypeName() const {
  return "IM.Login.IMPushShieldReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMPushShieldRsp::kCompanyIdFieldNumber;
const int IMPushShieldRsp::kUserIdFieldNumber;
const int IMPushShieldRsp::kResultCodeFieldNumber;
const int IMPushShieldRsp::kShieldStatusFieldNumber;
const int IMPushShieldRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMPushShieldRsp::IMPushShieldRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMPushShieldRsp)
}

void IMPushShieldRsp::InitAsDefaultInstance() {
}

IMPushShieldRsp::IMPushShieldRsp(const IMPushShieldRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMPushShieldRsp)
}

void IMPushShieldRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  result_code_ = 1;
  shield_status_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMPushShieldRsp::~IMPushShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMPushShieldRsp)
  SharedDtor();
}

void IMPushShieldRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMPushShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPushShieldRsp& IMPushShieldRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMPushShieldRsp* IMPushShieldRsp::default_instance_ = NULL;

IMPushShieldRsp* IMPushShieldRsp::New() const {
  return new IMPushShieldRsp;
}

void IMPushShieldRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMPushShieldRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(company_id_, user_id_);
    result_code_ = 1;
    shield_status_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMPushShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMPushShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shield_status;
        break;
      }

      // optional uint32 shield_status = 4;
      case 4: {
        if (tag == 32) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMPushShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMPushShieldRsp)
  return false;
#undef DO_
}

void IMPushShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMPushShieldRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_code(), output);
  }

  // optional uint32 shield_status = 4;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shield_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMPushShieldRsp)
}

int IMPushShieldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // optional uint32 shield_status = 4;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPushShieldRsp*>(&from));
}

void IMPushShieldRsp::MergeFrom(const IMPushShieldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMPushShieldRsp::CopyFrom(const IMPushShieldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushShieldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMPushShieldRsp::Swap(IMPushShieldRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(shield_status_, other->shield_status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMPushShieldRsp::GetTypeName() const {
  return "IM.Login.IMPushShieldRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMQueryPushShieldReq::kCompanyIdFieldNumber;
const int IMQueryPushShieldReq::kUserIdFieldNumber;
const int IMQueryPushShieldReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMQueryPushShieldReq::IMQueryPushShieldReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMQueryPushShieldReq)
}

void IMQueryPushShieldReq::InitAsDefaultInstance() {
}

IMQueryPushShieldReq::IMQueryPushShieldReq(const IMQueryPushShieldReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMQueryPushShieldReq)
}

void IMQueryPushShieldReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMQueryPushShieldReq::~IMQueryPushShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMQueryPushShieldReq)
  SharedDtor();
}

void IMQueryPushShieldReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMQueryPushShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMQueryPushShieldReq& IMQueryPushShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMQueryPushShieldReq* IMQueryPushShieldReq::default_instance_ = NULL;

IMQueryPushShieldReq* IMQueryPushShieldReq::New() const {
  return new IMQueryPushShieldReq;
}

void IMQueryPushShieldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMQueryPushShieldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMQueryPushShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMQueryPushShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMQueryPushShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMQueryPushShieldReq)
  return false;
#undef DO_
}

void IMQueryPushShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMQueryPushShieldReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMQueryPushShieldReq)
}

int IMQueryPushShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMQueryPushShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMQueryPushShieldReq*>(&from));
}

void IMQueryPushShieldReq::MergeFrom(const IMQueryPushShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMQueryPushShieldReq::CopyFrom(const IMQueryPushShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMQueryPushShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMQueryPushShieldReq::Swap(IMQueryPushShieldReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMQueryPushShieldReq::GetTypeName() const {
  return "IM.Login.IMQueryPushShieldReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMQueryPushShieldRsp::kCompanyIdFieldNumber;
const int IMQueryPushShieldRsp::kUserIdFieldNumber;
const int IMQueryPushShieldRsp::kResultCodeFieldNumber;
const int IMQueryPushShieldRsp::kShieldStatusFieldNumber;
const int IMQueryPushShieldRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMQueryPushShieldRsp::IMQueryPushShieldRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMQueryPushShieldRsp)
}

void IMQueryPushShieldRsp::InitAsDefaultInstance() {
}

IMQueryPushShieldRsp::IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMQueryPushShieldRsp)
}

void IMQueryPushShieldRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  result_code_ = 1;
  shield_status_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMQueryPushShieldRsp::~IMQueryPushShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMQueryPushShieldRsp)
  SharedDtor();
}

void IMQueryPushShieldRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMQueryPushShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMQueryPushShieldRsp& IMQueryPushShieldRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMQueryPushShieldRsp* IMQueryPushShieldRsp::default_instance_ = NULL;

IMQueryPushShieldRsp* IMQueryPushShieldRsp::New() const {
  return new IMQueryPushShieldRsp;
}

void IMQueryPushShieldRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMQueryPushShieldRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(company_id_, user_id_);
    result_code_ = 1;
    shield_status_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMQueryPushShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMQueryPushShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shield_status;
        break;
      }

      // optional uint32 shield_status = 4;
      case 4: {
        if (tag == 32) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMQueryPushShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMQueryPushShieldRsp)
  return false;
#undef DO_
}

void IMQueryPushShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMQueryPushShieldRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_code(), output);
  }

  // optional uint32 shield_status = 4;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shield_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMQueryPushShieldRsp)
}

int IMQueryPushShieldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // optional uint32 shield_status = 4;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMQueryPushShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMQueryPushShieldRsp*>(&from));
}

void IMQueryPushShieldRsp::MergeFrom(const IMQueryPushShieldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMQueryPushShieldRsp::CopyFrom(const IMQueryPushShieldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMQueryPushShieldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMQueryPushShieldRsp::Swap(IMQueryPushShieldRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(shield_status_, other->shield_status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMQueryPushShieldRsp::GetTypeName() const {
  return "IM.Login.IMQueryPushShieldRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMModifyPswdReq::kCompanyIdFieldNumber;
const int IMModifyPswdReq::kUserIdFieldNumber;
const int IMModifyPswdReq::kOldPswdFieldNumber;
const int IMModifyPswdReq::kNewPswdFieldNumber;
#endif  // !_MSC_VER

IMModifyPswdReq::IMModifyPswdReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMModifyPswdReq)
}

void IMModifyPswdReq::InitAsDefaultInstance() {
}

IMModifyPswdReq::IMModifyPswdReq(const IMModifyPswdReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMModifyPswdReq)
}

void IMModifyPswdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  old_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMModifyPswdReq::~IMModifyPswdReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMModifyPswdReq)
  SharedDtor();
}

void IMModifyPswdReq::SharedDtor() {
  if (old_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_pswd_;
  }
  if (new_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pswd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMModifyPswdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMModifyPswdReq& IMModifyPswdReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMModifyPswdReq* IMModifyPswdReq::default_instance_ = NULL;

IMModifyPswdReq* IMModifyPswdReq::New() const {
  return new IMModifyPswdReq;
}

void IMModifyPswdReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMModifyPswdReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    if (has_old_pswd()) {
      if (old_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        old_pswd_->clear();
      }
    }
    if (has_new_pswd()) {
      if (new_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_pswd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMModifyPswdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMModifyPswdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_old_pswd;
        break;
      }

      // required string old_pswd = 3;
      case 3: {
        if (tag == 26) {
         parse_old_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_pswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_new_pswd;
        break;
      }

      // required string new_pswd = 4;
      case 4: {
        if (tag == 34) {
         parse_new_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMModifyPswdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMModifyPswdReq)
  return false;
#undef DO_
}

void IMModifyPswdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMModifyPswdReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string old_pswd = 3;
  if (has_old_pswd()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->old_pswd(), output);
  }

  // required string new_pswd = 4;
  if (has_new_pswd()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->new_pswd(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMModifyPswdReq)
}

int IMModifyPswdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string old_pswd = 3;
    if (has_old_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_pswd());
    }

    // required string new_pswd = 4;
    if (has_new_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pswd());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMModifyPswdReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMModifyPswdReq*>(&from));
}

void IMModifyPswdReq::MergeFrom(const IMModifyPswdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_old_pswd()) {
      set_old_pswd(from.old_pswd());
    }
    if (from.has_new_pswd()) {
      set_new_pswd(from.new_pswd());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMModifyPswdReq::CopyFrom(const IMModifyPswdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMModifyPswdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMModifyPswdReq::Swap(IMModifyPswdReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(old_pswd_, other->old_pswd_);
    std::swap(new_pswd_, other->new_pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMModifyPswdReq::GetTypeName() const {
  return "IM.Login.IMModifyPswdReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMModifyPswdRsp::kCompanyIdFieldNumber;
const int IMModifyPswdRsp::kUserIdFieldNumber;
const int IMModifyPswdRsp::kResultCodeFieldNumber;
#endif  // !_MSC_VER

IMModifyPswdRsp::IMModifyPswdRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMModifyPswdRsp)
}

void IMModifyPswdRsp::InitAsDefaultInstance() {
}

IMModifyPswdRsp::IMModifyPswdRsp(const IMModifyPswdRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMModifyPswdRsp)
}

void IMModifyPswdRsp::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMModifyPswdRsp::~IMModifyPswdRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMModifyPswdRsp)
  SharedDtor();
}

void IMModifyPswdRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMModifyPswdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMModifyPswdRsp& IMModifyPswdRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMModifyPswdRsp* IMModifyPswdRsp::default_instance_ = NULL;

IMModifyPswdRsp* IMModifyPswdRsp::New() const {
  return new IMModifyPswdRsp;
}

void IMModifyPswdRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMModifyPswdRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    result_code_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMModifyPswdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMModifyPswdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMModifyPswdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMModifyPswdRsp)
  return false;
#undef DO_
}

void IMModifyPswdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMModifyPswdRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMModifyPswdRsp)
}

int IMModifyPswdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMModifyPswdRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMModifyPswdRsp*>(&from));
}

void IMModifyPswdRsp::MergeFrom(const IMModifyPswdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMModifyPswdRsp::CopyFrom(const IMModifyPswdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMModifyPswdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMModifyPswdRsp::Swap(IMModifyPswdRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMModifyPswdRsp::GetTypeName() const {
  return "IM.Login.IMModifyPswdRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserStatUpdateReq::kCompanyIdFieldNumber;
const int IMUserStatUpdateReq::kUserIdFieldNumber;
const int IMUserStatUpdateReq::kStatusFieldNumber;
const int IMUserStatUpdateReq::kClientTypeFieldNumber;
const int IMUserStatUpdateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserStatUpdateReq::IMUserStatUpdateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMUserStatUpdateReq)
}

void IMUserStatUpdateReq::InitAsDefaultInstance() {
}

IMUserStatUpdateReq::IMUserStatUpdateReq(const IMUserStatUpdateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMUserStatUpdateReq)
}

void IMUserStatUpdateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  status_ = 1;
  client_type_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserStatUpdateReq::~IMUserStatUpdateReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMUserStatUpdateReq)
  SharedDtor();
}

void IMUserStatUpdateReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserStatUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserStatUpdateReq& IMUserStatUpdateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMUserStatUpdateReq* IMUserStatUpdateReq::default_instance_ = NULL;

IMUserStatUpdateReq* IMUserStatUpdateReq::New() const {
  return new IMUserStatUpdateReq;
}

void IMUserStatUpdateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserStatUpdateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(company_id_, user_id_);
    status_ = 1;
    client_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserStatUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMUserStatUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.UserStatType status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_type;
        break;
      }

      // required .IM.BaseDefine.ClientType client_type = 4;
      case 4: {
        if (tag == 32) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMUserStatUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMUserStatUpdateReq)
  return false;
#undef DO_
}

void IMUserStatUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMUserStatUpdateReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // required .IM.BaseDefine.ClientType client_type = 4;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMUserStatUpdateReq)
}

int IMUserStatUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.UserStatType status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .IM.BaseDefine.ClientType client_type = 4;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserStatUpdateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserStatUpdateReq*>(&from));
}

void IMUserStatUpdateReq::MergeFrom(const IMUserStatUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserStatUpdateReq::CopyFrom(const IMUserStatUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMUserStatUpdateReq::Swap(IMUserStatUpdateReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(status_, other->status_);
    std::swap(client_type_, other->client_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserStatUpdateReq::GetTypeName() const {
  return "IM.Login.IMUserStatUpdateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserRoleAuthorityReq::kCompanyIdFieldNumber;
const int IMUserRoleAuthorityReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

IMUserRoleAuthorityReq::IMUserRoleAuthorityReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMUserRoleAuthorityReq)
}

void IMUserRoleAuthorityReq::InitAsDefaultInstance() {
}

IMUserRoleAuthorityReq::IMUserRoleAuthorityReq(const IMUserRoleAuthorityReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMUserRoleAuthorityReq)
}

void IMUserRoleAuthorityReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserRoleAuthorityReq::~IMUserRoleAuthorityReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMUserRoleAuthorityReq)
  SharedDtor();
}

void IMUserRoleAuthorityReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserRoleAuthorityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserRoleAuthorityReq& IMUserRoleAuthorityReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMUserRoleAuthorityReq* IMUserRoleAuthorityReq::default_instance_ = NULL;

IMUserRoleAuthorityReq* IMUserRoleAuthorityReq::New() const {
  return new IMUserRoleAuthorityReq;
}

void IMUserRoleAuthorityReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserRoleAuthorityReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserRoleAuthorityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMUserRoleAuthorityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMUserRoleAuthorityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMUserRoleAuthorityReq)
  return false;
#undef DO_
}

void IMUserRoleAuthorityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMUserRoleAuthorityReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMUserRoleAuthorityReq)
}

int IMUserRoleAuthorityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserRoleAuthorityReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserRoleAuthorityReq*>(&from));
}

void IMUserRoleAuthorityReq::MergeFrom(const IMUserRoleAuthorityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserRoleAuthorityReq::CopyFrom(const IMUserRoleAuthorityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserRoleAuthorityReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMUserRoleAuthorityReq::Swap(IMUserRoleAuthorityReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserRoleAuthorityReq::GetTypeName() const {
  return "IM.Login.IMUserRoleAuthorityReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserRoleAuthorityRsp::kRoleFieldNumber;
#endif  // !_MSC_VER

IMUserRoleAuthorityRsp::IMUserRoleAuthorityRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMUserRoleAuthorityRsp)
}

void IMUserRoleAuthorityRsp::InitAsDefaultInstance() {
}

IMUserRoleAuthorityRsp::IMUserRoleAuthorityRsp(const IMUserRoleAuthorityRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMUserRoleAuthorityRsp)
}

void IMUserRoleAuthorityRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserRoleAuthorityRsp::~IMUserRoleAuthorityRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMUserRoleAuthorityRsp)
  SharedDtor();
}

void IMUserRoleAuthorityRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserRoleAuthorityRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserRoleAuthorityRsp& IMUserRoleAuthorityRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

IMUserRoleAuthorityRsp* IMUserRoleAuthorityRsp::default_instance_ = NULL;

IMUserRoleAuthorityRsp* IMUserRoleAuthorityRsp::New() const {
  return new IMUserRoleAuthorityRsp;
}

void IMUserRoleAuthorityRsp::Clear() {
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserRoleAuthorityRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Login.IMUserRoleAuthorityRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.IMUserRole role = 1;
      case 1: {
        if (tag == 10) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_role;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMUserRoleAuthorityRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMUserRoleAuthorityRsp)
  return false;
#undef DO_
}

void IMUserRoleAuthorityRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMUserRoleAuthorityRsp)
  // repeated .IM.BaseDefine.IMUserRole role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->role(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Login.IMUserRoleAuthorityRsp)
}

int IMUserRoleAuthorityRsp::ByteSize() const {
  int total_size = 0;

  // repeated .IM.BaseDefine.IMUserRole role = 1;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserRoleAuthorityRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserRoleAuthorityRsp*>(&from));
}

void IMUserRoleAuthorityRsp::MergeFrom(const IMUserRoleAuthorityRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserRoleAuthorityRsp::CopyFrom(const IMUserRoleAuthorityRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserRoleAuthorityRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->role())) return false;
  return true;
}

void IMUserRoleAuthorityRsp::Swap(IMUserRoleAuthorityRsp* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserRoleAuthorityRsp::GetTypeName() const {
  return "IM.Login.IMUserRoleAuthorityRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)
