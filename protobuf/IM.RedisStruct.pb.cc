// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.RedisStruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.RedisStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalSesssion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalSesssion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnSessionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnSessionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserFriendItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserFriendItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserFriendVerItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserFriendVerItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRecentContractoritem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRecentContractoritem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRecentChatList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRecentChatList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGroupList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGroupList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMemberItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMemberItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrgGroupMemberItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrgGroupMemberItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrgGroupMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrgGroupMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrgNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrgNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrgTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrgTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompanyUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompanyUserList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_IM_2eRedisStruct_2eproto() {
  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IM.RedisStruct.proto");
  GOOGLE_CHECK(file != NULL);
  CompanyInfo_descriptor_ = file->message_type(0);
  static const int CompanyInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, company_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, company_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, auth_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, contractor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, contractor_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, contractor_tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, contractor_mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, update_time_),
  };
  CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompanyInfo_descriptor_,
      CompanyInfo::default_instance_,
      CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompanyInfo));
  UserInfo_descriptor_ = file->message_type(1);
  static const int UserInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, avatar_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_english_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_borndate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, work_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, pos_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sign_info_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  GlobalSesssion_descriptor_ = file->message_type(2);
  static const int GlobalSesssion_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, connsvr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, connsocket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, device_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, update_time_),
  };
  GlobalSesssion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalSesssion_descriptor_,
      GlobalSesssion::default_instance_,
      GlobalSesssion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSesssion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalSesssion));
  ConnSessionItem_descriptor_ = file->message_type(3);
  static const int ConnSessionItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSessionItem, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSessionItem, update_time_),
  };
  ConnSessionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnSessionItem_descriptor_,
      ConnSessionItem::default_instance_,
      ConnSessionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSessionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnSessionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnSessionItem));
  UserStat_descriptor_ = file->message_type(4);
  static const int UserStat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, online_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, pc_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, android_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, ios_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, mac_session_id_),
  };
  UserStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStat_descriptor_,
      UserStat::default_instance_,
      UserStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStat));
  UserFriendItem_descriptor_ = file->message_type(5);
  static const int UserFriendItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, is_fixtop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, fix_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, is_delete_),
  };
  UserFriendItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserFriendItem_descriptor_,
      UserFriendItem::default_instance_,
      UserFriendItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserFriendItem));
  UserFriendList_descriptor_ = file->message_type(6);
  static const int UserFriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendList, friend_list_),
  };
  UserFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserFriendList_descriptor_,
      UserFriendList::default_instance_,
      UserFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserFriendList));
  UserFriendVerItem_descriptor_ = file->message_type(7);
  static const int UserFriendVerItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendVerItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendVerItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendVerItem, update_time_),
  };
  UserFriendVerItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserFriendVerItem_descriptor_,
      UserFriendVerItem::default_instance_,
      UserFriendVerItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendVerItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendVerItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserFriendVerItem));
  UserSession_descriptor_ = file->message_type(8);
  static const int UserSession_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, device_type_),
  };
  UserSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSession_descriptor_,
      UserSession::default_instance_,
      UserSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSession));
  UserRecentContractoritem_descriptor_ = file->message_type(9);
  static const int UserRecentContractoritem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, friend_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, is_fixtop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, fix_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, update_time_),
  };
  UserRecentContractoritem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRecentContractoritem_descriptor_,
      UserRecentContractoritem::default_instance_,
      UserRecentContractoritem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentContractoritem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRecentContractoritem));
  UserRecentChatList_descriptor_ = file->message_type(10);
  static const int UserRecentChatList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentChatList, friend_list_),
  };
  UserRecentChatList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRecentChatList_descriptor_,
      UserRecentChatList::default_instance_,
      UserRecentChatList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentChatList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecentChatList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRecentChatList));
  GroupListItem_descriptor_ = file->message_type(11);
  static const int GroupListItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, is_fixtop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, fix_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, is_delete_),
  };
  GroupListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupListItem_descriptor_,
      GroupListItem::default_instance_,
      GroupListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupListItem));
  UserGroupList_descriptor_ = file->message_type(12);
  static const int UserGroupList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGroupList, group_list_),
  };
  UserGroupList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGroupList_descriptor_,
      UserGroupList::default_instance_,
      UserGroupList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGroupList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGroupList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGroupList));
  GroupMemberItem_descriptor_ = file->message_type(13);
  static const int GroupMemberItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, member_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, member_remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, member_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, is_delete_),
  };
  GroupMemberItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMemberItem_descriptor_,
      GroupMemberItem::default_instance_,
      GroupMemberItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMemberItem));
  GroupMemberList_descriptor_ = file->message_type(14);
  static const int GroupMemberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberList, member_list_),
  };
  GroupMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMemberList_descriptor_,
      GroupMemberList::default_instance_,
      GroupMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMemberList));
  OrgGroupMemberItem_descriptor_ = file->message_type(15);
  static const int OrgGroupMemberItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberItem, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberItem, update_time_),
  };
  OrgGroupMemberItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrgGroupMemberItem_descriptor_,
      OrgGroupMemberItem::default_instance_,
      OrgGroupMemberItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrgGroupMemberItem));
  OrgGroupMemberList_descriptor_ = file->message_type(16);
  static const int OrgGroupMemberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberList, member_list_),
  };
  OrgGroupMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrgGroupMemberList_descriptor_,
      OrgGroupMemberList::default_instance_,
      OrgGroupMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgGroupMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrgGroupMemberList));
  OrgNode_descriptor_ = file->message_type(17);
  static const int OrgNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgNode, lvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgNode, rvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgNode, type_),
  };
  OrgNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrgNode_descriptor_,
      OrgNode::default_instance_,
      OrgNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrgNode));
  OrgTree_descriptor_ = file->message_type(18);
  static const int OrgTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgTree, org_node_list_),
  };
  OrgTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrgTree_descriptor_,
      OrgTree::default_instance_,
      OrgTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrgTree));
  CompanyUserList_descriptor_ = file->message_type(19);
  static const int CompanyUserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyUserList, user_id_),
  };
  CompanyUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompanyUserList_descriptor_,
      CompanyUserList::default_instance_,
      CompanyUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompanyUserList));
  GroupType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IM_2eRedisStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompanyInfo_descriptor_, &CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalSesssion_descriptor_, &GlobalSesssion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnSessionItem_descriptor_, &ConnSessionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStat_descriptor_, &UserStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserFriendItem_descriptor_, &UserFriendItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserFriendList_descriptor_, &UserFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserFriendVerItem_descriptor_, &UserFriendVerItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSession_descriptor_, &UserSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRecentContractoritem_descriptor_, &UserRecentContractoritem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRecentChatList_descriptor_, &UserRecentChatList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupListItem_descriptor_, &GroupListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGroupList_descriptor_, &UserGroupList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMemberItem_descriptor_, &GroupMemberItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMemberList_descriptor_, &GroupMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrgGroupMemberItem_descriptor_, &OrgGroupMemberItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrgGroupMemberList_descriptor_, &OrgGroupMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrgNode_descriptor_, &OrgNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrgTree_descriptor_, &OrgTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompanyUserList_descriptor_, &CompanyUserList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto() {
  delete CompanyInfo::default_instance_;
  delete CompanyInfo_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete GlobalSesssion::default_instance_;
  delete GlobalSesssion_reflection_;
  delete ConnSessionItem::default_instance_;
  delete ConnSessionItem_reflection_;
  delete UserStat::default_instance_;
  delete UserStat_reflection_;
  delete UserFriendItem::default_instance_;
  delete UserFriendItem_reflection_;
  delete UserFriendList::default_instance_;
  delete UserFriendList_reflection_;
  delete UserFriendVerItem::default_instance_;
  delete UserFriendVerItem_reflection_;
  delete UserSession::default_instance_;
  delete UserSession_reflection_;
  delete UserRecentContractoritem::default_instance_;
  delete UserRecentContractoritem_reflection_;
  delete UserRecentChatList::default_instance_;
  delete UserRecentChatList_reflection_;
  delete GroupListItem::default_instance_;
  delete GroupListItem_reflection_;
  delete UserGroupList::default_instance_;
  delete UserGroupList_reflection_;
  delete GroupMemberItem::default_instance_;
  delete GroupMemberItem_reflection_;
  delete GroupMemberList::default_instance_;
  delete GroupMemberList_reflection_;
  delete OrgGroupMemberItem::default_instance_;
  delete OrgGroupMemberItem_reflection_;
  delete OrgGroupMemberList::default_instance_;
  delete OrgGroupMemberList_reflection_;
  delete OrgNode::default_instance_;
  delete OrgNode_reflection_;
  delete OrgTree::default_instance_;
  delete OrgTree_reflection_;
  delete CompanyUserList::default_instance_;
  delete CompanyUserList_reflection_;
}

void protobuf_AddDesc_IM_2eRedisStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024IM.RedisStruct.proto\"\317\002\n\013CompanyInfo\022\022"
    "\n\ncompany_id\030\001 \002(\r\022\024\n\014company_name\030\002 \002(\t"
    "\022\024\n\014company_code\030\003 \002(\t\022\025\n\rcompany_scale\030"
    "\004 \002(\t\022\022\n\nuser_count\030\005 \002(\r\022\016\n\006active\030\006 \002("
    "\r\022\017\n\007address\030\007 \002(\t\022\017\n\007country\030\010 \002(\t\022\023\n\013a"
    "uth_status\030\t \002(\005\022\027\n\017contractor_name\030\n \002("
    "\t\022\030\n\020contractor_email\030\013 \002(\t\022\026\n\016contracto"
    "r_tel\030\014 \002(\t\022\031\n\021contractor_mobile\030\r \002(\t\022\023"
    "\n\013create_time\030\016 \002(\r\022\023\n\013update_time\030\017 \002(\r"
    "\"\347\002\n\010UserInfo\022\022\n\ncompany_id\030\001 \002(\r\022\017\n\007use"
    "r_id\030\002 \002(\r\022\023\n\013user_gender\030\003 \002(\r\022\026\n\016user_"
    "nick_name\030\004 \002(\t\022\022\n\navatar_url\030\005 \002(\t\022\032\n\022a"
    "vatar_update_time\030\006 \002(\004\022\r\n\005email\030\007 \002(\t\022\026"
    "\n\016user_real_name\030\010 \002(\t\022\023\n\013user_mobile\030\t "
    "\002(\t\022\020\n\010user_tel\030\n \002(\t\022\031\n\021user_english_na"
    "me\030\013 \002(\t\022\016\n\006status\030\014 \002(\r\022\025\n\ruser_borndat"
    "e\030\r \002(\r\022\023\n\013update_time\030\016 \002(\004\022\017\n\007work_id\030"
    "\017 \002(\r\022\020\n\010pos_json\030\020 \002(\t\022\021\n\tsign_info\030\021 \001"
    "(\t\"\242\001\n\016GlobalSesssion\022\022\n\ncompany_id\030\001 \002("
    "\r\022\017\n\007user_id\030\002 \002(\r\022\022\n\nconnsvr_id\030\003 \002(\r\022\030"
    "\n\020connsocket_index\030\004 \002(\r\022\023\n\013device_type\030"
    "\005 \002(\r\022\023\n\013device_stat\030\006 \002(\r\022\023\n\013update_tim"
    "e\030\007 \002(\r\":\n\017ConnSessionItem\022\022\n\nsession_id"
    "\030\001 \002(\t\022\023\n\013update_time\030\002 \002(\r\"\231\001\n\010UserStat"
    "\022\023\n\013update_time\030\001 \002(\r\022\025\n\ronline_device\030\002"
    " \002(\r\022\025\n\rpc_session_id\030\003 \001(\t\022\032\n\022android_s"
    "ession_id\030\004 \001(\t\022\026\n\016ios_session_id\030\005 \001(\t\022"
    "\026\n\016mac_session_id\030\006 \001(\t\"\223\001\n\016UserFriendIt"
    "em\022\022\n\ncompany_id\030\001 \002(\r\022\017\n\007user_id\030\002 \002(\r\022"
    "\021\n\tis_fixtop\030\003 \002(\r\022\021\n\tfix_order\030\004 \002(\r\022\016\n"
    "\006remark\030\006 \002(\t\022\023\n\013update_time\030\007 \002(\004\022\021\n\tis"
    "_delete\030\010 \002(\010\"6\n\016UserFriendList\022$\n\013frien"
    "d_list\030\001 \003(\0132\017.UserFriendItem\"M\n\021UserFri"
    "endVerItem\022\022\n\ncompany_id\030\001 \002(\r\022\017\n\007user_i"
    "d\030\002 \002(\r\022\023\n\013update_time\030\003 \002(\004\"G\n\013UserSess"
    "ion\022\022\n\ncompany_id\030\001 \002(\r\022\017\n\007user_id\030\002 \002(\r"
    "\022\023\n\013device_type\030\003 \002(\r\"\217\001\n\030UserRecentCont"
    "ractoritem\022\022\n\ncompany_id\030\001 \002(\r\022\017\n\007user_i"
    "d\030\002 \002(\r\022\023\n\013friend_type\030\003 \002(\r\022\021\n\tis_fixto"
    "p\030\004 \002(\r\022\021\n\tfix_order\030\005 \002(\r\022\023\n\013update_tim"
    "e\030\006 \002(\r\"D\n\022UserRecentChatList\022.\n\013friend_"
    "list\030\001 \003(\0132\031.UserRecentContractoritem\"\263\001"
    "\n\rGroupListItem\022\022\n\ncompany_id\030\001 \002(\r\022\020\n\010g"
    "roup_id\030\002 \002(\r\022\036\n\ngroup_type\030\003 \002(\0162\n.Grou"
    "pType\022\021\n\tis_fixtop\030\004 \002(\r\022\021\n\tfix_order\030\005 "
    "\002(\r\022\016\n\006remark\030\007 \002(\t\022\023\n\013update_time\030\010 \002(\004"
    "\022\021\n\tis_delete\030\t \002(\010\"3\n\rUserGroupList\022\"\n\n"
    "group_list\030\001 \003(\0132\016.GroupListItem\"\241\001\n\017Gro"
    "upMemberItem\022\022\n\ncompany_id\030\001 \002(\r\022\021\n\tmemb"
    "er_id\030\002 \002(\r\022\023\n\013member_name\030\003 \002(\t\022\025\n\rmemb"
    "er_remark\030\004 \002(\t\022\023\n\013member_role\030\005 \002(\r\022\023\n\013"
    "update_time\030\006 \002(\r\022\021\n\tis_delete\030\007 \002(\010\"8\n\017"
    "GroupMemberList\022%\n\013member_list\030\001 \003(\0132\020.G"
    "roupMemberItem\"P\n\022OrgGroupMemberItem\022\022\n\n"
    "company_id\030\001 \002(\r\022\021\n\tmember_id\030\002 \002(\r\022\023\n\013u"
    "pdate_time\030\003 \002(\r\">\n\022OrgGroupMemberList\022("
    "\n\013member_list\030\001 \003(\0132\023.OrgGroupMemberItem"
    "\"C\n\007OrgNode\022\n\n\002id\030\001 \002(\r\022\016\n\006lvalue\030\002 \002(\r\022"
    "\016\n\006rvalue\030\003 \002(\r\022\014\n\004type\030\004 \002(\r\"*\n\007OrgTree"
    "\022\037\n\rorg_node_list\030\001 \003(\0132\010.OrgNode\"\"\n\017Com"
    "panyUserList\022\017\n\007user_id\030\001 \003(\r*a\n\tGroupTy"
    "pe\022\025\n\021GROUP_TYPE_NORMAL\020\001\022\022\n\016GROUP_TYPE_"
    "TMP\020\002\022\022\n\016GROUP_TYPE_ORG\020\003\022\025\n\021GROUP_TYPE_"
    "PUBLIC\020\021", 2528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.RedisStruct.proto", &protobuf_RegisterTypes);
  CompanyInfo::default_instance_ = new CompanyInfo();
  UserInfo::default_instance_ = new UserInfo();
  GlobalSesssion::default_instance_ = new GlobalSesssion();
  ConnSessionItem::default_instance_ = new ConnSessionItem();
  UserStat::default_instance_ = new UserStat();
  UserFriendItem::default_instance_ = new UserFriendItem();
  UserFriendList::default_instance_ = new UserFriendList();
  UserFriendVerItem::default_instance_ = new UserFriendVerItem();
  UserSession::default_instance_ = new UserSession();
  UserRecentContractoritem::default_instance_ = new UserRecentContractoritem();
  UserRecentChatList::default_instance_ = new UserRecentChatList();
  GroupListItem::default_instance_ = new GroupListItem();
  UserGroupList::default_instance_ = new UserGroupList();
  GroupMemberItem::default_instance_ = new GroupMemberItem();
  GroupMemberList::default_instance_ = new GroupMemberList();
  OrgGroupMemberItem::default_instance_ = new OrgGroupMemberItem();
  OrgGroupMemberList::default_instance_ = new OrgGroupMemberList();
  OrgNode::default_instance_ = new OrgNode();
  OrgTree::default_instance_ = new OrgTree();
  CompanyUserList::default_instance_ = new CompanyUserList();
  CompanyInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  GlobalSesssion::default_instance_->InitAsDefaultInstance();
  ConnSessionItem::default_instance_->InitAsDefaultInstance();
  UserStat::default_instance_->InitAsDefaultInstance();
  UserFriendItem::default_instance_->InitAsDefaultInstance();
  UserFriendList::default_instance_->InitAsDefaultInstance();
  UserFriendVerItem::default_instance_->InitAsDefaultInstance();
  UserSession::default_instance_->InitAsDefaultInstance();
  UserRecentContractoritem::default_instance_->InitAsDefaultInstance();
  UserRecentChatList::default_instance_->InitAsDefaultInstance();
  GroupListItem::default_instance_->InitAsDefaultInstance();
  UserGroupList::default_instance_->InitAsDefaultInstance();
  GroupMemberItem::default_instance_->InitAsDefaultInstance();
  GroupMemberList::default_instance_->InitAsDefaultInstance();
  OrgGroupMemberItem::default_instance_->InitAsDefaultInstance();
  OrgGroupMemberList::default_instance_->InitAsDefaultInstance();
  OrgNode::default_instance_->InitAsDefaultInstance();
  OrgTree::default_instance_->InitAsDefaultInstance();
  CompanyUserList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eRedisStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eRedisStruct_2eproto {
  StaticDescriptorInitializer_IM_2eRedisStruct_2eproto() {
    protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  }
} static_descriptor_initializer_IM_2eRedisStruct_2eproto_;
const ::google::protobuf::EnumDescriptor* GroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupType_descriptor_;
}
bool GroupType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CompanyInfo::kCompanyIdFieldNumber;
const int CompanyInfo::kCompanyNameFieldNumber;
const int CompanyInfo::kCompanyCodeFieldNumber;
const int CompanyInfo::kCompanyScaleFieldNumber;
const int CompanyInfo::kUserCountFieldNumber;
const int CompanyInfo::kActiveFieldNumber;
const int CompanyInfo::kAddressFieldNumber;
const int CompanyInfo::kCountryFieldNumber;
const int CompanyInfo::kAuthStatusFieldNumber;
const int CompanyInfo::kContractorNameFieldNumber;
const int CompanyInfo::kContractorEmailFieldNumber;
const int CompanyInfo::kContractorTelFieldNumber;
const int CompanyInfo::kContractorMobileFieldNumber;
const int CompanyInfo::kCreateTimeFieldNumber;
const int CompanyInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

CompanyInfo::CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompanyInfo)
}

void CompanyInfo::InitAsDefaultInstance() {
}

CompanyInfo::CompanyInfo(const CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CompanyInfo)
}

void CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_count_ = 0u;
  active_ = 0u;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_status_ = 0;
  contractor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractor_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractor_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractor_mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompanyInfo::~CompanyInfo() {
  // @@protoc_insertion_point(destructor:CompanyInfo)
  SharedDtor();
}

void CompanyInfo::SharedDtor() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (company_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_code_;
  }
  if (company_scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_scale_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (contractor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_name_;
  }
  if (contractor_email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_email_;
  }
  if (contractor_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_tel_;
  }
  if (contractor_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_mobile_;
  }
  if (this != default_instance_) {
  }
}

void CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompanyInfo_descriptor_;
}

const CompanyInfo& CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

CompanyInfo* CompanyInfo::default_instance_ = NULL;

CompanyInfo* CompanyInfo::New() const {
  return new CompanyInfo;
}

void CompanyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CompanyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(company_id_, user_count_);
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_name_->clear();
      }
    }
    if (has_company_code()) {
      if (company_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_code_->clear();
      }
    }
    if (has_company_scale()) {
      if (company_scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_scale_->clear();
      }
    }
    active_ = 0u;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(create_time_, update_time_);
    auth_status_ = 0;
    if (has_contractor_name()) {
      if (contractor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractor_name_->clear();
      }
    }
    if (has_contractor_email()) {
      if (contractor_email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractor_email_->clear();
      }
    }
    if (has_contractor_tel()) {
      if (contractor_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractor_tel_->clear();
      }
    }
    if (has_contractor_mobile()) {
      if (contractor_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractor_mobile_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_company_name;
        break;
      }

      // required string company_name = 2;
      case 2: {
        if (tag == 18) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_name().data(), this->company_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "company_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_company_code;
        break;
      }

      // required string company_code = 3;
      case 3: {
        if (tag == 26) {
         parse_company_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_code().data(), this->company_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "company_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_company_scale;
        break;
      }

      // required string company_scale = 4;
      case 4: {
        if (tag == 34) {
         parse_company_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_scale().data(), this->company_scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "company_scale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_count;
        break;
      }

      // required uint32 user_count = 5;
      case 5: {
        if (tag == 40) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_active;
        break;
      }

      // required uint32 active = 6;
      case 6: {
        if (tag == 48) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_address;
        break;
      }

      // required string address = 7;
      case 7: {
        if (tag == 58) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_country;
        break;
      }

      // required string country = 8;
      case 8: {
        if (tag == 66) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_auth_status;
        break;
      }

      // required int32 auth_status = 9;
      case 9: {
        if (tag == 72) {
         parse_auth_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_status_)));
          set_has_auth_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_contractor_name;
        break;
      }

      // required string contractor_name = 10;
      case 10: {
        if (tag == 82) {
         parse_contractor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractor_name().data(), this->contractor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractor_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_contractor_email;
        break;
      }

      // required string contractor_email = 11;
      case 11: {
        if (tag == 90) {
         parse_contractor_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractor_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractor_email().data(), this->contractor_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractor_email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_contractor_tel;
        break;
      }

      // required string contractor_tel = 12;
      case 12: {
        if (tag == 98) {
         parse_contractor_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractor_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractor_tel().data(), this->contractor_tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractor_tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_contractor_mobile;
        break;
      }

      // required string contractor_mobile = 13;
      case 13: {
        if (tag == 106) {
         parse_contractor_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractor_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractor_mobile().data(), this->contractor_mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractor_mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 14;
      case 14: {
        if (tag == 112) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 15;
      case 15: {
        if (tag == 120) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CompanyInfo)
  return false;
#undef DO_
}

void CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CompanyInfo)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), this->company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->company_name(), output);
  }

  // required string company_code = 3;
  if (has_company_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_code().data(), this->company_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->company_code(), output);
  }

  // required string company_scale = 4;
  if (has_company_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_scale().data(), this->company_scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_scale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->company_scale(), output);
  }

  // required uint32 user_count = 5;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_count(), output);
  }

  // required uint32 active = 6;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->active(), output);
  }

  // required string address = 7;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address(), output);
  }

  // required string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // required int32 auth_status = 9;
  if (has_auth_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->auth_status(), output);
  }

  // required string contractor_name = 10;
  if (has_contractor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_name().data(), this->contractor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->contractor_name(), output);
  }

  // required string contractor_email = 11;
  if (has_contractor_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_email().data(), this->contractor_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->contractor_email(), output);
  }

  // required string contractor_tel = 12;
  if (has_contractor_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_tel().data(), this->contractor_tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->contractor_tel(), output);
  }

  // required string contractor_mobile = 13;
  if (has_contractor_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_mobile().data(), this->contractor_mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->contractor_mobile(), output);
  }

  // required uint32 create_time = 14;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->create_time(), output);
  }

  // required uint32 update_time = 15;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CompanyInfo)
}

::google::protobuf::uint8* CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompanyInfo)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), this->company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->company_name(), target);
  }

  // required string company_code = 3;
  if (has_company_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_code().data(), this->company_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->company_code(), target);
  }

  // required string company_scale = 4;
  if (has_company_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_scale().data(), this->company_scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "company_scale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->company_scale(), target);
  }

  // required uint32 user_count = 5;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->user_count(), target);
  }

  // required uint32 active = 6;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->active(), target);
  }

  // required string address = 7;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->address(), target);
  }

  // required string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // required int32 auth_status = 9;
  if (has_auth_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->auth_status(), target);
  }

  // required string contractor_name = 10;
  if (has_contractor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_name().data(), this->contractor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contractor_name(), target);
  }

  // required string contractor_email = 11;
  if (has_contractor_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_email().data(), this->contractor_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->contractor_email(), target);
  }

  // required string contractor_tel = 12;
  if (has_contractor_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_tel().data(), this->contractor_tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->contractor_tel(), target);
  }

  // required string contractor_mobile = 13;
  if (has_contractor_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractor_mobile().data(), this->contractor_mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractor_mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->contractor_mobile(), target);
  }

  // required uint32 create_time = 14;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->create_time(), target);
  }

  // required uint32 update_time = 15;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompanyInfo)
  return target;
}

int CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required string company_name = 2;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // required string company_code = 3;
    if (has_company_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_code());
    }

    // required string company_scale = 4;
    if (has_company_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_scale());
    }

    // required uint32 user_count = 5;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_count());
    }

    // required uint32 active = 6;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active());
    }

    // required string address = 7;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required string country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 auth_status = 9;
    if (has_auth_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auth_status());
    }

    // required string contractor_name = 10;
    if (has_contractor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractor_name());
    }

    // required string contractor_email = 11;
    if (has_contractor_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractor_email());
    }

    // required string contractor_tel = 12;
    if (has_contractor_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractor_tel());
    }

    // required string contractor_mobile = 13;
    if (has_contractor_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractor_mobile());
    }

    // required uint32 create_time = 14;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 update_time = 15;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompanyInfo::MergeFrom(const CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_company_code()) {
      set_company_code(from.company_code());
    }
    if (from.has_company_scale()) {
      set_company_scale(from.company_scale());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auth_status()) {
      set_auth_status(from.auth_status());
    }
    if (from.has_contractor_name()) {
      set_contractor_name(from.contractor_name());
    }
    if (from.has_contractor_email()) {
      set_contractor_email(from.contractor_email());
    }
    if (from.has_contractor_tel()) {
      set_contractor_tel(from.contractor_tel());
    }
    if (from.has_contractor_mobile()) {
      set_contractor_mobile(from.contractor_mobile());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompanyInfo::CopyFrom(const CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void CompanyInfo::Swap(CompanyInfo* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(company_name_, other->company_name_);
    std::swap(company_code_, other->company_code_);
    std::swap(company_scale_, other->company_scale_);
    std::swap(user_count_, other->user_count_);
    std::swap(active_, other->active_);
    std::swap(address_, other->address_);
    std::swap(country_, other->country_);
    std::swap(auth_status_, other->auth_status_);
    std::swap(contractor_name_, other->contractor_name_);
    std::swap(contractor_email_, other->contractor_email_);
    std::swap(contractor_tel_, other->contractor_tel_);
    std::swap(contractor_mobile_, other->contractor_mobile_);
    std::swap(create_time_, other->create_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompanyInfo_descriptor_;
  metadata.reflection = CompanyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kCompanyIdFieldNumber;
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kUserGenderFieldNumber;
const int UserInfo::kUserNickNameFieldNumber;
const int UserInfo::kAvatarUrlFieldNumber;
const int UserInfo::kAvatarUpdateTimeFieldNumber;
const int UserInfo::kEmailFieldNumber;
const int UserInfo::kUserRealNameFieldNumber;
const int UserInfo::kUserMobileFieldNumber;
const int UserInfo::kUserTelFieldNumber;
const int UserInfo::kUserEnglishNameFieldNumber;
const int UserInfo::kStatusFieldNumber;
const int UserInfo::kUserBorndateFieldNumber;
const int UserInfo::kUpdateTimeFieldNumber;
const int UserInfo::kWorkIdFieldNumber;
const int UserInfo::kPosJsonFieldNumber;
const int UserInfo::kSignInfoFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  user_gender_ = 0u;
  user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_update_time_ = GOOGLE_ULONGLONG(0);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_english_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  user_borndate_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  work_id_ = 0u;
  pos_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nick_name_;
  }
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (user_real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_real_name_;
  }
  if (user_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_mobile_;
  }
  if (user_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_tel_;
  }
  if (user_english_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_english_name_;
  }
  if (pos_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pos_json_;
  }
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(company_id_, user_id_);
    user_gender_ = 0u;
    if (has_user_nick_name()) {
      if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nick_name_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    avatar_update_time_ = GOOGLE_ULONGLONG(0);
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_user_real_name()) {
      if (user_real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_real_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(update_time_, work_id_);
    if (has_user_mobile()) {
      if (user_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_mobile_->clear();
      }
    }
    if (has_user_tel()) {
      if (user_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_tel_->clear();
      }
    }
    if (has_user_english_name()) {
      if (user_english_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_english_name_->clear();
      }
    }
    status_ = 0u;
    if (has_pos_json()) {
      if (pos_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pos_json_->clear();
      }
    }
  }
  if (has_sign_info()) {
    if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sign_info_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_gender;
        break;
      }

      // required uint32 user_gender = 3;
      case 3: {
        if (tag == 24) {
         parse_user_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_gender_)));
          set_has_user_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_nick_name;
        break;
      }

      // required string user_nick_name = 4;
      case 4: {
        if (tag == 34) {
         parse_user_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_nick_name().data(), this->user_nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_avatar_update_time;
        break;
      }

      // required uint64 avatar_update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_avatar_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_update_time_)));
          set_has_avatar_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // required string email = 7;
      case 7: {
        if (tag == 58) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user_real_name;
        break;
      }

      // required string user_real_name = 8;
      case 8: {
        if (tag == 66) {
         parse_user_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_real_name().data(), this->user_real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_real_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_mobile;
        break;
      }

      // required string user_mobile = 9;
      case 9: {
        if (tag == 74) {
         parse_user_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_mobile().data(), this->user_mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_user_tel;
        break;
      }

      // required string user_tel = 10;
      case 10: {
        if (tag == 82) {
         parse_user_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_tel().data(), this->user_tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_user_english_name;
        break;
      }

      // required string user_english_name = 11;
      case 11: {
        if (tag == 90) {
         parse_user_english_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_english_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_english_name().data(), this->user_english_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_english_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }

      // required uint32 status = 12;
      case 12: {
        if (tag == 96) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_user_borndate;
        break;
      }

      // required uint32 user_borndate = 13;
      case 13: {
        if (tag == 104) {
         parse_user_borndate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_borndate_)));
          set_has_user_borndate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 14;
      case 14: {
        if (tag == 112) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_work_id;
        break;
      }

      // required uint32 work_id = 15;
      case 15: {
        if (tag == 120) {
         parse_work_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &work_id_)));
          set_has_work_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_pos_json;
        break;
      }

      // required string pos_json = 16;
      case 16: {
        if (tag == 130) {
         parse_pos_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pos_json().data(), this->pos_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pos_json");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_sign_info;
        break;
      }

      // optional string sign_info = 17;
      case 17: {
        if (tag == 138) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign_info().data(), this->sign_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserInfo)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 user_gender = 3;
  if (has_user_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_gender(), output);
  }

  // required string user_nick_name = 4;
  if (has_user_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick_name().data(), this->user_nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_nick_name(), output);
  }

  // required string avatar_url = 5;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar_url(), output);
  }

  // required uint64 avatar_update_time = 6;
  if (has_avatar_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->avatar_update_time(), output);
  }

  // required string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->email(), output);
  }

  // required string user_real_name = 8;
  if (has_user_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_real_name().data(), this->user_real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_real_name(), output);
  }

  // required string user_mobile = 9;
  if (has_user_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_mobile().data(), this->user_mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->user_mobile(), output);
  }

  // required string user_tel = 10;
  if (has_user_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_tel().data(), this->user_tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->user_tel(), output);
  }

  // required string user_english_name = 11;
  if (has_user_english_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_english_name().data(), this->user_english_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_english_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->user_english_name(), output);
  }

  // required uint32 status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->status(), output);
  }

  // required uint32 user_borndate = 13;
  if (has_user_borndate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->user_borndate(), output);
  }

  // required uint64 update_time = 14;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->update_time(), output);
  }

  // required uint32 work_id = 15;
  if (has_work_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->work_id(), output);
  }

  // required string pos_json = 16;
  if (has_pos_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos_json().data(), this->pos_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pos_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->pos_json(), output);
  }

  // optional string sign_info = 17;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign_info().data(), this->sign_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->sign_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfo)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 user_gender = 3;
  if (has_user_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_gender(), target);
  }

  // required string user_nick_name = 4;
  if (has_user_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_nick_name().data(), this->user_nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_nick_name(), target);
  }

  // required string avatar_url = 5;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar_url(), target);
  }

  // required uint64 avatar_update_time = 6;
  if (has_avatar_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->avatar_update_time(), target);
  }

  // required string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // required string user_real_name = 8;
  if (has_user_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_real_name().data(), this->user_real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->user_real_name(), target);
  }

  // required string user_mobile = 9;
  if (has_user_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_mobile().data(), this->user_mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->user_mobile(), target);
  }

  // required string user_tel = 10;
  if (has_user_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_tel().data(), this->user_tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->user_tel(), target);
  }

  // required string user_english_name = 11;
  if (has_user_english_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_english_name().data(), this->user_english_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_english_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->user_english_name(), target);
  }

  // required uint32 status = 12;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->status(), target);
  }

  // required uint32 user_borndate = 13;
  if (has_user_borndate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->user_borndate(), target);
  }

  // required uint64 update_time = 14;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->update_time(), target);
  }

  // required uint32 work_id = 15;
  if (has_work_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->work_id(), target);
  }

  // required string pos_json = 16;
  if (has_pos_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos_json().data(), this->pos_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pos_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->pos_json(), target);
  }

  // optional string sign_info = 17;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign_info().data(), this->sign_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->sign_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 user_gender = 3;
    if (has_user_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_gender());
    }

    // required string user_nick_name = 4;
    if (has_user_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick_name());
    }

    // required string avatar_url = 5;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required uint64 avatar_update_time = 6;
    if (has_avatar_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->avatar_update_time());
    }

    // required string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string user_real_name = 8;
    if (has_user_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_real_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string user_mobile = 9;
    if (has_user_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_mobile());
    }

    // required string user_tel = 10;
    if (has_user_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_tel());
    }

    // required string user_english_name = 11;
    if (has_user_english_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_english_name());
    }

    // required uint32 status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 user_borndate = 13;
    if (has_user_borndate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_borndate());
    }

    // required uint64 update_time = 14;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 work_id = 15;
    if (has_work_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->work_id());
    }

    // required string pos_json = 16;
    if (has_pos_json()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos_json());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string sign_info = 17;
    if (has_sign_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_gender()) {
      set_user_gender(from.user_gender());
    }
    if (from.has_user_nick_name()) {
      set_user_nick_name(from.user_nick_name());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_avatar_update_time()) {
      set_avatar_update_time(from.avatar_update_time());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_user_real_name()) {
      set_user_real_name(from.user_real_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_mobile()) {
      set_user_mobile(from.user_mobile());
    }
    if (from.has_user_tel()) {
      set_user_tel(from.user_tel());
    }
    if (from.has_user_english_name()) {
      set_user_english_name(from.user_english_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_user_borndate()) {
      set_user_borndate(from.user_borndate());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_work_id()) {
      set_work_id(from.work_id());
    }
    if (from.has_pos_json()) {
      set_pos_json(from.pos_json());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_gender_, other->user_gender_);
    std::swap(user_nick_name_, other->user_nick_name_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(avatar_update_time_, other->avatar_update_time_);
    std::swap(email_, other->email_);
    std::swap(user_real_name_, other->user_real_name_);
    std::swap(user_mobile_, other->user_mobile_);
    std::swap(user_tel_, other->user_tel_);
    std::swap(user_english_name_, other->user_english_name_);
    std::swap(status_, other->status_);
    std::swap(user_borndate_, other->user_borndate_);
    std::swap(update_time_, other->update_time_);
    std::swap(work_id_, other->work_id_);
    std::swap(pos_json_, other->pos_json_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalSesssion::kCompanyIdFieldNumber;
const int GlobalSesssion::kUserIdFieldNumber;
const int GlobalSesssion::kConnsvrIdFieldNumber;
const int GlobalSesssion::kConnsocketIndexFieldNumber;
const int GlobalSesssion::kDeviceTypeFieldNumber;
const int GlobalSesssion::kDeviceStatFieldNumber;
const int GlobalSesssion::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GlobalSesssion::GlobalSesssion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GlobalSesssion)
}

void GlobalSesssion::InitAsDefaultInstance() {
}

GlobalSesssion::GlobalSesssion(const GlobalSesssion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GlobalSesssion)
}

void GlobalSesssion::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  connsvr_id_ = 0u;
  connsocket_index_ = 0u;
  device_type_ = 0u;
  device_stat_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalSesssion::~GlobalSesssion() {
  // @@protoc_insertion_point(destructor:GlobalSesssion)
  SharedDtor();
}

void GlobalSesssion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalSesssion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalSesssion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSesssion_descriptor_;
}

const GlobalSesssion& GlobalSesssion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

GlobalSesssion* GlobalSesssion::default_instance_ = NULL;

GlobalSesssion* GlobalSesssion::New() const {
  return new GlobalSesssion;
}

void GlobalSesssion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GlobalSesssion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, update_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalSesssion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GlobalSesssion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connsvr_id;
        break;
      }

      // required uint32 connsvr_id = 3;
      case 3: {
        if (tag == 24) {
         parse_connsvr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connsvr_id_)));
          set_has_connsvr_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_connsocket_index;
        break;
      }

      // required uint32 connsocket_index = 4;
      case 4: {
        if (tag == 32) {
         parse_connsocket_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connsocket_index_)));
          set_has_connsocket_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_device_type;
        break;
      }

      // required uint32 device_type = 5;
      case 5: {
        if (tag == 40) {
         parse_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_device_stat;
        break;
      }

      // required uint32 device_stat = 6;
      case 6: {
        if (tag == 48) {
         parse_device_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_stat_)));
          set_has_device_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 7;
      case 7: {
        if (tag == 56) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GlobalSesssion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GlobalSesssion)
  return false;
#undef DO_
}

void GlobalSesssion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GlobalSesssion)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 connsvr_id = 3;
  if (has_connsvr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connsvr_id(), output);
  }

  // required uint32 connsocket_index = 4;
  if (has_connsocket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->connsocket_index(), output);
  }

  // required uint32 device_type = 5;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->device_type(), output);
  }

  // required uint32 device_stat = 6;
  if (has_device_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->device_stat(), output);
  }

  // required uint32 update_time = 7;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GlobalSesssion)
}

::google::protobuf::uint8* GlobalSesssion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlobalSesssion)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 connsvr_id = 3;
  if (has_connsvr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connsvr_id(), target);
  }

  // required uint32 connsocket_index = 4;
  if (has_connsocket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->connsocket_index(), target);
  }

  // required uint32 device_type = 5;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->device_type(), target);
  }

  // required uint32 device_stat = 6;
  if (has_device_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->device_stat(), target);
  }

  // required uint32 update_time = 7;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlobalSesssion)
  return target;
}

int GlobalSesssion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 connsvr_id = 3;
    if (has_connsvr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connsvr_id());
    }

    // required uint32 connsocket_index = 4;
    if (has_connsocket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connsocket_index());
    }

    // required uint32 device_type = 5;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_type());
    }

    // required uint32 device_stat = 6;
    if (has_device_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_stat());
    }

    // required uint32 update_time = 7;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalSesssion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalSesssion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalSesssion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalSesssion::MergeFrom(const GlobalSesssion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_connsvr_id()) {
      set_connsvr_id(from.connsvr_id());
    }
    if (from.has_connsocket_index()) {
      set_connsocket_index(from.connsocket_index());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_device_stat()) {
      set_device_stat(from.device_stat());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalSesssion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalSesssion::CopyFrom(const GlobalSesssion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSesssion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GlobalSesssion::Swap(GlobalSesssion* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(connsvr_id_, other->connsvr_id_);
    std::swap(connsocket_index_, other->connsocket_index_);
    std::swap(device_type_, other->device_type_);
    std::swap(device_stat_, other->device_stat_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalSesssion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalSesssion_descriptor_;
  metadata.reflection = GlobalSesssion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnSessionItem::kSessionIdFieldNumber;
const int ConnSessionItem::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

ConnSessionItem::ConnSessionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnSessionItem)
}

void ConnSessionItem::InitAsDefaultInstance() {
}

ConnSessionItem::ConnSessionItem(const ConnSessionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnSessionItem)
}

void ConnSessionItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnSessionItem::~ConnSessionItem() {
  // @@protoc_insertion_point(destructor:ConnSessionItem)
  SharedDtor();
}

void ConnSessionItem::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void ConnSessionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnSessionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnSessionItem_descriptor_;
}

const ConnSessionItem& ConnSessionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

ConnSessionItem* ConnSessionItem::default_instance_ = NULL;

ConnSessionItem* ConnSessionItem::New() const {
  return new ConnSessionItem;
}

void ConnSessionItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    update_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnSessionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnSessionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnSessionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnSessionItem)
  return false;
#undef DO_
}

void ConnSessionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnSessionItem)
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // required uint32 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnSessionItem)
}

::google::protobuf::uint8* ConnSessionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnSessionItem)
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // required uint32 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnSessionItem)
  return target;
}

int ConnSessionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required uint32 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnSessionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnSessionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnSessionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnSessionItem::MergeFrom(const ConnSessionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnSessionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnSessionItem::CopyFrom(const ConnSessionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnSessionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnSessionItem::Swap(ConnSessionItem* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnSessionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnSessionItem_descriptor_;
  metadata.reflection = ConnSessionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStat::kUpdateTimeFieldNumber;
const int UserStat::kOnlineDeviceFieldNumber;
const int UserStat::kPcSessionIdFieldNumber;
const int UserStat::kAndroidSessionIdFieldNumber;
const int UserStat::kIosSessionIdFieldNumber;
const int UserStat::kMacSessionIdFieldNumber;
#endif  // !_MSC_VER

UserStat::UserStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserStat)
}

void UserStat::InitAsDefaultInstance() {
}

UserStat::UserStat(const UserStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserStat)
}

void UserStat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  update_time_ = 0u;
  online_device_ = 0u;
  pc_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  android_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ios_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStat::~UserStat() {
  // @@protoc_insertion_point(destructor:UserStat)
  SharedDtor();
}

void UserStat::SharedDtor() {
  if (pc_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pc_session_id_;
  }
  if (android_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete android_session_id_;
  }
  if (ios_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ios_session_id_;
  }
  if (mac_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_session_id_;
  }
  if (this != default_instance_) {
  }
}

void UserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStat_descriptor_;
}

const UserStat& UserStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserStat* UserStat::default_instance_ = NULL;

UserStat* UserStat::New() const {
  return new UserStat;
}

void UserStat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserStat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(update_time_, online_device_);
    if (has_pc_session_id()) {
      if (pc_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pc_session_id_->clear();
      }
    }
    if (has_android_session_id()) {
      if (android_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        android_session_id_->clear();
      }
    }
    if (has_ios_session_id()) {
      if (ios_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ios_session_id_->clear();
      }
    }
    if (has_mac_session_id()) {
      if (mac_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_session_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_device;
        break;
      }

      // required uint32 online_device = 2;
      case 2: {
        if (tag == 16) {
         parse_online_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_device_)));
          set_has_online_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pc_session_id;
        break;
      }

      // optional string pc_session_id = 3;
      case 3: {
        if (tag == 26) {
         parse_pc_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pc_session_id().data(), this->pc_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pc_session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_android_session_id;
        break;
      }

      // optional string android_session_id = 4;
      case 4: {
        if (tag == 34) {
         parse_android_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_android_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->android_session_id().data(), this->android_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "android_session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ios_session_id;
        break;
      }

      // optional string ios_session_id = 5;
      case 5: {
        if (tag == 42) {
         parse_ios_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ios_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ios_session_id().data(), this->ios_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ios_session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mac_session_id;
        break;
      }

      // optional string mac_session_id = 6;
      case 6: {
        if (tag == 50) {
         parse_mac_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac_session_id().data(), this->mac_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac_session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserStat)
  return false;
#undef DO_
}

void UserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserStat)
  // required uint32 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_time(), output);
  }

  // required uint32 online_device = 2;
  if (has_online_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online_device(), output);
  }

  // optional string pc_session_id = 3;
  if (has_pc_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pc_session_id().data(), this->pc_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pc_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pc_session_id(), output);
  }

  // optional string android_session_id = 4;
  if (has_android_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_session_id().data(), this->android_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->android_session_id(), output);
  }

  // optional string ios_session_id = 5;
  if (has_ios_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ios_session_id().data(), this->ios_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ios_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ios_session_id(), output);
  }

  // optional string mac_session_id = 6;
  if (has_mac_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_session_id().data(), this->mac_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mac_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserStat)
}

::google::protobuf::uint8* UserStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserStat)
  // required uint32 update_time = 1;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_time(), target);
  }

  // required uint32 online_device = 2;
  if (has_online_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online_device(), target);
  }

  // optional string pc_session_id = 3;
  if (has_pc_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pc_session_id().data(), this->pc_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pc_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pc_session_id(), target);
  }

  // optional string android_session_id = 4;
  if (has_android_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_session_id().data(), this->android_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->android_session_id(), target);
  }

  // optional string ios_session_id = 5;
  if (has_ios_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ios_session_id().data(), this->ios_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ios_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ios_session_id(), target);
  }

  // optional string mac_session_id = 6;
  if (has_mac_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_session_id().data(), this->mac_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mac_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserStat)
  return target;
}

int UserStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 online_device = 2;
    if (has_online_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_device());
    }

    // optional string pc_session_id = 3;
    if (has_pc_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pc_session_id());
    }

    // optional string android_session_id = 4;
    if (has_android_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->android_session_id());
    }

    // optional string ios_session_id = 5;
    if (has_ios_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ios_session_id());
    }

    // optional string mac_session_id = 6;
    if (has_mac_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStat::MergeFrom(const UserStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_online_device()) {
      set_online_device(from.online_device());
    }
    if (from.has_pc_session_id()) {
      set_pc_session_id(from.pc_session_id());
    }
    if (from.has_android_session_id()) {
      set_android_session_id(from.android_session_id());
    }
    if (from.has_ios_session_id()) {
      set_ios_session_id(from.ios_session_id());
    }
    if (from.has_mac_session_id()) {
      set_mac_session_id(from.mac_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStat::CopyFrom(const UserStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserStat::Swap(UserStat* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(online_device_, other->online_device_);
    std::swap(pc_session_id_, other->pc_session_id_);
    std::swap(android_session_id_, other->android_session_id_);
    std::swap(ios_session_id_, other->ios_session_id_);
    std::swap(mac_session_id_, other->mac_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStat_descriptor_;
  metadata.reflection = UserStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserFriendItem::kCompanyIdFieldNumber;
const int UserFriendItem::kUserIdFieldNumber;
const int UserFriendItem::kIsFixtopFieldNumber;
const int UserFriendItem::kFixOrderFieldNumber;
const int UserFriendItem::kRemarkFieldNumber;
const int UserFriendItem::kUpdateTimeFieldNumber;
const int UserFriendItem::kIsDeleteFieldNumber;
#endif  // !_MSC_VER

UserFriendItem::UserFriendItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserFriendItem)
}

void UserFriendItem::InitAsDefaultInstance() {
}

UserFriendItem::UserFriendItem(const UserFriendItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserFriendItem)
}

void UserFriendItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  is_fixtop_ = 0u;
  fix_order_ = 0u;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = GOOGLE_ULONGLONG(0);
  is_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserFriendItem::~UserFriendItem() {
  // @@protoc_insertion_point(destructor:UserFriendItem)
  SharedDtor();
}

void UserFriendItem::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UserFriendItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserFriendItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserFriendItem_descriptor_;
}

const UserFriendItem& UserFriendItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserFriendItem* UserFriendItem::default_instance_ = NULL;

UserFriendItem* UserFriendItem::New() const {
  return new UserFriendItem;
}

void UserFriendItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserFriendItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, fix_order_);
    ZR_(update_time_, is_delete_);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserFriendItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserFriendItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_fixtop;
        break;
      }

      // required uint32 is_fixtop = 3;
      case 3: {
        if (tag == 24) {
         parse_is_fixtop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_fixtop_)));
          set_has_is_fixtop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fix_order;
        break;
      }

      // required uint32 fix_order = 4;
      case 4: {
        if (tag == 32) {
         parse_fix_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_order_)));
          set_has_fix_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remark;
        break;
      }

      // required string remark = 6;
      case 6: {
        if (tag == 50) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 7;
      case 7: {
        if (tag == 56) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_delete;
        break;
      }

      // required bool is_delete = 8;
      case 8: {
        if (tag == 64) {
         parse_is_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delete_)));
          set_has_is_delete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserFriendItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserFriendItem)
  return false;
#undef DO_
}

void UserFriendItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserFriendItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 is_fixtop = 3;
  if (has_is_fixtop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_fixtop(), output);
  }

  // required uint32 fix_order = 4;
  if (has_fix_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fix_order(), output);
  }

  // required string remark = 6;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remark(), output);
  }

  // required uint64 update_time = 7;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->update_time(), output);
  }

  // required bool is_delete = 8;
  if (has_is_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_delete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserFriendItem)
}

::google::protobuf::uint8* UserFriendItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserFriendItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 is_fixtop = 3;
  if (has_is_fixtop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_fixtop(), target);
  }

  // required uint32 fix_order = 4;
  if (has_fix_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fix_order(), target);
  }

  // required string remark = 6;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->remark(), target);
  }

  // required uint64 update_time = 7;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->update_time(), target);
  }

  // required bool is_delete = 8;
  if (has_is_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_delete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserFriendItem)
  return target;
}

int UserFriendItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 is_fixtop = 3;
    if (has_is_fixtop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_fixtop());
    }

    // required uint32 fix_order = 4;
    if (has_fix_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fix_order());
    }

    // required string remark = 6;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // required uint64 update_time = 7;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required bool is_delete = 8;
    if (has_is_delete()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFriendItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserFriendItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserFriendItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserFriendItem::MergeFrom(const UserFriendItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_is_fixtop()) {
      set_is_fixtop(from.is_fixtop());
    }
    if (from.has_fix_order()) {
      set_fix_order(from.fix_order());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_delete()) {
      set_is_delete(from.is_delete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserFriendItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFriendItem::CopyFrom(const UserFriendItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFriendItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UserFriendItem::Swap(UserFriendItem* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(is_fixtop_, other->is_fixtop_);
    std::swap(fix_order_, other->fix_order_);
    std::swap(remark_, other->remark_);
    std::swap(update_time_, other->update_time_);
    std::swap(is_delete_, other->is_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserFriendItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserFriendItem_descriptor_;
  metadata.reflection = UserFriendItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserFriendList::kFriendListFieldNumber;
#endif  // !_MSC_VER

UserFriendList::UserFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserFriendList)
}

void UserFriendList::InitAsDefaultInstance() {
}

UserFriendList::UserFriendList(const UserFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserFriendList)
}

void UserFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserFriendList::~UserFriendList() {
  // @@protoc_insertion_point(destructor:UserFriendList)
  SharedDtor();
}

void UserFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserFriendList_descriptor_;
}

const UserFriendList& UserFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserFriendList* UserFriendList::default_instance_ = NULL;

UserFriendList* UserFriendList::New() const {
  return new UserFriendList;
}

void UserFriendList::Clear() {
  friend_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserFriendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserFriendItem friend_list = 1;
      case 1: {
        if (tag == 10) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_friend_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserFriendList)
  return false;
#undef DO_
}

void UserFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserFriendList)
  // repeated .UserFriendItem friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserFriendList)
}

::google::protobuf::uint8* UserFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserFriendList)
  // repeated .UserFriendItem friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserFriendList)
  return target;
}

int UserFriendList::ByteSize() const {
  int total_size = 0;

  // repeated .UserFriendItem friend_list = 1;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserFriendList::MergeFrom(const UserFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_list_.MergeFrom(from.friend_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFriendList::CopyFrom(const UserFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFriendList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->friend_list())) return false;
  return true;
}

void UserFriendList::Swap(UserFriendList* other) {
  if (other != this) {
    friend_list_.Swap(&other->friend_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserFriendList_descriptor_;
  metadata.reflection = UserFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserFriendVerItem::kCompanyIdFieldNumber;
const int UserFriendVerItem::kUserIdFieldNumber;
const int UserFriendVerItem::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

UserFriendVerItem::UserFriendVerItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserFriendVerItem)
}

void UserFriendVerItem::InitAsDefaultInstance() {
}

UserFriendVerItem::UserFriendVerItem(const UserFriendVerItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserFriendVerItem)
}

void UserFriendVerItem::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserFriendVerItem::~UserFriendVerItem() {
  // @@protoc_insertion_point(destructor:UserFriendVerItem)
  SharedDtor();
}

void UserFriendVerItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserFriendVerItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserFriendVerItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserFriendVerItem_descriptor_;
}

const UserFriendVerItem& UserFriendVerItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserFriendVerItem* UserFriendVerItem::default_instance_ = NULL;

UserFriendVerItem* UserFriendVerItem::New() const {
  return new UserFriendVerItem;
}

void UserFriendVerItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserFriendVerItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, update_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserFriendVerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserFriendVerItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserFriendVerItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserFriendVerItem)
  return false;
#undef DO_
}

void UserFriendVerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserFriendVerItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserFriendVerItem)
}

::google::protobuf::uint8* UserFriendVerItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserFriendVerItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserFriendVerItem)
  return target;
}

int UserFriendVerItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFriendVerItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserFriendVerItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserFriendVerItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserFriendVerItem::MergeFrom(const UserFriendVerItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserFriendVerItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFriendVerItem::CopyFrom(const UserFriendVerItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFriendVerItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserFriendVerItem::Swap(UserFriendVerItem* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserFriendVerItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserFriendVerItem_descriptor_;
  metadata.reflection = UserFriendVerItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSession::kCompanyIdFieldNumber;
const int UserSession::kUserIdFieldNumber;
const int UserSession::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

UserSession::UserSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserSession)
}

void UserSession::InitAsDefaultInstance() {
}

UserSession::UserSession(const UserSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserSession)
}

void UserSession::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  device_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSession::~UserSession() {
  // @@protoc_insertion_point(destructor:UserSession)
  SharedDtor();
}

void UserSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSession_descriptor_;
}

const UserSession& UserSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserSession* UserSession::default_instance_ = NULL;

UserSession* UserSession::New() const {
  return new UserSession;
}

void UserSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, device_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device_type;
        break;
      }

      // required uint32 device_type = 3;
      case 3: {
        if (tag == 24) {
         parse_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserSession)
  return false;
#undef DO_
}

void UserSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserSession)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 device_type = 3;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->device_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserSession)
}

::google::protobuf::uint8* UserSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserSession)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 device_type = 3;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->device_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserSession)
  return target;
}

int UserSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 device_type = 3;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSession::MergeFrom(const UserSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSession::CopyFrom(const UserSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserSession::Swap(UserSession* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(device_type_, other->device_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSession_descriptor_;
  metadata.reflection = UserSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRecentContractoritem::kCompanyIdFieldNumber;
const int UserRecentContractoritem::kUserIdFieldNumber;
const int UserRecentContractoritem::kFriendTypeFieldNumber;
const int UserRecentContractoritem::kIsFixtopFieldNumber;
const int UserRecentContractoritem::kFixOrderFieldNumber;
const int UserRecentContractoritem::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

UserRecentContractoritem::UserRecentContractoritem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserRecentContractoritem)
}

void UserRecentContractoritem::InitAsDefaultInstance() {
}

UserRecentContractoritem::UserRecentContractoritem(const UserRecentContractoritem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserRecentContractoritem)
}

void UserRecentContractoritem::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  friend_type_ = 0u;
  is_fixtop_ = 0u;
  fix_order_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRecentContractoritem::~UserRecentContractoritem() {
  // @@protoc_insertion_point(destructor:UserRecentContractoritem)
  SharedDtor();
}

void UserRecentContractoritem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRecentContractoritem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRecentContractoritem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRecentContractoritem_descriptor_;
}

const UserRecentContractoritem& UserRecentContractoritem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserRecentContractoritem* UserRecentContractoritem::default_instance_ = NULL;

UserRecentContractoritem* UserRecentContractoritem::New() const {
  return new UserRecentContractoritem;
}

void UserRecentContractoritem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRecentContractoritem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(company_id_, update_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRecentContractoritem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserRecentContractoritem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend_type;
        break;
      }

      // required uint32 friend_type = 3;
      case 3: {
        if (tag == 24) {
         parse_friend_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_type_)));
          set_has_friend_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_fixtop;
        break;
      }

      // required uint32 is_fixtop = 4;
      case 4: {
        if (tag == 32) {
         parse_is_fixtop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_fixtop_)));
          set_has_is_fixtop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fix_order;
        break;
      }

      // required uint32 fix_order = 5;
      case 5: {
        if (tag == 40) {
         parse_fix_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_order_)));
          set_has_fix_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserRecentContractoritem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserRecentContractoritem)
  return false;
#undef DO_
}

void UserRecentContractoritem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserRecentContractoritem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 friend_type = 3;
  if (has_friend_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friend_type(), output);
  }

  // required uint32 is_fixtop = 4;
  if (has_is_fixtop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_fixtop(), output);
  }

  // required uint32 fix_order = 5;
  if (has_fix_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fix_order(), output);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserRecentContractoritem)
}

::google::protobuf::uint8* UserRecentContractoritem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserRecentContractoritem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 friend_type = 3;
  if (has_friend_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friend_type(), target);
  }

  // required uint32 is_fixtop = 4;
  if (has_is_fixtop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_fixtop(), target);
  }

  // required uint32 fix_order = 5;
  if (has_fix_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fix_order(), target);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserRecentContractoritem)
  return target;
}

int UserRecentContractoritem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 friend_type = 3;
    if (has_friend_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_type());
    }

    // required uint32 is_fixtop = 4;
    if (has_is_fixtop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_fixtop());
    }

    // required uint32 fix_order = 5;
    if (has_fix_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fix_order());
    }

    // required uint32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRecentContractoritem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRecentContractoritem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRecentContractoritem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRecentContractoritem::MergeFrom(const UserRecentContractoritem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_type()) {
      set_friend_type(from.friend_type());
    }
    if (from.has_is_fixtop()) {
      set_is_fixtop(from.is_fixtop());
    }
    if (from.has_fix_order()) {
      set_fix_order(from.fix_order());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRecentContractoritem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRecentContractoritem::CopyFrom(const UserRecentContractoritem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRecentContractoritem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void UserRecentContractoritem::Swap(UserRecentContractoritem* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(friend_type_, other->friend_type_);
    std::swap(is_fixtop_, other->is_fixtop_);
    std::swap(fix_order_, other->fix_order_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRecentContractoritem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRecentContractoritem_descriptor_;
  metadata.reflection = UserRecentContractoritem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRecentChatList::kFriendListFieldNumber;
#endif  // !_MSC_VER

UserRecentChatList::UserRecentChatList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserRecentChatList)
}

void UserRecentChatList::InitAsDefaultInstance() {
}

UserRecentChatList::UserRecentChatList(const UserRecentChatList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserRecentChatList)
}

void UserRecentChatList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRecentChatList::~UserRecentChatList() {
  // @@protoc_insertion_point(destructor:UserRecentChatList)
  SharedDtor();
}

void UserRecentChatList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRecentChatList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRecentChatList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRecentChatList_descriptor_;
}

const UserRecentChatList& UserRecentChatList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserRecentChatList* UserRecentChatList::default_instance_ = NULL;

UserRecentChatList* UserRecentChatList::New() const {
  return new UserRecentChatList;
}

void UserRecentChatList::Clear() {
  friend_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRecentChatList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserRecentChatList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserRecentContractoritem friend_list = 1;
      case 1: {
        if (tag == 10) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_friend_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserRecentChatList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserRecentChatList)
  return false;
#undef DO_
}

void UserRecentChatList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserRecentChatList)
  // repeated .UserRecentContractoritem friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserRecentChatList)
}

::google::protobuf::uint8* UserRecentChatList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserRecentChatList)
  // repeated .UserRecentContractoritem friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserRecentChatList)
  return target;
}

int UserRecentChatList::ByteSize() const {
  int total_size = 0;

  // repeated .UserRecentContractoritem friend_list = 1;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRecentChatList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRecentChatList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRecentChatList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRecentChatList::MergeFrom(const UserRecentChatList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_list_.MergeFrom(from.friend_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRecentChatList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRecentChatList::CopyFrom(const UserRecentChatList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRecentChatList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->friend_list())) return false;
  return true;
}

void UserRecentChatList::Swap(UserRecentChatList* other) {
  if (other != this) {
    friend_list_.Swap(&other->friend_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRecentChatList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRecentChatList_descriptor_;
  metadata.reflection = UserRecentChatList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupListItem::kCompanyIdFieldNumber;
const int GroupListItem::kGroupIdFieldNumber;
const int GroupListItem::kGroupTypeFieldNumber;
const int GroupListItem::kIsFixtopFieldNumber;
const int GroupListItem::kFixOrderFieldNumber;
const int GroupListItem::kRemarkFieldNumber;
const int GroupListItem::kUpdateTimeFieldNumber;
const int GroupListItem::kIsDeleteFieldNumber;
#endif  // !_MSC_VER

GroupListItem::GroupListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupListItem)
}

void GroupListItem::InitAsDefaultInstance() {
}

GroupListItem::GroupListItem(const GroupListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GroupListItem)
}

void GroupListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  is_fixtop_ = 0u;
  fix_order_ = 0u;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = GOOGLE_ULONGLONG(0);
  is_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupListItem::~GroupListItem() {
  // @@protoc_insertion_point(destructor:GroupListItem)
  SharedDtor();
}

void GroupListItem::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void GroupListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupListItem_descriptor_;
}

const GroupListItem& GroupListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

GroupListItem* GroupListItem::default_instance_ = NULL;

GroupListItem* GroupListItem::New() const {
  return new GroupListItem;
}

void GroupListItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupListItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(company_id_, group_id_);
    ZR_(fix_order_, update_time_);
    group_type_ = 1;
    is_fixtop_ = 0u;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GroupListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::GroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_fixtop;
        break;
      }

      // required uint32 is_fixtop = 4;
      case 4: {
        if (tag == 32) {
         parse_is_fixtop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_fixtop_)));
          set_has_is_fixtop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fix_order;
        break;
      }

      // required uint32 fix_order = 5;
      case 5: {
        if (tag == 40) {
         parse_fix_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_order_)));
          set_has_fix_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_remark;
        break;
      }

      // required string remark = 7;
      case 7: {
        if (tag == 58) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 8;
      case 8: {
        if (tag == 64) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_delete;
        break;
      }

      // required bool is_delete = 9;
      case 9: {
        if (tag == 72) {
         parse_is_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delete_)));
          set_has_is_delete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupListItem)
  return false;
#undef DO_
}

void GroupListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupListItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required uint32 is_fixtop = 4;
  if (has_is_fixtop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_fixtop(), output);
  }

  // required uint32 fix_order = 5;
  if (has_fix_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fix_order(), output);
  }

  // required string remark = 7;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->remark(), output);
  }

  // required uint64 update_time = 8;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->update_time(), output);
  }

  // required bool is_delete = 9;
  if (has_is_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_delete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GroupListItem)
}

::google::protobuf::uint8* GroupListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupListItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // required .GroupType group_type = 3;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->group_type(), target);
  }

  // required uint32 is_fixtop = 4;
  if (has_is_fixtop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_fixtop(), target);
  }

  // required uint32 fix_order = 5;
  if (has_fix_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fix_order(), target);
  }

  // required string remark = 7;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->remark(), target);
  }

  // required uint64 update_time = 8;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->update_time(), target);
  }

  // required bool is_delete = 9;
  if (has_is_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_delete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupListItem)
  return target;
}

int GroupListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 is_fixtop = 4;
    if (has_is_fixtop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_fixtop());
    }

    // required uint32 fix_order = 5;
    if (has_fix_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fix_order());
    }

    // required string remark = 7;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // required uint64 update_time = 8;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required bool is_delete = 9;
    if (has_is_delete()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupListItem::MergeFrom(const GroupListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_is_fixtop()) {
      set_is_fixtop(from.is_fixtop());
    }
    if (from.has_fix_order()) {
      set_fix_order(from.fix_order());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_delete()) {
      set_is_delete(from.is_delete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListItem::CopyFrom(const GroupListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GroupListItem::Swap(GroupListItem* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(is_fixtop_, other->is_fixtop_);
    std::swap(fix_order_, other->fix_order_);
    std::swap(remark_, other->remark_);
    std::swap(update_time_, other->update_time_);
    std::swap(is_delete_, other->is_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupListItem_descriptor_;
  metadata.reflection = GroupListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGroupList::kGroupListFieldNumber;
#endif  // !_MSC_VER

UserGroupList::UserGroupList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserGroupList)
}

void UserGroupList::InitAsDefaultInstance() {
}

UserGroupList::UserGroupList(const UserGroupList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserGroupList)
}

void UserGroupList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGroupList::~UserGroupList() {
  // @@protoc_insertion_point(destructor:UserGroupList)
  SharedDtor();
}

void UserGroupList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserGroupList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGroupList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGroupList_descriptor_;
}

const UserGroupList& UserGroupList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

UserGroupList* UserGroupList::default_instance_ = NULL;

UserGroupList* UserGroupList::New() const {
  return new UserGroupList;
}

void UserGroupList::Clear() {
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserGroupList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GroupListItem group_list = 1;
      case 1: {
        if (tag == 10) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserGroupList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserGroupList)
  return false;
#undef DO_
}

void UserGroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserGroupList)
  // repeated .GroupListItem group_list = 1;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserGroupList)
}

::google::protobuf::uint8* UserGroupList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserGroupList)
  // repeated .GroupListItem group_list = 1;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserGroupList)
  return target;
}

int UserGroupList::ByteSize() const {
  int total_size = 0;

  // repeated .GroupListItem group_list = 1;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroupList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGroupList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGroupList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGroupList::MergeFrom(const UserGroupList& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGroupList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGroupList::CopyFrom(const UserGroupList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroupList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->group_list())) return false;
  return true;
}

void UserGroupList::Swap(UserGroupList* other) {
  if (other != this) {
    group_list_.Swap(&other->group_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGroupList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGroupList_descriptor_;
  metadata.reflection = UserGroupList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMemberItem::kCompanyIdFieldNumber;
const int GroupMemberItem::kMemberIdFieldNumber;
const int GroupMemberItem::kMemberNameFieldNumber;
const int GroupMemberItem::kMemberRemarkFieldNumber;
const int GroupMemberItem::kMemberRoleFieldNumber;
const int GroupMemberItem::kUpdateTimeFieldNumber;
const int GroupMemberItem::kIsDeleteFieldNumber;
#endif  // !_MSC_VER

GroupMemberItem::GroupMemberItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupMemberItem)
}

void GroupMemberItem::InitAsDefaultInstance() {
}

GroupMemberItem::GroupMemberItem(const GroupMemberItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GroupMemberItem)
}

void GroupMemberItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  member_id_ = 0u;
  member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_role_ = 0u;
  update_time_ = 0u;
  is_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMemberItem::~GroupMemberItem() {
  // @@protoc_insertion_point(destructor:GroupMemberItem)
  SharedDtor();
}

void GroupMemberItem::SharedDtor() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (member_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_remark_;
  }
  if (this != default_instance_) {
  }
}

void GroupMemberItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMemberItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMemberItem_descriptor_;
}

const GroupMemberItem& GroupMemberItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

GroupMemberItem* GroupMemberItem::default_instance_ = NULL;

GroupMemberItem* GroupMemberItem::New() const {
  return new GroupMemberItem;
}

void GroupMemberItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupMemberItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, member_id_);
    ZR_(member_role_, is_delete_);
    if (has_member_name()) {
      if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        member_name_->clear();
      }
    }
    if (has_member_remark()) {
      if (member_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        member_remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMemberItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GroupMemberItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 2;
      case 2: {
        if (tag == 16) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member_name;
        break;
      }

      // required string member_name = 3;
      case 3: {
        if (tag == 26) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->member_name().data(), this->member_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "member_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_remark;
        break;
      }

      // required string member_remark = 4;
      case 4: {
        if (tag == 34) {
         parse_member_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->member_remark().data(), this->member_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "member_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_role;
        break;
      }

      // required uint32 member_role = 5;
      case 5: {
        if (tag == 40) {
         parse_member_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_role_)));
          set_has_member_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_delete;
        break;
      }

      // required bool is_delete = 7;
      case 7: {
        if (tag == 56) {
         parse_is_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delete_)));
          set_has_is_delete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupMemberItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupMemberItem)
  return false;
#undef DO_
}

void GroupMemberItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupMemberItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_id(), output);
  }

  // required string member_name = 3;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "member_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->member_name(), output);
  }

  // required string member_remark = 4;
  if (has_member_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member_remark().data(), this->member_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "member_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->member_remark(), output);
  }

  // required uint32 member_role = 5;
  if (has_member_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_role(), output);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_time(), output);
  }

  // required bool is_delete = 7;
  if (has_is_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_delete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GroupMemberItem)
}

::google::protobuf::uint8* GroupMemberItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupMemberItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_id(), target);
  }

  // required string member_name = 3;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "member_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->member_name(), target);
  }

  // required string member_remark = 4;
  if (has_member_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member_remark().data(), this->member_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "member_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->member_remark(), target);
  }

  // required uint32 member_role = 5;
  if (has_member_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->member_role(), target);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->update_time(), target);
  }

  // required bool is_delete = 7;
  if (has_is_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_delete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupMemberItem)
  return target;
}

int GroupMemberItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required string member_name = 3;
    if (has_member_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_name());
    }

    // required string member_remark = 4;
    if (has_member_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_remark());
    }

    // required uint32 member_role = 5;
    if (has_member_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_role());
    }

    // required uint32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required bool is_delete = 7;
    if (has_is_delete()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMemberItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMemberItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMemberItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMemberItem::MergeFrom(const GroupMemberItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_member_name()) {
      set_member_name(from.member_name());
    }
    if (from.has_member_remark()) {
      set_member_remark(from.member_remark());
    }
    if (from.has_member_role()) {
      set_member_role(from.member_role());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_delete()) {
      set_is_delete(from.is_delete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMemberItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMemberItem::CopyFrom(const GroupMemberItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GroupMemberItem::Swap(GroupMemberItem* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(member_name_, other->member_name_);
    std::swap(member_remark_, other->member_remark_);
    std::swap(member_role_, other->member_role_);
    std::swap(update_time_, other->update_time_);
    std::swap(is_delete_, other->is_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMemberItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMemberItem_descriptor_;
  metadata.reflection = GroupMemberItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMemberList::kMemberListFieldNumber;
#endif  // !_MSC_VER

GroupMemberList::GroupMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupMemberList)
}

void GroupMemberList::InitAsDefaultInstance() {
}

GroupMemberList::GroupMemberList(const GroupMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GroupMemberList)
}

void GroupMemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMemberList::~GroupMemberList() {
  // @@protoc_insertion_point(destructor:GroupMemberList)
  SharedDtor();
}

void GroupMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMemberList_descriptor_;
}

const GroupMemberList& GroupMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

GroupMemberList* GroupMemberList::default_instance_ = NULL;

GroupMemberList* GroupMemberList::New() const {
  return new GroupMemberList;
}

void GroupMemberList::Clear() {
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GroupMemberList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GroupMemberItem member_list = 1;
      case 1: {
        if (tag == 10) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupMemberList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupMemberList)
  return false;
#undef DO_
}

void GroupMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupMemberList)
  // repeated .GroupMemberItem member_list = 1;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GroupMemberList)
}

::google::protobuf::uint8* GroupMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupMemberList)
  // repeated .GroupMemberItem member_list = 1;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupMemberList)
  return target;
}

int GroupMemberList::ByteSize() const {
  int total_size = 0;

  // repeated .GroupMemberItem member_list = 1;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMemberList::MergeFrom(const GroupMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMemberList::CopyFrom(const GroupMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->member_list())) return false;
  return true;
}

void GroupMemberList::Swap(GroupMemberList* other) {
  if (other != this) {
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMemberList_descriptor_;
  metadata.reflection = GroupMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrgGroupMemberItem::kCompanyIdFieldNumber;
const int OrgGroupMemberItem::kMemberIdFieldNumber;
const int OrgGroupMemberItem::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

OrgGroupMemberItem::OrgGroupMemberItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrgGroupMemberItem)
}

void OrgGroupMemberItem::InitAsDefaultInstance() {
}

OrgGroupMemberItem::OrgGroupMemberItem(const OrgGroupMemberItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrgGroupMemberItem)
}

void OrgGroupMemberItem::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  member_id_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrgGroupMemberItem::~OrgGroupMemberItem() {
  // @@protoc_insertion_point(destructor:OrgGroupMemberItem)
  SharedDtor();
}

void OrgGroupMemberItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrgGroupMemberItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrgGroupMemberItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrgGroupMemberItem_descriptor_;
}

const OrgGroupMemberItem& OrgGroupMemberItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

OrgGroupMemberItem* OrgGroupMemberItem::default_instance_ = NULL;

OrgGroupMemberItem* OrgGroupMemberItem::New() const {
  return new OrgGroupMemberItem;
}

void OrgGroupMemberItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrgGroupMemberItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, update_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrgGroupMemberItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrgGroupMemberItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 2;
      case 2: {
        if (tag == 16) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrgGroupMemberItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrgGroupMemberItem)
  return false;
#undef DO_
}

void OrgGroupMemberItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrgGroupMemberItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_id(), output);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OrgGroupMemberItem)
}

::google::protobuf::uint8* OrgGroupMemberItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrgGroupMemberItem)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->company_id(), target);
  }

  // required uint32 member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_id(), target);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrgGroupMemberItem)
  return target;
}

int OrgGroupMemberItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrgGroupMemberItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrgGroupMemberItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrgGroupMemberItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrgGroupMemberItem::MergeFrom(const OrgGroupMemberItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrgGroupMemberItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrgGroupMemberItem::CopyFrom(const OrgGroupMemberItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrgGroupMemberItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OrgGroupMemberItem::Swap(OrgGroupMemberItem* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrgGroupMemberItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrgGroupMemberItem_descriptor_;
  metadata.reflection = OrgGroupMemberItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrgGroupMemberList::kMemberListFieldNumber;
#endif  // !_MSC_VER

OrgGroupMemberList::OrgGroupMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrgGroupMemberList)
}

void OrgGroupMemberList::InitAsDefaultInstance() {
}

OrgGroupMemberList::OrgGroupMemberList(const OrgGroupMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrgGroupMemberList)
}

void OrgGroupMemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrgGroupMemberList::~OrgGroupMemberList() {
  // @@protoc_insertion_point(destructor:OrgGroupMemberList)
  SharedDtor();
}

void OrgGroupMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrgGroupMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrgGroupMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrgGroupMemberList_descriptor_;
}

const OrgGroupMemberList& OrgGroupMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

OrgGroupMemberList* OrgGroupMemberList::default_instance_ = NULL;

OrgGroupMemberList* OrgGroupMemberList::New() const {
  return new OrgGroupMemberList;
}

void OrgGroupMemberList::Clear() {
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrgGroupMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrgGroupMemberList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OrgGroupMemberItem member_list = 1;
      case 1: {
        if (tag == 10) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrgGroupMemberList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrgGroupMemberList)
  return false;
#undef DO_
}

void OrgGroupMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrgGroupMemberList)
  // repeated .OrgGroupMemberItem member_list = 1;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OrgGroupMemberList)
}

::google::protobuf::uint8* OrgGroupMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrgGroupMemberList)
  // repeated .OrgGroupMemberItem member_list = 1;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrgGroupMemberList)
  return target;
}

int OrgGroupMemberList::ByteSize() const {
  int total_size = 0;

  // repeated .OrgGroupMemberItem member_list = 1;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrgGroupMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrgGroupMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrgGroupMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrgGroupMemberList::MergeFrom(const OrgGroupMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrgGroupMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrgGroupMemberList::CopyFrom(const OrgGroupMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrgGroupMemberList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->member_list())) return false;
  return true;
}

void OrgGroupMemberList::Swap(OrgGroupMemberList* other) {
  if (other != this) {
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrgGroupMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrgGroupMemberList_descriptor_;
  metadata.reflection = OrgGroupMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrgNode::kIdFieldNumber;
const int OrgNode::kLvalueFieldNumber;
const int OrgNode::kRvalueFieldNumber;
const int OrgNode::kTypeFieldNumber;
#endif  // !_MSC_VER

OrgNode::OrgNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrgNode)
}

void OrgNode::InitAsDefaultInstance() {
}

OrgNode::OrgNode(const OrgNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrgNode)
}

void OrgNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lvalue_ = 0u;
  rvalue_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrgNode::~OrgNode() {
  // @@protoc_insertion_point(destructor:OrgNode)
  SharedDtor();
}

void OrgNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrgNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrgNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrgNode_descriptor_;
}

const OrgNode& OrgNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

OrgNode* OrgNode::default_instance_ = NULL;

OrgNode* OrgNode::New() const {
  return new OrgNode;
}

void OrgNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrgNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrgNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrgNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lvalue;
        break;
      }

      // required uint32 lvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_lvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvalue_)));
          set_has_lvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rvalue;
        break;
      }

      // required uint32 rvalue = 3;
      case 3: {
        if (tag == 24) {
         parse_rvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rvalue_)));
          set_has_rvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrgNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrgNode)
  return false;
#undef DO_
}

void OrgNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrgNode)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 lvalue = 2;
  if (has_lvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lvalue(), output);
  }

  // required uint32 rvalue = 3;
  if (has_rvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rvalue(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OrgNode)
}

::google::protobuf::uint8* OrgNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrgNode)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 lvalue = 2;
  if (has_lvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lvalue(), target);
  }

  // required uint32 rvalue = 3;
  if (has_rvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rvalue(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrgNode)
  return target;
}

int OrgNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 lvalue = 2;
    if (has_lvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvalue());
    }

    // required uint32 rvalue = 3;
    if (has_rvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rvalue());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrgNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrgNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrgNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrgNode::MergeFrom(const OrgNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lvalue()) {
      set_lvalue(from.lvalue());
    }
    if (from.has_rvalue()) {
      set_rvalue(from.rvalue());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrgNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrgNode::CopyFrom(const OrgNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrgNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OrgNode::Swap(OrgNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lvalue_, other->lvalue_);
    std::swap(rvalue_, other->rvalue_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrgNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrgNode_descriptor_;
  metadata.reflection = OrgNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrgTree::kOrgNodeListFieldNumber;
#endif  // !_MSC_VER

OrgTree::OrgTree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrgTree)
}

void OrgTree::InitAsDefaultInstance() {
}

OrgTree::OrgTree(const OrgTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrgTree)
}

void OrgTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrgTree::~OrgTree() {
  // @@protoc_insertion_point(destructor:OrgTree)
  SharedDtor();
}

void OrgTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrgTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrgTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrgTree_descriptor_;
}

const OrgTree& OrgTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

OrgTree* OrgTree::default_instance_ = NULL;

OrgTree* OrgTree::New() const {
  return new OrgTree;
}

void OrgTree::Clear() {
  org_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrgTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrgTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OrgNode org_node_list = 1;
      case 1: {
        if (tag == 10) {
         parse_org_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_org_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_org_node_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrgTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrgTree)
  return false;
#undef DO_
}

void OrgTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrgTree)
  // repeated .OrgNode org_node_list = 1;
  for (int i = 0; i < this->org_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->org_node_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OrgTree)
}

::google::protobuf::uint8* OrgTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrgTree)
  // repeated .OrgNode org_node_list = 1;
  for (int i = 0; i < this->org_node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->org_node_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrgTree)
  return target;
}

int OrgTree::ByteSize() const {
  int total_size = 0;

  // repeated .OrgNode org_node_list = 1;
  total_size += 1 * this->org_node_list_size();
  for (int i = 0; i < this->org_node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->org_node_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrgTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrgTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrgTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrgTree::MergeFrom(const OrgTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  org_node_list_.MergeFrom(from.org_node_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrgTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrgTree::CopyFrom(const OrgTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrgTree::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->org_node_list())) return false;
  return true;
}

void OrgTree::Swap(OrgTree* other) {
  if (other != this) {
    org_node_list_.Swap(&other->org_node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrgTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrgTree_descriptor_;
  metadata.reflection = OrgTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompanyUserList::kUserIdFieldNumber;
#endif  // !_MSC_VER

CompanyUserList::CompanyUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompanyUserList)
}

void CompanyUserList::InitAsDefaultInstance() {
}

CompanyUserList::CompanyUserList(const CompanyUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CompanyUserList)
}

void CompanyUserList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompanyUserList::~CompanyUserList() {
  // @@protoc_insertion_point(destructor:CompanyUserList)
  SharedDtor();
}

void CompanyUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompanyUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompanyUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompanyUserList_descriptor_;
}

const CompanyUserList& CompanyUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  return *default_instance_;
}

CompanyUserList* CompanyUserList::default_instance_ = NULL;

CompanyUserList* CompanyUserList::New() const {
  return new CompanyUserList;
}

void CompanyUserList::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompanyUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CompanyUserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CompanyUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CompanyUserList)
  return false;
#undef DO_
}

void CompanyUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CompanyUserList)
  // repeated uint32 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CompanyUserList)
}

::google::protobuf::uint8* CompanyUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompanyUserList)
  // repeated uint32 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompanyUserList)
  return target;
}

int CompanyUserList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompanyUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompanyUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompanyUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompanyUserList::MergeFrom(const CompanyUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompanyUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompanyUserList::CopyFrom(const CompanyUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanyUserList::IsInitialized() const {

  return true;
}

void CompanyUserList::Swap(CompanyUserList* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompanyUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompanyUserList_descriptor_;
  metadata.reflection = CompanyUserList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
