// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#ifndef PROTOBUF_IM_2eLogin_2eproto__INCLUDED
#define PROTOBUF_IM_2eLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Login {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eLogin_2eproto();
void protobuf_AssignDesc_IM_2eLogin_2eproto();
void protobuf_ShutdownFile_IM_2eLogin_2eproto();

class IMMsgServReq;
class IMMsgServRes;
class IMLoginReq;
class IMLoginRes;
class IMLogoutReq;
class IMLogoutRes;
class IMKickUser;
class IMDeviceTokenReq;
class IMDeviceTokenRsp;
class IMKickOtherClientReq;
class IMKickOtherClientRsp;
class IMPushShieldReq;
class IMPushShieldRsp;
class IMQueryPushShieldReq;
class IMQueryPushShieldRsp;
class IMModifyPswdReq;
class IMModifyPswdRsp;
class IMUserStatUpdateReq;
class IMUserRoleAuthorityReq;
class IMUserRoleAuthorityRsp;

// ===================================================================

class IMMsgServReq : public ::google::protobuf::MessageLite {
 public:
  IMMsgServReq();
  virtual ~IMMsgServReq();

  IMMsgServReq(const IMMsgServReq& from);

  inline IMMsgServReq& operator=(const IMMsgServReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServReq* other);

  // implements Message ----------------------------------------------

  IMMsgServReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServReq& from);
  void MergeFrom(const IMMsgServReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMMsgServReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServRes : public ::google::protobuf::MessageLite {
 public:
  IMMsgServRes();
  virtual ~IMMsgServRes();

  IMMsgServRes(const IMMsgServRes& from);

  inline IMMsgServRes& operator=(const IMMsgServRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServRes* other);

  // implements Message ----------------------------------------------

  IMMsgServRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServRes& from);
  void MergeFrom(const IMMsgServRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string backip_ip = 4;
  inline bool has_backip_ip() const;
  inline void clear_backip_ip();
  static const int kBackipIpFieldNumber = 4;
  inline const ::std::string& backip_ip() const;
  inline void set_backip_ip(const ::std::string& value);
  inline void set_backip_ip(const char* value);
  inline void set_backip_ip(const char* value, size_t size);
  inline ::std::string* mutable_backip_ip();
  inline ::std::string* release_backip_ip();
  inline void set_allocated_backip_ip(::std::string* backip_ip);

  // optional uint32 backip_port = 5;
  inline bool has_backip_port() const;
  inline void clear_backip_port();
  static const int kBackipPortFieldNumber = 5;
  inline ::google::protobuf::uint32 backip_port() const;
  inline void set_backip_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMMsgServRes)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_backip_ip();
  inline void clear_has_backip_ip();
  inline void set_has_backip_port();
  inline void clear_has_backip_port();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  int result_code_;
  ::google::protobuf::uint32 port_;
  ::std::string* backip_ip_;
  ::google::protobuf::uint32 backip_port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServRes* default_instance_;
};
// -------------------------------------------------------------------

class IMLoginReq : public ::google::protobuf::MessageLite {
 public:
  IMLoginReq();
  virtual ~IMLoginReq();

  IMLoginReq(const IMLoginReq& from);

  inline IMLoginReq& operator=(const IMLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLoginReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLoginReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLoginReq* other);

  // implements Message ----------------------------------------------

  IMLoginReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLoginReq& from);
  void MergeFrom(const IMLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required .IM.BaseDefine.UserStatType online_status = 4;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 4;
  inline ::IM::BaseDefine::UserStatType online_status() const;
  inline void set_online_status(::IM::BaseDefine::UserStatType value);

  // required .IM.BaseDefine.ClientType client_type = 5;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 5;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // optional uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional string client_ver = 7;
  inline bool has_client_ver() const;
  inline void clear_client_ver();
  static const int kClientVerFieldNumber = 7;
  inline const ::std::string& client_ver() const;
  inline void set_client_ver(const ::std::string& value);
  inline void set_client_ver(const char* value);
  inline void set_client_ver(const char* value, size_t size);
  inline ::std::string* mutable_client_ver();
  inline ::std::string* release_client_ver();
  inline void set_allocated_client_ver(::std::string* client_ver);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLoginReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_client_ver();
  inline void clear_has_client_ver();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 company_id_;
  int online_status_;
  ::std::string* password_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* client_ver_;
  int client_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class IMLoginRes : public ::google::protobuf::MessageLite {
 public:
  IMLoginRes();
  virtual ~IMLoginRes();

  IMLoginRes(const IMLoginRes& from);

  inline IMLoginRes& operator=(const IMLoginRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLoginRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLoginRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLoginRes* other);

  // implements Message ----------------------------------------------

  IMLoginRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLoginRes& from);
  void MergeFrom(const IMLoginRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_time = 1;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 server_time() const;
  inline void set_server_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.LoginResultCode result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::IM::BaseDefine::LoginResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::LoginResultCode value);

  // required .IM.BaseDefine.UserStatType online_status = 3;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 3;
  inline ::IM::BaseDefine::UserStatType online_status() const;
  inline void set_online_status(::IM::BaseDefine::UserStatType value);

  // optional string user_session = 4;
  inline bool has_user_session() const;
  inline void clear_user_session();
  static const int kUserSessionFieldNumber = 4;
  inline const ::std::string& user_session() const;
  inline void set_user_session(const ::std::string& value);
  inline void set_user_session(const char* value);
  inline void set_user_session(const char* value, size_t size);
  inline ::std::string* mutable_user_session();
  inline ::std::string* release_user_session();
  inline void set_allocated_user_session(::std::string* user_session);

  // optional .IM.BaseDefine.UserInfo user_info = 5;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // optional uint64 pc_last_offline_time = 6;
  inline bool has_pc_last_offline_time() const;
  inline void clear_pc_last_offline_time();
  static const int kPcLastOfflineTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 pc_last_offline_time() const;
  inline void set_pc_last_offline_time(::google::protobuf::uint64 value);

  // optional uint64 phone_last_offline_time = 7;
  inline bool has_phone_last_offline_time() const;
  inline void clear_phone_last_offline_time();
  static const int kPhoneLastOfflineTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 phone_last_offline_time() const;
  inline void set_phone_last_offline_time(::google::protobuf::uint64 value);

  // optional string new_client_ver = 8;
  inline bool has_new_client_ver() const;
  inline void clear_new_client_ver();
  static const int kNewClientVerFieldNumber = 8;
  inline const ::std::string& new_client_ver() const;
  inline void set_new_client_ver(const ::std::string& value);
  inline void set_new_client_ver(const char* value);
  inline void set_new_client_ver(const char* value, size_t size);
  inline ::std::string* mutable_new_client_ver();
  inline ::std::string* release_new_client_ver();
  inline void set_allocated_new_client_ver(::std::string* new_client_ver);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLoginRes)
 private:
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_user_session();
  inline void clear_has_user_session();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_pc_last_offline_time();
  inline void clear_has_pc_last_offline_time();
  inline void set_has_phone_last_offline_time();
  inline void clear_has_phone_last_offline_time();
  inline void set_has_new_client_ver();
  inline void clear_has_new_client_ver();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_time_;
  int result_code_;
  int online_status_;
  ::std::string* user_session_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::google::protobuf::uint64 pc_last_offline_time_;
  ::google::protobuf::uint64 phone_last_offline_time_;
  ::std::string* new_client_ver_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMLoginRes* default_instance_;
};
// -------------------------------------------------------------------

class IMLogoutReq : public ::google::protobuf::MessageLite {
 public:
  IMLogoutReq();
  virtual ~IMLogoutReq();

  IMLogoutReq(const IMLogoutReq& from);

  inline IMLogoutReq& operator=(const IMLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLogoutReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLogoutReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLogoutReq* other);

  // implements Message ----------------------------------------------

  IMLogoutReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLogoutReq& from);
  void MergeFrom(const IMLogoutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ClientType client_type = 3;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLogoutReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_client_type();
  inline void clear_has_client_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMLogoutReq* default_instance_;
};
// -------------------------------------------------------------------

class IMLogoutRes : public ::google::protobuf::MessageLite {
 public:
  IMLogoutRes();
  virtual ~IMLogoutRes();

  IMLogoutRes(const IMLogoutRes& from);

  inline IMLogoutRes& operator=(const IMLogoutRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLogoutRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLogoutRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLogoutRes* other);

  // implements Message ----------------------------------------------

  IMLogoutRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLogoutRes& from);
  void MergeFrom(const IMLogoutRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.LoginResultCode result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::LoginResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::LoginResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLogoutRes)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMLogoutRes* default_instance_;
};
// -------------------------------------------------------------------

class IMKickUser : public ::google::protobuf::MessageLite {
 public:
  IMKickUser();
  virtual ~IMKickUser();

  IMKickUser(const IMKickUser& from);

  inline IMKickUser& operator=(const IMKickUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMKickUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMKickUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMKickUser* other);

  // implements Message ----------------------------------------------

  IMKickUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMKickUser& from);
  void MergeFrom(const IMKickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.KickReasonType kick_reason = 3;
  inline bool has_kick_reason() const;
  inline void clear_kick_reason();
  static const int kKickReasonFieldNumber = 3;
  inline ::IM::BaseDefine::KickReasonType kick_reason() const;
  inline void set_kick_reason(::IM::BaseDefine::KickReasonType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickUser)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_kick_reason();
  inline void clear_has_kick_reason();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int kick_reason_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMKickUser* default_instance_;
};
// -------------------------------------------------------------------

class IMDeviceTokenReq : public ::google::protobuf::MessageLite {
 public:
  IMDeviceTokenReq();
  virtual ~IMDeviceTokenReq();

  IMDeviceTokenReq(const IMDeviceTokenReq& from);

  inline IMDeviceTokenReq& operator=(const IMDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDeviceTokenReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDeviceTokenReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDeviceTokenReq* other);

  // implements Message ----------------------------------------------

  IMDeviceTokenReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDeviceTokenReq& from);
  void MergeFrom(const IMDeviceTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string device_token = 3;
  inline bool has_device_token() const;
  inline void clear_device_token();
  static const int kDeviceTokenFieldNumber = 3;
  inline const ::std::string& device_token() const;
  inline void set_device_token(const ::std::string& value);
  inline void set_device_token(const char* value);
  inline void set_device_token(const char* value, size_t size);
  inline ::std::string* mutable_device_token();
  inline ::std::string* release_device_token();
  inline void set_allocated_device_token(::std::string* device_token);

  // optional .IM.BaseDefine.ClientType client_type = 4;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMDeviceTokenReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_token();
  inline void clear_has_device_token();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* device_token_;
  ::std::string* attach_data_;
  int client_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMDeviceTokenReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDeviceTokenRsp : public ::google::protobuf::MessageLite {
 public:
  IMDeviceTokenRsp();
  virtual ~IMDeviceTokenRsp();

  IMDeviceTokenRsp(const IMDeviceTokenRsp& from);

  inline IMDeviceTokenRsp& operator=(const IMDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDeviceTokenRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDeviceTokenRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDeviceTokenRsp* other);

  // implements Message ----------------------------------------------

  IMDeviceTokenRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDeviceTokenRsp& from);
  void MergeFrom(const IMDeviceTokenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMDeviceTokenRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMDeviceTokenRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMKickOtherClientReq : public ::google::protobuf::MessageLite {
 public:
  IMKickOtherClientReq();
  virtual ~IMKickOtherClientReq();

  IMKickOtherClientReq(const IMKickOtherClientReq& from);

  inline IMKickOtherClientReq& operator=(const IMKickOtherClientReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMKickOtherClientReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMKickOtherClientReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMKickOtherClientReq* other);

  // implements Message ----------------------------------------------

  IMKickOtherClientReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMKickOtherClientReq& from);
  void MergeFrom(const IMKickOtherClientReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ClientType client_type = 3;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickOtherClientReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_client_type();
  inline void clear_has_client_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMKickOtherClientReq* default_instance_;
};
// -------------------------------------------------------------------

class IMKickOtherClientRsp : public ::google::protobuf::MessageLite {
 public:
  IMKickOtherClientRsp();
  virtual ~IMKickOtherClientRsp();

  IMKickOtherClientRsp(const IMKickOtherClientRsp& from);

  inline IMKickOtherClientRsp& operator=(const IMKickOtherClientRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMKickOtherClientRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMKickOtherClientRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMKickOtherClientRsp* other);

  // implements Message ----------------------------------------------

  IMKickOtherClientRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMKickOtherClientRsp& from);
  void MergeFrom(const IMKickOtherClientRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickOtherClientRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMKickOtherClientRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMPushShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMPushShieldReq();
  virtual ~IMPushShieldReq();

  IMPushShieldReq(const IMPushShieldReq& from);

  inline IMPushShieldReq& operator=(const IMPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushShieldReq* other);

  // implements Message ----------------------------------------------

  IMPushShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushShieldReq& from);
  void MergeFrom(const IMPushShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 shield_status = 3;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMPushShieldReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 shield_status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMPushShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMPushShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMPushShieldRsp();
  virtual ~IMPushShieldRsp();

  IMPushShieldRsp(const IMPushShieldRsp& from);

  inline IMPushShieldRsp& operator=(const IMPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushShieldRsp* other);

  // implements Message ----------------------------------------------

  IMPushShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushShieldRsp& from);
  void MergeFrom(const IMPushShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // optional uint32 shield_status = 4;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMPushShieldRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int result_code_;
  ::google::protobuf::uint32 shield_status_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMPushShieldRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMQueryPushShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMQueryPushShieldReq();
  virtual ~IMQueryPushShieldReq();

  IMQueryPushShieldReq(const IMQueryPushShieldReq& from);

  inline IMQueryPushShieldReq& operator=(const IMQueryPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMQueryPushShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMQueryPushShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMQueryPushShieldReq* other);

  // implements Message ----------------------------------------------

  IMQueryPushShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMQueryPushShieldReq& from);
  void MergeFrom(const IMQueryPushShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMQueryPushShieldReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMQueryPushShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMQueryPushShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMQueryPushShieldRsp();
  virtual ~IMQueryPushShieldRsp();

  IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from);

  inline IMQueryPushShieldRsp& operator=(const IMQueryPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMQueryPushShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMQueryPushShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMQueryPushShieldRsp* other);

  // implements Message ----------------------------------------------

  IMQueryPushShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMQueryPushShieldRsp& from);
  void MergeFrom(const IMQueryPushShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // optional uint32 shield_status = 4;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMQueryPushShieldRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int result_code_;
  ::google::protobuf::uint32 shield_status_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMQueryPushShieldRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMModifyPswdReq : public ::google::protobuf::MessageLite {
 public:
  IMModifyPswdReq();
  virtual ~IMModifyPswdReq();

  IMModifyPswdReq(const IMModifyPswdReq& from);

  inline IMModifyPswdReq& operator=(const IMModifyPswdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMModifyPswdReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMModifyPswdReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMModifyPswdReq* other);

  // implements Message ----------------------------------------------

  IMModifyPswdReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMModifyPswdReq& from);
  void MergeFrom(const IMModifyPswdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string old_pswd = 3;
  inline bool has_old_pswd() const;
  inline void clear_old_pswd();
  static const int kOldPswdFieldNumber = 3;
  inline const ::std::string& old_pswd() const;
  inline void set_old_pswd(const ::std::string& value);
  inline void set_old_pswd(const char* value);
  inline void set_old_pswd(const char* value, size_t size);
  inline ::std::string* mutable_old_pswd();
  inline ::std::string* release_old_pswd();
  inline void set_allocated_old_pswd(::std::string* old_pswd);

  // required string new_pswd = 4;
  inline bool has_new_pswd() const;
  inline void clear_new_pswd();
  static const int kNewPswdFieldNumber = 4;
  inline const ::std::string& new_pswd() const;
  inline void set_new_pswd(const ::std::string& value);
  inline void set_new_pswd(const char* value);
  inline void set_new_pswd(const char* value, size_t size);
  inline ::std::string* mutable_new_pswd();
  inline ::std::string* release_new_pswd();
  inline void set_allocated_new_pswd(::std::string* new_pswd);

  // @@protoc_insertion_point(class_scope:IM.Login.IMModifyPswdReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_old_pswd();
  inline void clear_has_old_pswd();
  inline void set_has_new_pswd();
  inline void clear_has_new_pswd();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* old_pswd_;
  ::std::string* new_pswd_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMModifyPswdReq* default_instance_;
};
// -------------------------------------------------------------------

class IMModifyPswdRsp : public ::google::protobuf::MessageLite {
 public:
  IMModifyPswdRsp();
  virtual ~IMModifyPswdRsp();

  IMModifyPswdRsp(const IMModifyPswdRsp& from);

  inline IMModifyPswdRsp& operator=(const IMModifyPswdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMModifyPswdRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMModifyPswdRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMModifyPswdRsp* other);

  // implements Message ----------------------------------------------

  IMModifyPswdRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMModifyPswdRsp& from);
  void MergeFrom(const IMModifyPswdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMModifyPswdRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMModifyPswdRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUserStatUpdateReq : public ::google::protobuf::MessageLite {
 public:
  IMUserStatUpdateReq();
  virtual ~IMUserStatUpdateReq();

  IMUserStatUpdateReq(const IMUserStatUpdateReq& from);

  inline IMUserStatUpdateReq& operator=(const IMUserStatUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserStatUpdateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserStatUpdateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserStatUpdateReq* other);

  // implements Message ----------------------------------------------

  IMUserStatUpdateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserStatUpdateReq& from);
  void MergeFrom(const IMUserStatUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.UserStatType status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::IM::BaseDefine::UserStatType status() const;
  inline void set_status(::IM::BaseDefine::UserStatType value);

  // required .IM.BaseDefine.ClientType client_type = 4;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Login.IMUserStatUpdateReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int status_;
  int client_type_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMUserStatUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUserRoleAuthorityReq : public ::google::protobuf::MessageLite {
 public:
  IMUserRoleAuthorityReq();
  virtual ~IMUserRoleAuthorityReq();

  IMUserRoleAuthorityReq(const IMUserRoleAuthorityReq& from);

  inline IMUserRoleAuthorityReq& operator=(const IMUserRoleAuthorityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserRoleAuthorityReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserRoleAuthorityReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserRoleAuthorityReq* other);

  // implements Message ----------------------------------------------

  IMUserRoleAuthorityReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserRoleAuthorityReq& from);
  void MergeFrom(const IMUserRoleAuthorityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMUserRoleAuthorityReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMUserRoleAuthorityReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUserRoleAuthorityRsp : public ::google::protobuf::MessageLite {
 public:
  IMUserRoleAuthorityRsp();
  virtual ~IMUserRoleAuthorityRsp();

  IMUserRoleAuthorityRsp(const IMUserRoleAuthorityRsp& from);

  inline IMUserRoleAuthorityRsp& operator=(const IMUserRoleAuthorityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserRoleAuthorityRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserRoleAuthorityRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserRoleAuthorityRsp* other);

  // implements Message ----------------------------------------------

  IMUserRoleAuthorityRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserRoleAuthorityRsp& from);
  void MergeFrom(const IMUserRoleAuthorityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.IMUserRole role = 1;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline const ::IM::BaseDefine::IMUserRole& role(int index) const;
  inline ::IM::BaseDefine::IMUserRole* mutable_role(int index);
  inline ::IM::BaseDefine::IMUserRole* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >*
      mutable_role();

  // @@protoc_insertion_point(class_scope:IM.Login.IMUserRoleAuthorityRsp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole > role_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_IM_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static IMUserRoleAuthorityRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMMsgServReq

// optional uint32 company_id = 1;
inline bool IMMsgServReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMMsgServReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServReq.company_id)
  return company_id_;
}
inline void IMMsgServReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServReq.company_id)
}

// -------------------------------------------------------------------

// IMMsgServRes

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMMsgServRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServRes::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMMsgServRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRes.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMMsgServRes::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRes.result_code)
}

// optional string ip = 2;
inline bool IMMsgServRes::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServRes::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServRes::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServRes::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IMMsgServRes::ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRes.ip)
  return *ip_;
}
inline void IMMsgServRes::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRes.ip)
}
inline void IMMsgServRes::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMMsgServRes.ip)
}
inline void IMMsgServRes::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMMsgServRes.ip)
}
inline ::std::string* IMMsgServRes::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRes.ip)
  return ip_;
}
inline ::std::string* IMMsgServRes::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServRes::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRes.ip)
}

// optional uint32 port = 3;
inline bool IMMsgServRes::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgServRes::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgServRes::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgServRes::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IMMsgServRes::port() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRes.port)
  return port_;
}
inline void IMMsgServRes::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRes.port)
}

// optional string backip_ip = 4;
inline bool IMMsgServRes::has_backip_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgServRes::set_has_backip_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgServRes::clear_has_backip_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgServRes::clear_backip_ip() {
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_->clear();
  }
  clear_has_backip_ip();
}
inline const ::std::string& IMMsgServRes::backip_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRes.backip_ip)
  return *backip_ip_;
}
inline void IMMsgServRes::set_backip_ip(const ::std::string& value) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRes.backip_ip)
}
inline void IMMsgServRes::set_backip_ip(const char* value) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMMsgServRes.backip_ip)
}
inline void IMMsgServRes::set_backip_ip(const char* value, size_t size) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMMsgServRes.backip_ip)
}
inline ::std::string* IMMsgServRes::mutable_backip_ip() {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRes.backip_ip)
  return backip_ip_;
}
inline ::std::string* IMMsgServRes::release_backip_ip() {
  clear_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backip_ip_;
    backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServRes::set_allocated_backip_ip(::std::string* backip_ip) {
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backip_ip_;
  }
  if (backip_ip) {
    set_has_backip_ip();
    backip_ip_ = backip_ip;
  } else {
    clear_has_backip_ip();
    backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRes.backip_ip)
}

// optional uint32 backip_port = 5;
inline bool IMMsgServRes::has_backip_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMMsgServRes::set_has_backip_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMMsgServRes::clear_has_backip_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMMsgServRes::clear_backip_port() {
  backip_port_ = 0u;
  clear_has_backip_port();
}
inline ::google::protobuf::uint32 IMMsgServRes::backip_port() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRes.backip_port)
  return backip_port_;
}
inline void IMMsgServRes::set_backip_port(::google::protobuf::uint32 value) {
  set_has_backip_port();
  backip_port_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRes.backip_port)
}

// -------------------------------------------------------------------

// IMLoginReq

// required uint32 company_id = 1;
inline bool IMLoginReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMLoginReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.company_id)
  return company_id_;
}
inline void IMLoginReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.company_id)
}

// required string user_name = 2;
inline bool IMLoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMLoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.user_name)
  return *user_name_;
}
inline void IMLoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.user_name)
}
inline void IMLoginReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.user_name)
}
inline void IMLoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.user_name)
}
inline ::std::string* IMLoginReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.user_name)
  return user_name_;
}
inline ::std::string* IMLoginReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.user_name)
}

// required string password = 3;
inline bool IMLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.password)
  return *password_;
}
inline void IMLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.password)
}
inline void IMLoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.password)
}
inline void IMLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.password)
}
inline ::std::string* IMLoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.password)
  return password_;
}
inline ::std::string* IMLoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.password)
}

// required .IM.BaseDefine.UserStatType online_status = 4;
inline bool IMLoginReq::has_online_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginReq::set_has_online_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginReq::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginReq::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMLoginReq::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.online_status)
}

// required .IM.BaseDefine.ClientType client_type = 5;
inline bool IMLoginReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMLoginReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_type)
}

// optional uint64 update_time = 6;
inline bool IMLoginReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMLoginReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMLoginReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMLoginReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMLoginReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.update_time)
  return update_time_;
}
inline void IMLoginReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.update_time)
}

// optional string client_ver = 7;
inline bool IMLoginReq::has_client_ver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMLoginReq::set_has_client_ver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMLoginReq::clear_has_client_ver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMLoginReq::clear_client_ver() {
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_->clear();
  }
  clear_has_client_ver();
}
inline const ::std::string& IMLoginReq::client_ver() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_ver)
  return *client_ver_;
}
inline void IMLoginReq::set_client_ver(const ::std::string& value) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_ver)
}
inline void IMLoginReq::set_client_ver(const char* value) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.client_ver)
}
inline void IMLoginReq::set_client_ver(const char* value, size_t size) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.client_ver)
}
inline ::std::string* IMLoginReq::mutable_client_ver() {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.client_ver)
  return client_ver_;
}
inline ::std::string* IMLoginReq::release_client_ver() {
  clear_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_ver_;
    client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginReq::set_allocated_client_ver(::std::string* client_ver) {
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ver_;
  }
  if (client_ver) {
    set_has_client_ver();
    client_ver_ = client_ver;
  } else {
    clear_has_client_ver();
    client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.client_ver)
}

// -------------------------------------------------------------------

// IMLoginRes

// required uint64 server_time = 1;
inline bool IMLoginRes::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginRes::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginRes::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginRes::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_time();
}
inline ::google::protobuf::uint64 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.server_time)
  return server_time_;
}
inline void IMLoginRes::set_server_time(::google::protobuf::uint64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.server_time)
}

// required .IM.BaseDefine.LoginResultCode result_code = 2;
inline bool IMLoginRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginRes::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::LoginResultCode IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_code)
  return static_cast< ::IM::BaseDefine::LoginResultCode >(result_code_);
}
inline void IMLoginRes::set_result_code(::IM::BaseDefine::LoginResultCode value) {
  assert(::IM::BaseDefine::LoginResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_code)
}

// required .IM.BaseDefine.UserStatType online_status = 3;
inline bool IMLoginRes::has_online_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginRes::set_has_online_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginRes::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginRes::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMLoginRes::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.online_status)
}

// optional string user_session = 4;
inline bool IMLoginRes::has_user_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginRes::set_has_user_session() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginRes::clear_has_user_session() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginRes::clear_user_session() {
  if (user_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_session_->clear();
  }
  clear_has_user_session();
}
inline const ::std::string& IMLoginRes::user_session() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.user_session)
  return *user_session_;
}
inline void IMLoginRes::set_user_session(const ::std::string& value) {
  set_has_user_session();
  if (user_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_session_ = new ::std::string;
  }
  user_session_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.user_session)
}
inline void IMLoginRes::set_user_session(const char* value) {
  set_has_user_session();
  if (user_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_session_ = new ::std::string;
  }
  user_session_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginRes.user_session)
}
inline void IMLoginRes::set_user_session(const char* value, size_t size) {
  set_has_user_session();
  if (user_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_session_ = new ::std::string;
  }
  user_session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginRes.user_session)
}
inline ::std::string* IMLoginRes::mutable_user_session() {
  set_has_user_session();
  if (user_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.user_session)
  return user_session_;
}
inline ::std::string* IMLoginRes::release_user_session() {
  clear_has_user_session();
  if (user_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_session_;
    user_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginRes::set_allocated_user_session(::std::string* user_session) {
  if (user_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_session_;
  }
  if (user_session) {
    set_has_user_session();
    user_session_ = user_session;
  } else {
    clear_has_user_session();
    user_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.user_session)
}

// optional .IM.BaseDefine.UserInfo user_info = 5;
inline bool IMLoginRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginRes::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMLoginRes::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.user_info)
}

// optional uint64 pc_last_offline_time = 6;
inline bool IMLoginRes::has_pc_last_offline_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMLoginRes::set_has_pc_last_offline_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMLoginRes::clear_has_pc_last_offline_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMLoginRes::clear_pc_last_offline_time() {
  pc_last_offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_pc_last_offline_time();
}
inline ::google::protobuf::uint64 IMLoginRes::pc_last_offline_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.pc_last_offline_time)
  return pc_last_offline_time_;
}
inline void IMLoginRes::set_pc_last_offline_time(::google::protobuf::uint64 value) {
  set_has_pc_last_offline_time();
  pc_last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.pc_last_offline_time)
}

// optional uint64 phone_last_offline_time = 7;
inline bool IMLoginRes::has_phone_last_offline_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMLoginRes::set_has_phone_last_offline_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMLoginRes::clear_has_phone_last_offline_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMLoginRes::clear_phone_last_offline_time() {
  phone_last_offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_phone_last_offline_time();
}
inline ::google::protobuf::uint64 IMLoginRes::phone_last_offline_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.phone_last_offline_time)
  return phone_last_offline_time_;
}
inline void IMLoginRes::set_phone_last_offline_time(::google::protobuf::uint64 value) {
  set_has_phone_last_offline_time();
  phone_last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.phone_last_offline_time)
}

// optional string new_client_ver = 8;
inline bool IMLoginRes::has_new_client_ver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMLoginRes::set_has_new_client_ver() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMLoginRes::clear_has_new_client_ver() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMLoginRes::clear_new_client_ver() {
  if (new_client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_client_ver_->clear();
  }
  clear_has_new_client_ver();
}
inline const ::std::string& IMLoginRes::new_client_ver() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.new_client_ver)
  return *new_client_ver_;
}
inline void IMLoginRes::set_new_client_ver(const ::std::string& value) {
  set_has_new_client_ver();
  if (new_client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_client_ver_ = new ::std::string;
  }
  new_client_ver_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.new_client_ver)
}
inline void IMLoginRes::set_new_client_ver(const char* value) {
  set_has_new_client_ver();
  if (new_client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_client_ver_ = new ::std::string;
  }
  new_client_ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginRes.new_client_ver)
}
inline void IMLoginRes::set_new_client_ver(const char* value, size_t size) {
  set_has_new_client_ver();
  if (new_client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_client_ver_ = new ::std::string;
  }
  new_client_ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginRes.new_client_ver)
}
inline ::std::string* IMLoginRes::mutable_new_client_ver() {
  set_has_new_client_ver();
  if (new_client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_client_ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.new_client_ver)
  return new_client_ver_;
}
inline ::std::string* IMLoginRes::release_new_client_ver() {
  clear_has_new_client_ver();
  if (new_client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_client_ver_;
    new_client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginRes::set_allocated_new_client_ver(::std::string* new_client_ver) {
  if (new_client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_client_ver_;
  }
  if (new_client_ver) {
    set_has_new_client_ver();
    new_client_ver_ = new_client_ver;
  } else {
    clear_has_new_client_ver();
    new_client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.new_client_ver)
}

// -------------------------------------------------------------------

// IMLogoutReq

// required uint32 company_id = 1;
inline bool IMLogoutReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLogoutReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLogoutReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLogoutReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMLogoutReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutReq.company_id)
  return company_id_;
}
inline void IMLogoutReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMLogoutReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLogoutReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLogoutReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLogoutReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMLogoutReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutReq.user_id)
  return user_id_;
}
inline void IMLogoutReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutReq.user_id)
}

// required .IM.BaseDefine.ClientType client_type = 3;
inline bool IMLogoutReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLogoutReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLogoutReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLogoutReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMLogoutReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMLogoutReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutReq.client_type)
}

// -------------------------------------------------------------------

// IMLogoutRes

// required .IM.BaseDefine.LoginResultCode result_code = 1;
inline bool IMLogoutRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLogoutRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLogoutRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLogoutRes::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::LoginResultCode IMLogoutRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutRes.result_code)
  return static_cast< ::IM::BaseDefine::LoginResultCode >(result_code_);
}
inline void IMLogoutRes::set_result_code(::IM::BaseDefine::LoginResultCode value) {
  assert(::IM::BaseDefine::LoginResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutRes.result_code)
}

// -------------------------------------------------------------------

// IMKickUser

// required uint32 company_id = 1;
inline bool IMKickUser::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMKickUser::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMKickUser::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMKickUser::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMKickUser::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.company_id)
  return company_id_;
}
inline void IMKickUser::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.company_id)
}

// required uint32 user_id = 2;
inline bool IMKickUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMKickUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMKickUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMKickUser::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.user_id)
  return user_id_;
}
inline void IMKickUser::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.user_id)
}

// required .IM.BaseDefine.KickReasonType kick_reason = 3;
inline bool IMKickUser::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMKickUser::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMKickUser::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMKickUser::clear_kick_reason() {
  kick_reason_ = 1;
  clear_has_kick_reason();
}
inline ::IM::BaseDefine::KickReasonType IMKickUser::kick_reason() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.kick_reason)
  return static_cast< ::IM::BaseDefine::KickReasonType >(kick_reason_);
}
inline void IMKickUser::set_kick_reason(::IM::BaseDefine::KickReasonType value) {
  assert(::IM::BaseDefine::KickReasonType_IsValid(value));
  set_has_kick_reason();
  kick_reason_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.kick_reason)
}

// -------------------------------------------------------------------

// IMDeviceTokenReq

// required uint32 company_id = 1;
inline bool IMDeviceTokenReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDeviceTokenReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDeviceTokenReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDeviceTokenReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.company_id)
  return company_id_;
}
inline void IMDeviceTokenReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMDeviceTokenReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDeviceTokenReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDeviceTokenReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDeviceTokenReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.user_id)
  return user_id_;
}
inline void IMDeviceTokenReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.user_id)
}

// required string device_token = 3;
inline bool IMDeviceTokenReq::has_device_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDeviceTokenReq::set_has_device_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDeviceTokenReq::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDeviceTokenReq::clear_device_token() {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_->clear();
  }
  clear_has_device_token();
}
inline const ::std::string& IMDeviceTokenReq::device_token() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.device_token)
  return *device_token_;
}
inline void IMDeviceTokenReq::set_device_token(const ::std::string& value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.device_token)
}
inline void IMDeviceTokenReq::set_device_token(const char* value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenReq.device_token)
}
inline void IMDeviceTokenReq::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenReq.device_token)
}
inline ::std::string* IMDeviceTokenReq::mutable_device_token() {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.device_token)
  return device_token_;
}
inline ::std::string* IMDeviceTokenReq::release_device_token() {
  clear_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_token_;
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDeviceTokenReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_token_;
  }
  if (device_token) {
    set_has_device_token();
    device_token_ = device_token;
  } else {
    clear_has_device_token();
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.device_token)
}

// optional .IM.BaseDefine.ClientType client_type = 4;
inline bool IMDeviceTokenReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDeviceTokenReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDeviceTokenReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDeviceTokenReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMDeviceTokenReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMDeviceTokenReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.client_type)
}

// optional bytes attach_data = 20;
inline bool IMDeviceTokenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMDeviceTokenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMDeviceTokenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMDeviceTokenReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.attach_data)
  return *attach_data_;
}
inline void IMDeviceTokenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.attach_data)
}
inline void IMDeviceTokenReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenReq.attach_data)
}
inline void IMDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenReq.attach_data)
}
inline ::std::string* IMDeviceTokenReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMDeviceTokenReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMDeviceTokenRsp

// required uint32 company_id = 1;
inline bool IMDeviceTokenRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDeviceTokenRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDeviceTokenRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDeviceTokenRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.company_id)
  return company_id_;
}
inline void IMDeviceTokenRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMDeviceTokenRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDeviceTokenRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDeviceTokenRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDeviceTokenRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.user_id)
  return user_id_;
}
inline void IMDeviceTokenRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.user_id)
}

// optional bytes attach_data = 20;
inline bool IMDeviceTokenRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDeviceTokenRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDeviceTokenRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDeviceTokenRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.attach_data)
  return *attach_data_;
}
inline void IMDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.attach_data)
}
inline void IMDeviceTokenRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenRsp.attach_data)
}
inline void IMDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenRsp.attach_data)
}
inline ::std::string* IMDeviceTokenRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMDeviceTokenRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMKickOtherClientReq

// required uint32 company_id = 1;
inline bool IMKickOtherClientReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMKickOtherClientReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMKickOtherClientReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMKickOtherClientReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMKickOtherClientReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickOtherClientReq.company_id)
  return company_id_;
}
inline void IMKickOtherClientReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickOtherClientReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMKickOtherClientReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMKickOtherClientReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMKickOtherClientReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMKickOtherClientReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMKickOtherClientReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickOtherClientReq.user_id)
  return user_id_;
}
inline void IMKickOtherClientReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickOtherClientReq.user_id)
}

// required .IM.BaseDefine.ClientType client_type = 3;
inline bool IMKickOtherClientReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMKickOtherClientReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMKickOtherClientReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMKickOtherClientReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMKickOtherClientReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickOtherClientReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMKickOtherClientReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickOtherClientReq.client_type)
}

// -------------------------------------------------------------------

// IMKickOtherClientRsp

// required uint32 company_id = 1;
inline bool IMKickOtherClientRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMKickOtherClientRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMKickOtherClientRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMKickOtherClientRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMKickOtherClientRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickOtherClientRsp.company_id)
  return company_id_;
}
inline void IMKickOtherClientRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickOtherClientRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMKickOtherClientRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMKickOtherClientRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMKickOtherClientRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMKickOtherClientRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMKickOtherClientRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickOtherClientRsp.user_id)
  return user_id_;
}
inline void IMKickOtherClientRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickOtherClientRsp.user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMKickOtherClientRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMKickOtherClientRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMKickOtherClientRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMKickOtherClientRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMKickOtherClientRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickOtherClientRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMKickOtherClientRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickOtherClientRsp.result_code)
}

// -------------------------------------------------------------------

// IMPushShieldReq

// required uint32 company_id = 1;
inline bool IMPushShieldReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushShieldReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushShieldReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushShieldReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMPushShieldReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.company_id)
  return company_id_;
}
inline void IMPushShieldReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMPushShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.user_id)
  return user_id_;
}
inline void IMPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.user_id)
}

// required uint32 shield_status = 3;
inline bool IMPushShieldReq::has_shield_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushShieldReq::set_has_shield_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushShieldReq::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushShieldReq::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMPushShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.shield_status)
  return shield_status_;
}
inline void IMPushShieldReq::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMPushShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMPushShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMPushShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMPushShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.attach_data)
  return *attach_data_;
}
inline void IMPushShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.attach_data)
}
inline void IMPushShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMPushShieldReq.attach_data)
}
inline void IMPushShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMPushShieldReq.attach_data)
}
inline ::std::string* IMPushShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMPushShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMPushShieldRsp

// required uint32 company_id = 1;
inline bool IMPushShieldRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushShieldRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushShieldRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushShieldRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.company_id)
  return company_id_;
}
inline void IMPushShieldRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMPushShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.user_id)
  return user_id_;
}
inline void IMPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMPushShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushShieldRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMPushShieldRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.result_code)
}

// optional uint32 shield_status = 4;
inline bool IMPushShieldRsp::has_shield_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMPushShieldRsp::set_has_shield_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMPushShieldRsp::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.shield_status)
  return shield_status_;
}
inline void IMPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMPushShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMPushShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMPushShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMPushShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMPushShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.attach_data)
}
inline void IMPushShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMPushShieldRsp.attach_data)
}
inline void IMPushShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMPushShieldRsp.attach_data)
}
inline ::std::string* IMPushShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMPushShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldReq

// required uint32 company_id = 1;
inline bool IMQueryPushShieldReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMQueryPushShieldReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMQueryPushShieldReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMQueryPushShieldReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.company_id)
  return company_id_;
}
inline void IMQueryPushShieldReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMQueryPushShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMQueryPushShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMQueryPushShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMQueryPushShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.user_id)
  return user_id_;
}
inline void IMQueryPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.user_id)
}

// optional bytes attach_data = 20;
inline bool IMQueryPushShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMQueryPushShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMQueryPushShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMQueryPushShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMQueryPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.attach_data)
  return *attach_data_;
}
inline void IMQueryPushShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.attach_data)
}
inline void IMQueryPushShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMQueryPushShieldReq.attach_data)
}
inline void IMQueryPushShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMQueryPushShieldReq.attach_data)
}
inline ::std::string* IMQueryPushShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMQueryPushShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMQueryPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldRsp

// required uint32 company_id = 1;
inline bool IMQueryPushShieldRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMQueryPushShieldRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMQueryPushShieldRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.company_id)
  return company_id_;
}
inline void IMQueryPushShieldRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMQueryPushShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMQueryPushShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMQueryPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.user_id)
  return user_id_;
}
inline void IMQueryPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMQueryPushShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMQueryPushShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMQueryPushShieldRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMQueryPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMQueryPushShieldRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.result_code)
}

// optional uint32 shield_status = 4;
inline bool IMQueryPushShieldRsp::has_shield_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_shield_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMQueryPushShieldRsp::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMQueryPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.shield_status)
  return shield_status_;
}
inline void IMQueryPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMQueryPushShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMQueryPushShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMQueryPushShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMQueryPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMQueryPushShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.attach_data)
}
inline void IMQueryPushShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMQueryPushShieldRsp.attach_data)
}
inline void IMQueryPushShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMQueryPushShieldRsp.attach_data)
}
inline ::std::string* IMQueryPushShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMQueryPushShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMQueryPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMModifyPswdReq

// required uint32 company_id = 1;
inline bool IMModifyPswdReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMModifyPswdReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMModifyPswdReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMModifyPswdReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMModifyPswdReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdReq.company_id)
  return company_id_;
}
inline void IMModifyPswdReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMModifyPswdReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMModifyPswdReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMModifyPswdReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMModifyPswdReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMModifyPswdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdReq.user_id)
  return user_id_;
}
inline void IMModifyPswdReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdReq.user_id)
}

// required string old_pswd = 3;
inline bool IMModifyPswdReq::has_old_pswd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMModifyPswdReq::set_has_old_pswd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMModifyPswdReq::clear_has_old_pswd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMModifyPswdReq::clear_old_pswd() {
  if (old_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_->clear();
  }
  clear_has_old_pswd();
}
inline const ::std::string& IMModifyPswdReq::old_pswd() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdReq.old_pswd)
  return *old_pswd_;
}
inline void IMModifyPswdReq::set_old_pswd(const ::std::string& value) {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  old_pswd_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdReq.old_pswd)
}
inline void IMModifyPswdReq::set_old_pswd(const char* value) {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  old_pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMModifyPswdReq.old_pswd)
}
inline void IMModifyPswdReq::set_old_pswd(const char* value, size_t size) {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  old_pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMModifyPswdReq.old_pswd)
}
inline ::std::string* IMModifyPswdReq::mutable_old_pswd() {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMModifyPswdReq.old_pswd)
  return old_pswd_;
}
inline ::std::string* IMModifyPswdReq::release_old_pswd() {
  clear_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = old_pswd_;
    old_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMModifyPswdReq::set_allocated_old_pswd(::std::string* old_pswd) {
  if (old_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_pswd_;
  }
  if (old_pswd) {
    set_has_old_pswd();
    old_pswd_ = old_pswd;
  } else {
    clear_has_old_pswd();
    old_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMModifyPswdReq.old_pswd)
}

// required string new_pswd = 4;
inline bool IMModifyPswdReq::has_new_pswd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMModifyPswdReq::set_has_new_pswd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMModifyPswdReq::clear_has_new_pswd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMModifyPswdReq::clear_new_pswd() {
  if (new_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_->clear();
  }
  clear_has_new_pswd();
}
inline const ::std::string& IMModifyPswdReq::new_pswd() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdReq.new_pswd)
  return *new_pswd_;
}
inline void IMModifyPswdReq::set_new_pswd(const ::std::string& value) {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  new_pswd_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdReq.new_pswd)
}
inline void IMModifyPswdReq::set_new_pswd(const char* value) {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  new_pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMModifyPswdReq.new_pswd)
}
inline void IMModifyPswdReq::set_new_pswd(const char* value, size_t size) {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  new_pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMModifyPswdReq.new_pswd)
}
inline ::std::string* IMModifyPswdReq::mutable_new_pswd() {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMModifyPswdReq.new_pswd)
  return new_pswd_;
}
inline ::std::string* IMModifyPswdReq::release_new_pswd() {
  clear_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_pswd_;
    new_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMModifyPswdReq::set_allocated_new_pswd(::std::string* new_pswd) {
  if (new_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pswd_;
  }
  if (new_pswd) {
    set_has_new_pswd();
    new_pswd_ = new_pswd;
  } else {
    clear_has_new_pswd();
    new_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMModifyPswdReq.new_pswd)
}

// -------------------------------------------------------------------

// IMModifyPswdRsp

// required uint32 company_id = 1;
inline bool IMModifyPswdRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMModifyPswdRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMModifyPswdRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMModifyPswdRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMModifyPswdRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdRsp.company_id)
  return company_id_;
}
inline void IMModifyPswdRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMModifyPswdRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMModifyPswdRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMModifyPswdRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMModifyPswdRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMModifyPswdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdRsp.user_id)
  return user_id_;
}
inline void IMModifyPswdRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdRsp.user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMModifyPswdRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMModifyPswdRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMModifyPswdRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMModifyPswdRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMModifyPswdRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMModifyPswdRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMModifyPswdRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMModifyPswdRsp.result_code)
}

// -------------------------------------------------------------------

// IMUserStatUpdateReq

// required uint32 company_id = 1;
inline bool IMUserStatUpdateReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserStatUpdateReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserStatUpdateReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserStatUpdateReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUserStatUpdateReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserStatUpdateReq.company_id)
  return company_id_;
}
inline void IMUserStatUpdateReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMUserStatUpdateReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMUserStatUpdateReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserStatUpdateReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserStatUpdateReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserStatUpdateReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUserStatUpdateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserStatUpdateReq.user_id)
  return user_id_;
}
inline void IMUserStatUpdateReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMUserStatUpdateReq.user_id)
}

// required .IM.BaseDefine.UserStatType status = 3;
inline bool IMUserStatUpdateReq::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUserStatUpdateReq::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUserStatUpdateReq::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUserStatUpdateReq::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::IM::BaseDefine::UserStatType IMUserStatUpdateReq::status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserStatUpdateReq.status)
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
inline void IMUserStatUpdateReq::set_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMUserStatUpdateReq.status)
}

// required .IM.BaseDefine.ClientType client_type = 4;
inline bool IMUserStatUpdateReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUserStatUpdateReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUserStatUpdateReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUserStatUpdateReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMUserStatUpdateReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserStatUpdateReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMUserStatUpdateReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMUserStatUpdateReq.client_type)
}

// optional bytes attach_data = 20;
inline bool IMUserStatUpdateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUserStatUpdateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUserStatUpdateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUserStatUpdateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUserStatUpdateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserStatUpdateReq.attach_data)
  return *attach_data_;
}
inline void IMUserStatUpdateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMUserStatUpdateReq.attach_data)
}
inline void IMUserStatUpdateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.IMUserStatUpdateReq.attach_data)
}
inline void IMUserStatUpdateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMUserStatUpdateReq.attach_data)
}
inline ::std::string* IMUserStatUpdateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMUserStatUpdateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMUserStatUpdateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUserStatUpdateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMUserStatUpdateReq.attach_data)
}

// -------------------------------------------------------------------

// IMUserRoleAuthorityReq

// required uint32 company_id = 1;
inline bool IMUserRoleAuthorityReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserRoleAuthorityReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserRoleAuthorityReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserRoleAuthorityReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUserRoleAuthorityReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserRoleAuthorityReq.company_id)
  return company_id_;
}
inline void IMUserRoleAuthorityReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMUserRoleAuthorityReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMUserRoleAuthorityReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserRoleAuthorityReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserRoleAuthorityReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserRoleAuthorityReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUserRoleAuthorityReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserRoleAuthorityReq.user_id)
  return user_id_;
}
inline void IMUserRoleAuthorityReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMUserRoleAuthorityReq.user_id)
}

// -------------------------------------------------------------------

// IMUserRoleAuthorityRsp

// repeated .IM.BaseDefine.IMUserRole role = 1;
inline int IMUserRoleAuthorityRsp::role_size() const {
  return role_.size();
}
inline void IMUserRoleAuthorityRsp::clear_role() {
  role_.Clear();
}
inline const ::IM::BaseDefine::IMUserRole& IMUserRoleAuthorityRsp::role(int index) const {
  // @@protoc_insertion_point(field_get:IM.Login.IMUserRoleAuthorityRsp.role)
  return role_.Get(index);
}
inline ::IM::BaseDefine::IMUserRole* IMUserRoleAuthorityRsp::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Login.IMUserRoleAuthorityRsp.role)
  return role_.Mutable(index);
}
inline ::IM::BaseDefine::IMUserRole* IMUserRoleAuthorityRsp::add_role() {
  // @@protoc_insertion_point(field_add:IM.Login.IMUserRoleAuthorityRsp.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >&
IMUserRoleAuthorityRsp::role() const {
  // @@protoc_insertion_point(field_list:IM.Login.IMUserRoleAuthorityRsp.role)
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >*
IMUserRoleAuthorityRsp::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:IM.Login.IMUserRoleAuthorityRsp.role)
  return &role_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eLogin_2eproto__INCLUDED
