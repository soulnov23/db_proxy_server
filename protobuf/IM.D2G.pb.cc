// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.D2G.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.D2G.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace DTG {

void protobuf_ShutdownFile_IM_2eD2G_2eproto() {
  delete DTGroupCreateReq::default_instance_;
  delete DTGroupCreateRsp::default_instance_;
  delete DTGMsg::default_instance_;
  delete DTGMsgList::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eD2G_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eD2G_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  DTGroupCreateReq::default_instance_ = new DTGroupCreateReq();
  DTGroupCreateRsp::default_instance_ = new DTGroupCreateRsp();
  DTGMsg::default_instance_ = new DTGMsg();
  DTGMsgList::default_instance_ = new DTGMsgList();
  DTGroupCreateReq::default_instance_->InitAsDefaultInstance();
  DTGroupCreateRsp::default_instance_->InitAsDefaultInstance();
  DTGMsg::default_instance_->InitAsDefaultInstance();
  DTGMsgList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eD2G_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eD2G_2eproto_once_);
void protobuf_AddDesc_IM_2eD2G_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eD2G_2eproto_once_,
                 &protobuf_AddDesc_IM_2eD2G_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eD2G_2eproto {
  StaticDescriptorInitializer_IM_2eD2G_2eproto() {
    protobuf_AddDesc_IM_2eD2G_2eproto();
  }
} static_descriptor_initializer_IM_2eD2G_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DTGroupCreateReq::kCompanyIdFieldNumber;
const int DTGroupCreateReq::kUserIdFieldNumber;
const int DTGroupCreateReq::kGroupIdFieldNumber;
const int DTGroupCreateReq::kGroupTypeFieldNumber;
const int DTGroupCreateReq::kGroupNameFieldNumber;
const int DTGroupCreateReq::kGroupAvatarFieldNumber;
const int DTGroupCreateReq::kMemberIdListFieldNumber;
const int DTGroupCreateReq::kTopicFieldNumber;
const int DTGroupCreateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

DTGroupCreateReq::DTGroupCreateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DTG.DTGroupCreateReq)
}

void DTGroupCreateReq::InitAsDefaultInstance() {
}

DTGroupCreateReq::DTGroupCreateReq(const DTGroupCreateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DTG.DTGroupCreateReq)
}

void DTGroupCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTGroupCreateReq::~DTGroupCreateReq() {
  // @@protoc_insertion_point(destructor:IM.DTG.DTGroupCreateReq)
  SharedDtor();
}

void DTGroupCreateReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DTGroupCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DTGroupCreateReq& DTGroupCreateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eD2G_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eD2G_2eproto();
#endif
  return *default_instance_;
}

DTGroupCreateReq* DTGroupCreateReq::default_instance_ = NULL;

DTGroupCreateReq* DTGroupCreateReq::New() const {
  return new DTGroupCreateReq;
}

void DTGroupCreateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DTGroupCreateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_avatar_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DTGroupCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DTG.DTGroupCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 4;
      case 4: {
        if (tag == 32) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_name;
        break;
      }

      // required string group_name = 5;
      case 5: {
        if (tag == 42) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_member_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem member_id_list = 7;
      case 7: {
        if (tag == 58) {
         parse_member_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_member_id_list;
        if (input->ExpectTag(66)) goto parse_topic;
        break;
      }

      // optional string topic = 8;
      case 8: {
        if (tag == 66) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DTG.DTGroupCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DTG.DTGroupCreateReq)
  return false;
#undef DO_
}

void DTGroupCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DTG.DTGroupCreateReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 4;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->group_type(), output);
  }

  // required string group_name = 5;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_name(), output);
  }

  // required string group_avatar = 6;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_avatar(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 7;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->member_id_list(i), output);
  }

  // optional string topic = 8;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DTG.DTGroupCreateReq)
}

int DTGroupCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 4;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required string group_name = 5;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 6;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // optional string topic = 8;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem member_id_list = 7;
  total_size += 1 * this->member_id_list_size();
  for (int i = 0; i < this->member_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTGroupCreateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DTGroupCreateReq*>(&from));
}

void DTGroupCreateReq::MergeFrom(const DTGroupCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DTGroupCreateReq::CopyFrom(const DTGroupCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTGroupCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->member_id_list())) return false;
  return true;
}

void DTGroupCreateReq::Swap(DTGroupCreateReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(topic_, other->topic_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DTGroupCreateReq::GetTypeName() const {
  return "IM.DTG.DTGroupCreateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int DTGroupCreateRsp::kResultCodeFieldNumber;
const int DTGroupCreateRsp::kCompanyIdFieldNumber;
const int DTGroupCreateRsp::kGroupIdFieldNumber;
const int DTGroupCreateRsp::kMemberIdListFieldNumber;
const int DTGroupCreateRsp::kMemberlistUpdateTimeFieldNumber;
const int DTGroupCreateRsp::kGroupTypeFieldNumber;
const int DTGroupCreateRsp::kUserIdFieldNumber;
const int DTGroupCreateRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

DTGroupCreateRsp::DTGroupCreateRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DTG.DTGroupCreateRsp)
}

void DTGroupCreateRsp::InitAsDefaultInstance() {
}

DTGroupCreateRsp::DTGroupCreateRsp(const DTGroupCreateRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DTG.DTGroupCreateRsp)
}

void DTGroupCreateRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 1;
  company_id_ = 0u;
  group_id_ = 0u;
  memberlist_update_time_ = GOOGLE_ULONGLONG(0);
  group_type_ = 1;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTGroupCreateRsp::~DTGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:IM.DTG.DTGroupCreateRsp)
  SharedDtor();
}

void DTGroupCreateRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DTGroupCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DTGroupCreateRsp& DTGroupCreateRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eD2G_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eD2G_2eproto();
#endif
  return *default_instance_;
}

DTGroupCreateRsp* DTGroupCreateRsp::default_instance_ = NULL;

DTGroupCreateRsp* DTGroupCreateRsp::New() const {
  return new DTGroupCreateRsp;
}

void DTGroupCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & 247) {
    result_code_ = 1;
    company_id_ = 0u;
    group_id_ = 0u;
    memberlist_update_time_ = GOOGLE_ULONGLONG(0);
    group_type_ = 1;
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DTGroupCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DTG.DTGroupCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.OptResultCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 2;
      case 2: {
        if (tag == 16) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem member_id_list = 4;
      case 4: {
        if (tag == 34) {
         parse_member_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_id_list;
        if (input->ExpectTag(40)) goto parse_memberlist_update_time;
        break;
      }

      // required uint64 memberlist_update_time = 5;
      case 5: {
        if (tag == 40) {
         parse_memberlist_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberlist_update_time_)));
          set_has_memberlist_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 6;
      case 6: {
        if (tag == 48) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DTG.DTGroupCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DTG.DTGroupCreateRsp)
  return false;
#undef DO_
}

void DTGroupCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DTG.DTGroupCreateRsp)
  // required .IM.BaseDefine.OptResultCode result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // required uint32 company_id = 2;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->company_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 4;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->member_id_list(i), output);
  }

  // required uint64 memberlist_update_time = 5;
  if (has_memberlist_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->memberlist_update_time(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 6;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->group_type(), output);
  }

  // required uint32 user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DTG.DTGroupCreateRsp)
}

int DTGroupCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.OptResultCode result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required uint32 company_id = 2;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint64 memberlist_update_time = 5;
    if (has_memberlist_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberlist_update_time());
    }

    // required .IM.BaseDefine.GroupType group_type = 6;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem member_id_list = 4;
  total_size += 1 * this->member_id_list_size();
  for (int i = 0; i < this->member_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DTGroupCreateRsp*>(&from));
}

void DTGroupCreateRsp::MergeFrom(const DTGroupCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_memberlist_update_time()) {
      set_memberlist_update_time(from.memberlist_update_time());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DTGroupCreateRsp::CopyFrom(const DTGroupCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTGroupCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000077) != 0x00000077) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->member_id_list())) return false;
  return true;
}

void DTGroupCreateRsp::Swap(DTGroupCreateRsp* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(memberlist_update_time_, other->memberlist_update_time_);
    std::swap(group_type_, other->group_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DTGroupCreateRsp::GetTypeName() const {
  return "IM.DTG.DTGroupCreateRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DTGMsg::kMsgDataFieldNumber;
const int DTGMsg::kMemberIdListFieldNumber;
const int DTGMsg::kAttachDataFieldNumber;
#endif  // !_MSC_VER

DTGMsg::DTGMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DTG.DTGMsg)
}

void DTGMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_data_ = const_cast< ::IM::BaseDefine::MsgData*>(
      ::IM::BaseDefine::MsgData::internal_default_instance());
#else
  msg_data_ = const_cast< ::IM::BaseDefine::MsgData*>(&::IM::BaseDefine::MsgData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  member_id_list_ = const_cast< ::IM::BaseDefine::UserIdItem*>(
      ::IM::BaseDefine::UserIdItem::internal_default_instance());
#else
  member_id_list_ = const_cast< ::IM::BaseDefine::UserIdItem*>(&::IM::BaseDefine::UserIdItem::default_instance());
#endif
}

DTGMsg::DTGMsg(const DTGMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DTG.DTGMsg)
}

void DTGMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_data_ = NULL;
  member_id_list_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTGMsg::~DTGMsg() {
  // @@protoc_insertion_point(destructor:IM.DTG.DTGMsg)
  SharedDtor();
}

void DTGMsg::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_data_;
    delete member_id_list_;
  }
}

void DTGMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DTGMsg& DTGMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eD2G_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eD2G_2eproto();
#endif
  return *default_instance_;
}

DTGMsg* DTGMsg::default_instance_ = NULL;

DTGMsg* DTGMsg::New() const {
  return new DTGMsg;
}

void DTGMsg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_msg_data()) {
      if (msg_data_ != NULL) msg_data_->::IM::BaseDefine::MsgData::Clear();
    }
    if (has_member_id_list()) {
      if (member_id_list_ != NULL) member_id_list_->::IM::BaseDefine::UserIdItem::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DTGMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DTG.DTGMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.MsgData msg_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member_id_list;
        break;
      }

      // optional .IM.BaseDefine.UserIdItem member_id_list = 2;
      case 2: {
        if (tag == 18) {
         parse_member_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 11;
      case 11: {
        if (tag == 90) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DTG.DTGMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DTG.DTGMsg)
  return false;
#undef DO_
}

void DTGMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DTG.DTGMsg)
  // required .IM.BaseDefine.MsgData msg_data = 1;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg_data(), output);
  }

  // optional .IM.BaseDefine.UserIdItem member_id_list = 2;
  if (has_member_id_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->member_id_list(), output);
  }

  // optional bytes attach_data = 11;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DTG.DTGMsg)
}

int DTGMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.MsgData msg_data = 1;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_data());
    }

    // optional .IM.BaseDefine.UserIdItem member_id_list = 2;
    if (has_member_id_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id_list());
    }

    // optional bytes attach_data = 11;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTGMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DTGMsg*>(&from));
}

void DTGMsg::MergeFrom(const DTGMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_data()) {
      mutable_msg_data()->::IM::BaseDefine::MsgData::MergeFrom(from.msg_data());
    }
    if (from.has_member_id_list()) {
      mutable_member_id_list()->::IM::BaseDefine::UserIdItem::MergeFrom(from.member_id_list());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DTGMsg::CopyFrom(const DTGMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTGMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg_data()) {
    if (!this->msg_data().IsInitialized()) return false;
  }
  if (has_member_id_list()) {
    if (!this->member_id_list().IsInitialized()) return false;
  }
  return true;
}

void DTGMsg::Swap(DTGMsg* other) {
  if (other != this) {
    std::swap(msg_data_, other->msg_data_);
    std::swap(member_id_list_, other->member_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DTGMsg::GetTypeName() const {
  return "IM.DTG.DTGMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int DTGMsgList::kMsgListFieldNumber;
#endif  // !_MSC_VER

DTGMsgList::DTGMsgList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DTG.DTGMsgList)
}

void DTGMsgList::InitAsDefaultInstance() {
}

DTGMsgList::DTGMsgList(const DTGMsgList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DTG.DTGMsgList)
}

void DTGMsgList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTGMsgList::~DTGMsgList() {
  // @@protoc_insertion_point(destructor:IM.DTG.DTGMsgList)
  SharedDtor();
}

void DTGMsgList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DTGMsgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DTGMsgList& DTGMsgList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eD2G_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eD2G_2eproto();
#endif
  return *default_instance_;
}

DTGMsgList* DTGMsgList::default_instance_ = NULL;

DTGMsgList* DTGMsgList::New() const {
  return new DTGMsgList;
}

void DTGMsgList::Clear() {
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DTGMsgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DTG.DTGMsgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.DTG.DTGMsg msg_list = 1;
      case 1: {
        if (tag == 10) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DTG.DTGMsgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DTG.DTGMsgList)
  return false;
#undef DO_
}

void DTGMsgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DTG.DTGMsgList)
  // repeated .IM.DTG.DTGMsg msg_list = 1;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DTG.DTGMsgList)
}

int DTGMsgList::ByteSize() const {
  int total_size = 0;

  // repeated .IM.DTG.DTGMsg msg_list = 1;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTGMsgList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DTGMsgList*>(&from));
}

void DTGMsgList::MergeFrom(const DTGMsgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DTGMsgList::CopyFrom(const DTGMsgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTGMsgList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void DTGMsgList::Swap(DTGMsgList* other) {
  if (other != this) {
    msg_list_.Swap(&other->msg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DTGMsgList::GetTypeName() const {
  return "IM.DTG.DTGMsgList";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTG
}  // namespace IM

// @@protoc_insertion_point(global_scope)
