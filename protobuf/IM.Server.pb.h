// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#ifndef PROTOBUF_IM_2eServer_2eproto__INCLUDED
#define PROTOBUF_IM_2eServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eServer_2eproto();
void protobuf_AssignDesc_IM_2eServer_2eproto();
void protobuf_ShutdownFile_IM_2eServer_2eproto();

class RecentContactItem;
class IMStopReceivePacket;
class IMValidateReq;
class IMValidateRsp;
class IMGetDeviceTokenReq;
class IMGetDeviceTokenRsp;
class IMRoleSet;
class IMOnlineUserInfo;
class IMMsgServInfo;
class IMUserStatusUpdate;
class IMUserCntUpdate;
class IMServerKickUser;
class IMServerPCLoginStatusNotify;
class IMPushToUserReq;
class IMPushToUserRsp;
class IMGroupGetShieldReq;
class IMGroupGetShieldRsp;
class IMFileTransferReq;
class IMFileTransferRsp;
class IMFileServerIPReq;
class IMFileServerIPRsp;
class IMGetBuddyConfigReq;
class IMGetBuddyConfigRsp;
class IMLoginToSqlReq;
class IMLoginToSqlRsp;
class IMUsrStatBroadcoast;
class IMOptBuddyStorageReq;
class IMOptBuddyStorageRsp;
class IMBuddyStorageReq;
class IMBuddyStorageRsp;
class IMRecentContactStorageReq;
class IMRecentContactStorageRsp;
class IMBuddyReqInfoStorage;
class IMDelRecentContactReq;
class IMAlterPswdReq;
class IMAlterPswdRsp;
class IMReportOnlineInfo;
class IMReportChatInfo;
class IMGetUserRoleReq;
class IMUserRoleAuthorityRsp;
class IMAuthenticationReq;
class IMAuthenticationRsp;

// ===================================================================

class RecentContactItem : public ::google::protobuf::MessageLite {
 public:
  RecentContactItem();
  virtual ~RecentContactItem();

  RecentContactItem(const RecentContactItem& from);

  inline RecentContactItem& operator=(const RecentContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RecentContactItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RecentContactItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RecentContactItem* other);

  // implements Message ----------------------------------------------

  RecentContactItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RecentContactItem& from);
  void MergeFrom(const RecentContactItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Server.RecentContactItem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint64 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static RecentContactItem* default_instance_;
};
// -------------------------------------------------------------------

class IMStopReceivePacket : public ::google::protobuf::MessageLite {
 public:
  IMStopReceivePacket();
  virtual ~IMStopReceivePacket();

  IMStopReceivePacket(const IMStopReceivePacket& from);

  inline IMStopReceivePacket& operator=(const IMStopReceivePacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMStopReceivePacket& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMStopReceivePacket* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMStopReceivePacket* other);

  // implements Message ----------------------------------------------

  IMStopReceivePacket* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMStopReceivePacket& from);
  void MergeFrom(const IMStopReceivePacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMStopReceivePacket)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMStopReceivePacket* default_instance_;
};
// -------------------------------------------------------------------

class IMValidateReq : public ::google::protobuf::MessageLite {
 public:
  IMValidateReq();
  virtual ~IMValidateReq();

  IMValidateReq(const IMValidateReq& from);

  inline IMValidateReq& operator=(const IMValidateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMValidateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMValidateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMValidateReq* other);

  // implements Message ----------------------------------------------

  IMValidateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMValidateReq& from);
  void MergeFrom(const IMValidateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateReq)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* password_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMValidateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMValidateRsp : public ::google::protobuf::MessageLite {
 public:
  IMValidateRsp();
  virtual ~IMValidateRsp();

  IMValidateRsp(const IMValidateRsp& from);

  inline IMValidateRsp& operator=(const IMValidateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMValidateRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMValidateRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMValidateRsp* other);

  // implements Message ----------------------------------------------

  IMValidateRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMValidateRsp& from);
  void MergeFrom(const IMValidateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string result_string = 3;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional .IM.BaseDefine.UserInfo user_info = 4;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateRsp)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* result_string_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMValidateRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetDeviceTokenReq : public ::google::protobuf::MessageLite {
 public:
  IMGetDeviceTokenReq();
  virtual ~IMGetDeviceTokenReq();

  IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from);

  inline IMGetDeviceTokenReq& operator=(const IMGetDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetDeviceTokenReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetDeviceTokenReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetDeviceTokenReq* other);

  // implements Message ----------------------------------------------

  IMGetDeviceTokenReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetDeviceTokenReq& from);
  void MergeFrom(const IMGetDeviceTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 user_id = 1;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenReq)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetDeviceTokenReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetDeviceTokenRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetDeviceTokenRsp();
  virtual ~IMGetDeviceTokenRsp();

  IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from);

  inline IMGetDeviceTokenRsp& operator=(const IMGetDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetDeviceTokenRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetDeviceTokenRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetDeviceTokenRsp* other);

  // implements Message ----------------------------------------------

  IMGetDeviceTokenRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetDeviceTokenRsp& from);
  void MergeFrom(const IMGetDeviceTokenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  inline int user_token_info_size() const;
  inline void clear_user_token_info();
  static const int kUserTokenInfoFieldNumber = 1;
  inline const ::IM::BaseDefine::UserTokenInfo& user_token_info(int index) const;
  inline ::IM::BaseDefine::UserTokenInfo* mutable_user_token_info(int index);
  inline ::IM::BaseDefine::UserTokenInfo* add_user_token_info();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_info();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenRsp)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_info_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetDeviceTokenRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMRoleSet : public ::google::protobuf::MessageLite {
 public:
  IMRoleSet();
  virtual ~IMRoleSet();

  IMRoleSet(const IMRoleSet& from);

  inline IMRoleSet& operator=(const IMRoleSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRoleSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRoleSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRoleSet* other);

  // implements Message ----------------------------------------------

  IMRoleSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRoleSet& from);
  void MergeFrom(const IMRoleSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 master = 1;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 1;
  inline ::google::protobuf::uint32 master() const;
  inline void set_master(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMRoleSet)
 private:
  inline void set_has_master();
  inline void clear_has_master();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 master_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMRoleSet* default_instance_;
};
// -------------------------------------------------------------------

class IMOnlineUserInfo : public ::google::protobuf::MessageLite {
 public:
  IMOnlineUserInfo();
  virtual ~IMOnlineUserInfo();

  IMOnlineUserInfo(const IMOnlineUserInfo& from);

  inline IMOnlineUserInfo& operator=(const IMOnlineUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMOnlineUserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMOnlineUserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMOnlineUserInfo* other);

  // implements Message ----------------------------------------------

  IMOnlineUserInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMOnlineUserInfo& from);
  void MergeFrom(const IMOnlineUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  inline int user_stat_list_size() const;
  inline void clear_user_stat_list();
  static const int kUserStatListFieldNumber = 1;
  inline const ::IM::BaseDefine::ServerUserStat& user_stat_list(int index) const;
  inline ::IM::BaseDefine::ServerUserStat* mutable_user_stat_list(int index);
  inline ::IM::BaseDefine::ServerUserStat* add_user_stat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
      user_stat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
      mutable_user_stat_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMOnlineUserInfo)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat > user_stat_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMOnlineUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServInfo : public ::google::protobuf::MessageLite {
 public:
  IMMsgServInfo();
  virtual ~IMMsgServInfo();

  IMMsgServInfo(const IMMsgServInfo& from);

  inline IMMsgServInfo& operator=(const IMMsgServInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServInfo* other);

  // implements Message ----------------------------------------------

  IMMsgServInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServInfo& from);
  void MergeFrom(const IMMsgServInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip1 = 1;
  inline bool has_ip1() const;
  inline void clear_ip1();
  static const int kIp1FieldNumber = 1;
  inline const ::std::string& ip1() const;
  inline void set_ip1(const ::std::string& value);
  inline void set_ip1(const char* value);
  inline void set_ip1(const char* value, size_t size);
  inline ::std::string* mutable_ip1();
  inline ::std::string* release_ip1();
  inline void set_allocated_ip1(::std::string* ip1);

  // required string ip2 = 2;
  inline bool has_ip2() const;
  inline void clear_ip2();
  static const int kIp2FieldNumber = 2;
  inline const ::std::string& ip2() const;
  inline void set_ip2(const ::std::string& value);
  inline void set_ip2(const char* value);
  inline void set_ip2(const char* value, size_t size);
  inline ::std::string* mutable_ip2();
  inline ::std::string* release_ip2();
  inline void set_allocated_ip2(::std::string* ip2);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint32 max_conn_cnt = 4;
  inline bool has_max_conn_cnt() const;
  inline void clear_max_conn_cnt();
  static const int kMaxConnCntFieldNumber = 4;
  inline ::google::protobuf::uint32 max_conn_cnt() const;
  inline void set_max_conn_cnt(::google::protobuf::uint32 value);

  // required uint32 cur_conn_cnt = 5;
  inline bool has_cur_conn_cnt() const;
  inline void clear_cur_conn_cnt();
  static const int kCurConnCntFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_conn_cnt() const;
  inline void set_cur_conn_cnt(::google::protobuf::uint32 value);

  // required string host_name = 6;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 6;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const char* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // @@protoc_insertion_point(class_scope:IM.Server.IMMsgServInfo)
 private:
  inline void set_has_ip1();
  inline void clear_has_ip1();
  inline void set_has_ip2();
  inline void clear_has_ip2();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_max_conn_cnt();
  inline void clear_has_max_conn_cnt();
  inline void set_has_cur_conn_cnt();
  inline void clear_has_cur_conn_cnt();
  inline void set_has_host_name();
  inline void clear_has_host_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip1_;
  ::std::string* ip2_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 max_conn_cnt_;
  ::std::string* host_name_;
  ::google::protobuf::uint32 cur_conn_cnt_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMUserStatusUpdate : public ::google::protobuf::MessageLite {
 public:
  IMUserStatusUpdate();
  virtual ~IMUserStatusUpdate();

  IMUserStatusUpdate(const IMUserStatusUpdate& from);

  inline IMUserStatusUpdate& operator=(const IMUserStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserStatusUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserStatusUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserStatusUpdate* other);

  // implements Message ----------------------------------------------

  IMUserStatusUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserStatusUpdate& from);
  void MergeFrom(const IMUserStatusUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_status = 1;
  inline bool has_user_status() const;
  inline void clear_user_status();
  static const int kUserStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 user_status() const;
  inline void set_user_status(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ClientType client_type = 3;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserStatusUpdate)
 private:
  inline void set_has_user_status();
  inline void clear_has_user_status();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_client_type();
  inline void clear_has_client_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_status_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserStatusUpdate* default_instance_;
};
// -------------------------------------------------------------------

class IMUserCntUpdate : public ::google::protobuf::MessageLite {
 public:
  IMUserCntUpdate();
  virtual ~IMUserCntUpdate();

  IMUserCntUpdate(const IMUserCntUpdate& from);

  inline IMUserCntUpdate& operator=(const IMUserCntUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserCntUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserCntUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserCntUpdate* other);

  // implements Message ----------------------------------------------

  IMUserCntUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserCntUpdate& from);
  void MergeFrom(const IMUserCntUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_action = 1;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 1;
  inline ::google::protobuf::uint32 user_action() const;
  inline void set_user_action(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserCntUpdate)
 private:
  inline void set_has_user_action();
  inline void clear_has_user_action();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_action_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserCntUpdate* default_instance_;
};
// -------------------------------------------------------------------

class IMServerKickUser : public ::google::protobuf::MessageLite {
 public:
  IMServerKickUser();
  virtual ~IMServerKickUser();

  IMServerKickUser(const IMServerKickUser& from);

  inline IMServerKickUser& operator=(const IMServerKickUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMServerKickUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMServerKickUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMServerKickUser* other);

  // implements Message ----------------------------------------------

  IMServerKickUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMServerKickUser& from);
  void MergeFrom(const IMServerKickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ClientType client_type = 2;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // required uint32 reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerKickUser)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  ::google::protobuf::uint32 reason_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMServerKickUser* default_instance_;
};
// -------------------------------------------------------------------

class IMServerPCLoginStatusNotify : public ::google::protobuf::MessageLite {
 public:
  IMServerPCLoginStatusNotify();
  virtual ~IMServerPCLoginStatusNotify();

  IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from);

  inline IMServerPCLoginStatusNotify& operator=(const IMServerPCLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMServerPCLoginStatusNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMServerPCLoginStatusNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMServerPCLoginStatusNotify* other);

  // implements Message ----------------------------------------------

  IMServerPCLoginStatusNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMServerPCLoginStatusNotify& from);
  void MergeFrom(const IMServerPCLoginStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 login_status = 2;
  inline bool has_login_status() const;
  inline void clear_login_status();
  static const int kLoginStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 login_status() const;
  inline void set_login_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerPCLoginStatusNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_login_status();
  inline void clear_has_login_status();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 login_status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMServerPCLoginStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMPushToUserReq : public ::google::protobuf::MessageLite {
 public:
  IMPushToUserReq();
  virtual ~IMPushToUserReq();

  IMPushToUserReq(const IMPushToUserReq& from);

  inline IMPushToUserReq& operator=(const IMPushToUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushToUserReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushToUserReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushToUserReq* other);

  // implements Message ----------------------------------------------

  IMPushToUserReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushToUserReq& from);
  void MergeFrom(const IMPushToUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flash = 1;
  inline bool has_flash() const;
  inline void clear_flash();
  static const int kFlashFieldNumber = 1;
  inline const ::std::string& flash() const;
  inline void set_flash(const ::std::string& value);
  inline void set_flash(const char* value);
  inline void set_flash(const char* value, size_t size);
  inline ::std::string* mutable_flash();
  inline ::std::string* release_flash();
  inline void set_allocated_flash(::std::string* flash);

  // required string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  inline int user_token_list_size() const;
  inline void clear_user_token_list();
  static const int kUserTokenListFieldNumber = 3;
  inline const ::IM::BaseDefine::UserTokenInfo& user_token_list(int index) const;
  inline ::IM::BaseDefine::UserTokenInfo* mutable_user_token_list(int index);
  inline ::IM::BaseDefine::UserTokenInfo* add_user_token_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserReq)
 private:
  inline void set_has_flash();
  inline void clear_has_flash();
  inline void set_has_data();
  inline void clear_has_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* flash_;
  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMPushToUserReq* default_instance_;
};
// -------------------------------------------------------------------

class IMPushToUserRsp : public ::google::protobuf::MessageLite {
 public:
  IMPushToUserRsp();
  virtual ~IMPushToUserRsp();

  IMPushToUserRsp(const IMPushToUserRsp& from);

  inline IMPushToUserRsp& operator=(const IMPushToUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushToUserRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushToUserRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushToUserRsp* other);

  // implements Message ----------------------------------------------

  IMPushToUserRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushToUserRsp& from);
  void MergeFrom(const IMPushToUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  inline int push_result_list_size() const;
  inline void clear_push_result_list();
  static const int kPushResultListFieldNumber = 1;
  inline const ::IM::BaseDefine::PushResult& push_result_list(int index) const;
  inline ::IM::BaseDefine::PushResult* mutable_push_result_list(int index);
  inline ::IM::BaseDefine::PushResult* add_push_result_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
      push_result_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
      mutable_push_result_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserRsp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult > push_result_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMPushToUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupGetShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupGetShieldReq();
  virtual ~IMGroupGetShieldReq();

  IMGroupGetShieldReq(const IMGroupGetShieldReq& from);

  inline IMGroupGetShieldReq& operator=(const IMGroupGetShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupGetShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupGetShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupGetShieldReq* other);

  // implements Message ----------------------------------------------

  IMGroupGetShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupGetShieldReq& from);
  void MergeFrom(const IMGroupGetShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 user_id = 2;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldReq)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGroupGetShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupGetShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupGetShieldRsp();
  virtual ~IMGroupGetShieldRsp();

  IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from);

  inline IMGroupGetShieldRsp& operator=(const IMGroupGetShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupGetShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupGetShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupGetShieldRsp* other);

  // implements Message ----------------------------------------------

  IMGroupGetShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupGetShieldRsp& from);
  void MergeFrom(const IMGroupGetShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  inline int shield_status_list_size() const;
  inline void clear_shield_status_list();
  static const int kShieldStatusListFieldNumber = 2;
  inline const ::IM::BaseDefine::ShieldStatus& shield_status_list(int index) const;
  inline ::IM::BaseDefine::ShieldStatus* mutable_shield_status_list(int index);
  inline ::IM::BaseDefine::ShieldStatus* add_shield_status_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
      shield_status_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
      mutable_shield_status_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldRsp)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus > shield_status_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGroupGetShieldRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMFileTransferReq : public ::google::protobuf::MessageLite {
 public:
  IMFileTransferReq();
  virtual ~IMFileTransferReq();

  IMFileTransferReq(const IMFileTransferReq& from);

  inline IMFileTransferReq& operator=(const IMFileTransferReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileTransferReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileTransferReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileTransferReq* other);

  // implements Message ----------------------------------------------

  IMFileTransferReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileTransferReq& from);
  void MergeFrom(const IMFileTransferReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required uint32 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.TransferFileType trans_mode = 5;
  inline bool has_trans_mode() const;
  inline void clear_trans_mode();
  static const int kTransModeFieldNumber = 5;
  inline ::IM::BaseDefine::TransferFileType trans_mode() const;
  inline void set_trans_mode(::IM::BaseDefine::TransferFileType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_trans_mode();
  inline void clear_has_trans_mode();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 file_size_;
  int trans_mode_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileTransferReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFileTransferRsp : public ::google::protobuf::MessageLite {
 public:
  IMFileTransferRsp();
  virtual ~IMFileTransferRsp();

  IMFileTransferRsp(const IMFileTransferRsp& from);

  inline IMFileTransferRsp& operator=(const IMFileTransferRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileTransferRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileTransferRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileTransferRsp* other);

  // implements Message ----------------------------------------------

  IMFileTransferRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileTransferRsp& from);
  void MergeFrom(const IMFileTransferRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint32 from_user_id = 2;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 3;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // optional string file_name = 4;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional uint32 file_size = 5;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // optional string task_id = 6;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 6;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // optional .IM.BaseDefine.TransferFileType trans_mode = 7;
  inline bool has_trans_mode() const;
  inline void clear_trans_mode();
  static const int kTransModeFieldNumber = 7;
  inline ::IM::BaseDefine::TransferFileType trans_mode() const;
  inline void set_trans_mode(::IM::BaseDefine::TransferFileType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_trans_mode();
  inline void clear_has_trans_mode();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 from_user_id_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 to_user_id_;
  ::google::protobuf::uint32 file_size_;
  ::std::string* task_id_;
  ::std::string* attach_data_;
  int trans_mode_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileTransferRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMFileServerIPReq : public ::google::protobuf::MessageLite {
 public:
  IMFileServerIPReq();
  virtual ~IMFileServerIPReq();

  IMFileServerIPReq(const IMFileServerIPReq& from);

  inline IMFileServerIPReq& operator=(const IMFileServerIPReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileServerIPReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileServerIPReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileServerIPReq* other);

  // implements Message ----------------------------------------------

  IMFileServerIPReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileServerIPReq& from);
  void MergeFrom(const IMFileServerIPReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPReq)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileServerIPReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFileServerIPRsp : public ::google::protobuf::MessageLite {
 public:
  IMFileServerIPRsp();
  virtual ~IMFileServerIPRsp();

  IMFileServerIPRsp(const IMFileServerIPRsp& from);

  inline IMFileServerIPRsp& operator=(const IMFileServerIPRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileServerIPRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileServerIPRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileServerIPRsp* other);

  // implements Message ----------------------------------------------

  IMFileServerIPRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileServerIPRsp& from);
  void MergeFrom(const IMFileServerIPRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  inline int ip_addr_list_size() const;
  inline void clear_ip_addr_list();
  static const int kIpAddrListFieldNumber = 1;
  inline const ::IM::BaseDefine::IpAddr& ip_addr_list(int index) const;
  inline ::IM::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  inline ::IM::BaseDefine::IpAddr* add_ip_addr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
      ip_addr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
      mutable_ip_addr_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPRsp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr > ip_addr_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileServerIPRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetBuddyConfigReq : public ::google::protobuf::MessageLite {
 public:
  IMGetBuddyConfigReq();
  virtual ~IMGetBuddyConfigReq();

  IMGetBuddyConfigReq(const IMGetBuddyConfigReq& from);

  inline IMGetBuddyConfigReq& operator=(const IMGetBuddyConfigReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetBuddyConfigReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetBuddyConfigReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetBuddyConfigReq* other);

  // implements Message ----------------------------------------------

  IMGetBuddyConfigReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetBuddyConfigReq& from);
  void MergeFrom(const IMGetBuddyConfigReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetBuddyConfigReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetBuddyConfigReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetBuddyConfigRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetBuddyConfigRsp();
  virtual ~IMGetBuddyConfigRsp();

  IMGetBuddyConfigRsp(const IMGetBuddyConfigRsp& from);

  inline IMGetBuddyConfigRsp& operator=(const IMGetBuddyConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetBuddyConfigRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetBuddyConfigRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetBuddyConfigRsp* other);

  // implements Message ----------------------------------------------

  IMGetBuddyConfigRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetBuddyConfigRsp& from);
  void MergeFrom(const IMGetBuddyConfigRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required bytes company_config = 5;
  inline bool has_company_config() const;
  inline void clear_company_config();
  static const int kCompanyConfigFieldNumber = 5;
  inline const ::std::string& company_config() const;
  inline void set_company_config(const ::std::string& value);
  inline void set_company_config(const char* value);
  inline void set_company_config(const void* value, size_t size);
  inline ::std::string* mutable_company_config();
  inline ::std::string* release_company_config();
  inline void set_allocated_company_config(::std::string* company_config);

  // required bytes user_config = 6;
  inline bool has_user_config() const;
  inline void clear_user_config();
  static const int kUserConfigFieldNumber = 6;
  inline const ::std::string& user_config() const;
  inline void set_user_config(const ::std::string& value);
  inline void set_user_config(const char* value);
  inline void set_user_config(const void* value, size_t size);
  inline ::std::string* mutable_user_config();
  inline ::std::string* release_user_config();
  inline void set_allocated_user_config(::std::string* user_config);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetBuddyConfigRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_company_config();
  inline void clear_has_company_config();
  inline void set_has_user_config();
  inline void clear_has_user_config();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* company_config_;
  ::std::string* user_config_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetBuddyConfigRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMLoginToSqlReq : public ::google::protobuf::MessageLite {
 public:
  IMLoginToSqlReq();
  virtual ~IMLoginToSqlReq();

  IMLoginToSqlReq(const IMLoginToSqlReq& from);

  inline IMLoginToSqlReq& operator=(const IMLoginToSqlReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLoginToSqlReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLoginToSqlReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLoginToSqlReq* other);

  // implements Message ----------------------------------------------

  IMLoginToSqlReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLoginToSqlReq& from);
  void MergeFrom(const IMLoginToSqlReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required .IM.BaseDefine.ClientType client_type = 4;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // required .IM.BaseDefine.UserStatType online_status = 5;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 5;
  inline ::IM::BaseDefine::UserStatType online_status() const;
  inline void set_online_status(::IM::BaseDefine::UserStatType value);

  // optional .IM.BaseDefine.LoginResultCode result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::IM::BaseDefine::LoginResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::LoginResultCode value);

  // optional .IM.BaseDefine.UserInfo user_info = 7;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 7;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // optional uint64 pc_last_offline_time = 8;
  inline bool has_pc_last_offline_time() const;
  inline void clear_pc_last_offline_time();
  static const int kPcLastOfflineTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 pc_last_offline_time() const;
  inline void set_pc_last_offline_time(::google::protobuf::uint64 value);

  // optional uint64 phone_last_offline_time = 9;
  inline bool has_phone_last_offline_time() const;
  inline void clear_phone_last_offline_time();
  static const int kPhoneLastOfflineTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 phone_last_offline_time() const;
  inline void set_phone_last_offline_time(::google::protobuf::uint64 value);

  // optional string client_ver = 10;
  inline bool has_client_ver() const;
  inline void clear_client_ver();
  static const int kClientVerFieldNumber = 10;
  inline const ::std::string& client_ver() const;
  inline void set_client_ver(const ::std::string& value);
  inline void set_client_ver(const char* value);
  inline void set_client_ver(const char* value, size_t size);
  inline ::std::string* mutable_client_ver();
  inline ::std::string* release_client_ver();
  inline void set_allocated_client_ver(::std::string* client_ver);

  // @@protoc_insertion_point(class_scope:IM.Server.IMLoginToSqlReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_pc_last_offline_time();
  inline void clear_has_pc_last_offline_time();
  inline void set_has_phone_last_offline_time();
  inline void clear_has_phone_last_offline_time();
  inline void set_has_client_ver();
  inline void clear_has_client_ver();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 company_id_;
  int client_type_;
  ::std::string* password_;
  int online_status_;
  int result_code_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::google::protobuf::uint64 pc_last_offline_time_;
  ::google::protobuf::uint64 phone_last_offline_time_;
  ::std::string* client_ver_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMLoginToSqlReq* default_instance_;
};
// -------------------------------------------------------------------

class IMLoginToSqlRsp : public ::google::protobuf::MessageLite {
 public:
  IMLoginToSqlRsp();
  virtual ~IMLoginToSqlRsp();

  IMLoginToSqlRsp(const IMLoginToSqlRsp& from);

  inline IMLoginToSqlRsp& operator=(const IMLoginToSqlRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLoginToSqlRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLoginToSqlRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLoginToSqlRsp* other);

  // implements Message ----------------------------------------------

  IMLoginToSqlRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLoginToSqlRsp& from);
  void MergeFrom(const IMLoginToSqlRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required .IM.BaseDefine.ClientType client_type = 4;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // required .IM.BaseDefine.UserStatType online_status = 5;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 5;
  inline ::IM::BaseDefine::UserStatType online_status() const;
  inline void set_online_status(::IM::BaseDefine::UserStatType value);

  // optional .IM.BaseDefine.LoginResultCode result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::IM::BaseDefine::LoginResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::LoginResultCode value);

  // optional .IM.BaseDefine.UserInfo user_info = 7;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 7;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // optional uint64 pc_last_offline_time = 8;
  inline bool has_pc_last_offline_time() const;
  inline void clear_pc_last_offline_time();
  static const int kPcLastOfflineTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 pc_last_offline_time() const;
  inline void set_pc_last_offline_time(::google::protobuf::uint64 value);

  // optional uint64 phone_last_offline_time = 9;
  inline bool has_phone_last_offline_time() const;
  inline void clear_phone_last_offline_time();
  static const int kPhoneLastOfflineTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 phone_last_offline_time() const;
  inline void set_phone_last_offline_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMLoginToSqlRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_pc_last_offline_time();
  inline void clear_has_pc_last_offline_time();
  inline void set_has_phone_last_offline_time();
  inline void clear_has_phone_last_offline_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 company_id_;
  int client_type_;
  ::std::string* password_;
  int online_status_;
  int result_code_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::google::protobuf::uint64 pc_last_offline_time_;
  ::google::protobuf::uint64 phone_last_offline_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMLoginToSqlRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUsrStatBroadcoast : public ::google::protobuf::MessageLite {
 public:
  IMUsrStatBroadcoast();
  virtual ~IMUsrStatBroadcoast();

  IMUsrStatBroadcoast(const IMUsrStatBroadcoast& from);

  inline IMUsrStatBroadcoast& operator=(const IMUsrStatBroadcoast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsrStatBroadcoast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsrStatBroadcoast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsrStatBroadcoast* other);

  // implements Message ----------------------------------------------

  IMUsrStatBroadcoast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsrStatBroadcoast& from);
  void MergeFrom(const IMUsrStatBroadcoast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 connsvr_id = 3;
  inline bool has_connsvr_id() const;
  inline void clear_connsvr_id();
  static const int kConnsvrIdFieldNumber = 3;
  inline ::google::protobuf::uint32 connsvr_id() const;
  inline void set_connsvr_id(::google::protobuf::uint32 value);

  // required uint32 connsocket_index = 4;
  inline bool has_connsocket_index() const;
  inline void clear_connsocket_index();
  static const int kConnsocketIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 connsocket_index() const;
  inline void set_connsocket_index(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ClientType client_type = 5;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 5;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // required .IM.BaseDefine.UserStatType client_stat = 6;
  inline bool has_client_stat() const;
  inline void clear_client_stat();
  static const int kClientStatFieldNumber = 6;
  inline ::IM::BaseDefine::UserStatType client_stat() const;
  inline void set_client_stat(::IM::BaseDefine::UserStatType value);

  // required uint64 update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUsrStatBroadcoast)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_connsvr_id();
  inline void clear_has_connsvr_id();
  inline void set_has_connsocket_index();
  inline void clear_has_connsocket_index();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_client_stat();
  inline void clear_has_client_stat();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 connsvr_id_;
  ::google::protobuf::uint32 connsocket_index_;
  int client_type_;
  int client_stat_;
  ::google::protobuf::uint64 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUsrStatBroadcoast* default_instance_;
};
// -------------------------------------------------------------------

class IMOptBuddyStorageReq : public ::google::protobuf::MessageLite {
 public:
  IMOptBuddyStorageReq();
  virtual ~IMOptBuddyStorageReq();

  IMOptBuddyStorageReq(const IMOptBuddyStorageReq& from);

  inline IMOptBuddyStorageReq& operator=(const IMOptBuddyStorageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMOptBuddyStorageReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMOptBuddyStorageReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMOptBuddyStorageReq* other);

  // implements Message ----------------------------------------------

  IMOptBuddyStorageReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMOptBuddyStorageReq& from);
  void MergeFrom(const IMOptBuddyStorageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint64 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // required string opt_remark = 7;
  inline bool has_opt_remark() const;
  inline void clear_opt_remark();
  static const int kOptRemarkFieldNumber = 7;
  inline const ::std::string& opt_remark() const;
  inline void set_opt_remark(const ::std::string& value);
  inline void set_opt_remark(const char* value);
  inline void set_opt_remark(const char* value, size_t size);
  inline ::std::string* mutable_opt_remark();
  inline ::std::string* release_opt_remark();
  inline void set_allocated_opt_remark(::std::string* opt_remark);

  // required bool req_stat = 8;
  inline bool has_req_stat() const;
  inline void clear_req_stat();
  static const int kReqStatFieldNumber = 8;
  inline bool req_stat() const;
  inline void set_req_stat(bool value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMOptBuddyStorageReq)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_opt_remark();
  inline void clear_has_opt_remark();
  inline void set_has_req_stat();
  inline void clear_has_req_stat();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 create_time_;
  ::std::string* opt_remark_;
  bool req_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMOptBuddyStorageReq* default_instance_;
};
// -------------------------------------------------------------------

class IMOptBuddyStorageRsp : public ::google::protobuf::MessageLite {
 public:
  IMOptBuddyStorageRsp();
  virtual ~IMOptBuddyStorageRsp();

  IMOptBuddyStorageRsp(const IMOptBuddyStorageRsp& from);

  inline IMOptBuddyStorageRsp& operator=(const IMOptBuddyStorageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMOptBuddyStorageRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMOptBuddyStorageRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMOptBuddyStorageRsp* other);

  // implements Message ----------------------------------------------

  IMOptBuddyStorageRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMOptBuddyStorageRsp& from);
  void MergeFrom(const IMOptBuddyStorageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint64 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // required string opt_remark = 7;
  inline bool has_opt_remark() const;
  inline void clear_opt_remark();
  static const int kOptRemarkFieldNumber = 7;
  inline const ::std::string& opt_remark() const;
  inline void set_opt_remark(const ::std::string& value);
  inline void set_opt_remark(const char* value);
  inline void set_opt_remark(const char* value, size_t size);
  inline ::std::string* mutable_opt_remark();
  inline ::std::string* release_opt_remark();
  inline void set_allocated_opt_remark(::std::string* opt_remark);

  // required bool req_stat = 8;
  inline bool has_req_stat() const;
  inline void clear_req_stat();
  static const int kReqStatFieldNumber = 8;
  inline bool req_stat() const;
  inline void set_req_stat(bool value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMOptBuddyStorageRsp)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_opt_remark();
  inline void clear_has_opt_remark();
  inline void set_has_req_stat();
  inline void clear_has_req_stat();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 create_time_;
  ::std::string* opt_remark_;
  bool req_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMOptBuddyStorageRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMBuddyStorageReq : public ::google::protobuf::MessageLite {
 public:
  IMBuddyStorageReq();
  virtual ~IMBuddyStorageReq();

  IMBuddyStorageReq(const IMBuddyStorageReq& from);

  inline IMBuddyStorageReq& operator=(const IMBuddyStorageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBuddyStorageReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBuddyStorageReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBuddyStorageReq* other);

  // implements Message ----------------------------------------------

  IMBuddyStorageReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBuddyStorageReq& from);
  void MergeFrom(const IMBuddyStorageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.BuddyOptType opt_type = 5;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 5;
  inline ::IM::BaseDefine::BuddyOptType opt_type() const;
  inline void set_opt_type(::IM::BaseDefine::BuddyOptType value);

  // required uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.OptResultCode result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::IM::BaseDefine::OptResultCode result() const;
  inline void set_result(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMBuddyStorageReq)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 update_time_;
  int opt_type_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMBuddyStorageReq* default_instance_;
};
// -------------------------------------------------------------------

class IMBuddyStorageRsp : public ::google::protobuf::MessageLite {
 public:
  IMBuddyStorageRsp();
  virtual ~IMBuddyStorageRsp();

  IMBuddyStorageRsp(const IMBuddyStorageRsp& from);

  inline IMBuddyStorageRsp& operator=(const IMBuddyStorageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBuddyStorageRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBuddyStorageRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBuddyStorageRsp* other);

  // implements Message ----------------------------------------------

  IMBuddyStorageRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBuddyStorageRsp& from);
  void MergeFrom(const IMBuddyStorageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.BuddyOptType opt_type = 5;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 5;
  inline ::IM::BaseDefine::BuddyOptType opt_type() const;
  inline void set_opt_type(::IM::BaseDefine::BuddyOptType value);

  // required uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.OptResultCode result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::IM::BaseDefine::OptResultCode result() const;
  inline void set_result(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMBuddyStorageRsp)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 update_time_;
  int opt_type_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMBuddyStorageRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMRecentContactStorageReq : public ::google::protobuf::MessageLite {
 public:
  IMRecentContactStorageReq();
  virtual ~IMRecentContactStorageReq();

  IMRecentContactStorageReq(const IMRecentContactStorageReq& from);

  inline IMRecentContactStorageReq& operator=(const IMRecentContactStorageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRecentContactStorageReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRecentContactStorageReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRecentContactStorageReq* other);

  // implements Message ----------------------------------------------

  IMRecentContactStorageReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRecentContactStorageReq& from);
  void MergeFrom(const IMRecentContactStorageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // repeated .IM.Server.RecentContactItem recent_contact = 3;
  inline int recent_contact_size() const;
  inline void clear_recent_contact();
  static const int kRecentContactFieldNumber = 3;
  inline const ::IM::Server::RecentContactItem& recent_contact(int index) const;
  inline ::IM::Server::RecentContactItem* mutable_recent_contact(int index);
  inline ::IM::Server::RecentContactItem* add_recent_contact();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >&
      recent_contact() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >*
      mutable_recent_contact();

  // @@protoc_insertion_point(class_scope:IM.Server.IMRecentContactStorageReq)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem > recent_contact_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMRecentContactStorageReq* default_instance_;
};
// -------------------------------------------------------------------

class IMRecentContactStorageRsp : public ::google::protobuf::MessageLite {
 public:
  IMRecentContactStorageRsp();
  virtual ~IMRecentContactStorageRsp();

  IMRecentContactStorageRsp(const IMRecentContactStorageRsp& from);

  inline IMRecentContactStorageRsp& operator=(const IMRecentContactStorageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRecentContactStorageRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRecentContactStorageRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRecentContactStorageRsp* other);

  // implements Message ----------------------------------------------

  IMRecentContactStorageRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRecentContactStorageRsp& from);
  void MergeFrom(const IMRecentContactStorageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // repeated .IM.Server.RecentContactItem recent_contact = 3;
  inline int recent_contact_size() const;
  inline void clear_recent_contact();
  static const int kRecentContactFieldNumber = 3;
  inline const ::IM::Server::RecentContactItem& recent_contact(int index) const;
  inline ::IM::Server::RecentContactItem* mutable_recent_contact(int index);
  inline ::IM::Server::RecentContactItem* add_recent_contact();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >&
      recent_contact() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >*
      mutable_recent_contact();

  // @@protoc_insertion_point(class_scope:IM.Server.IMRecentContactStorageRsp)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem > recent_contact_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMRecentContactStorageRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMBuddyReqInfoStorage : public ::google::protobuf::MessageLite {
 public:
  IMBuddyReqInfoStorage();
  virtual ~IMBuddyReqInfoStorage();

  IMBuddyReqInfoStorage(const IMBuddyReqInfoStorage& from);

  inline IMBuddyReqInfoStorage& operator=(const IMBuddyReqInfoStorage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBuddyReqInfoStorage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBuddyReqInfoStorage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBuddyReqInfoStorage* other);

  // implements Message ----------------------------------------------

  IMBuddyReqInfoStorage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBuddyReqInfoStorage& from);
  void MergeFrom(const IMBuddyReqInfoStorage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 company_id = 2;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint32 req_stat = 5;
  inline bool has_req_stat() const;
  inline void clear_req_stat();
  static const int kReqStatFieldNumber = 5;
  inline ::google::protobuf::uint32 req_stat() const;
  inline void set_req_stat(::google::protobuf::uint32 value);

  // required uint64 req_time = 6;
  inline bool has_req_time() const;
  inline void clear_req_time();
  static const int kReqTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 req_time() const;
  inline void set_req_time(::google::protobuf::uint64 value);

  // required string remark = 7;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 7;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // @@protoc_insertion_point(class_scope:IM.Server.IMBuddyReqInfoStorage)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_req_stat();
  inline void clear_has_req_stat();
  inline void set_has_req_time();
  inline void clear_has_req_time();
  inline void set_has_remark();
  inline void clear_has_remark();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 req_time_;
  ::std::string* remark_;
  ::google::protobuf::uint32 req_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMBuddyReqInfoStorage* default_instance_;
};
// -------------------------------------------------------------------

class IMDelRecentContactReq : public ::google::protobuf::MessageLite {
 public:
  IMDelRecentContactReq();
  virtual ~IMDelRecentContactReq();

  IMDelRecentContactReq(const IMDelRecentContactReq& from);

  inline IMDelRecentContactReq& operator=(const IMDelRecentContactReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDelRecentContactReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDelRecentContactReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDelRecentContactReq* other);

  // implements Message ----------------------------------------------

  IMDelRecentContactReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDelRecentContactReq& from);
  void MergeFrom(const IMDelRecentContactReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.BuddyOptType opt_type = 5;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 5;
  inline ::IM::BaseDefine::BuddyOptType opt_type() const;
  inline void set_opt_type(::IM::BaseDefine::BuddyOptType value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMDelRecentContactReq)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  int opt_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMDelRecentContactReq* default_instance_;
};
// -------------------------------------------------------------------

class IMAlterPswdReq : public ::google::protobuf::MessageLite {
 public:
  IMAlterPswdReq();
  virtual ~IMAlterPswdReq();

  IMAlterPswdReq(const IMAlterPswdReq& from);

  inline IMAlterPswdReq& operator=(const IMAlterPswdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAlterPswdReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAlterPswdReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAlterPswdReq* other);

  // implements Message ----------------------------------------------

  IMAlterPswdReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAlterPswdReq& from);
  void MergeFrom(const IMAlterPswdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string new_pswd = 3;
  inline bool has_new_pswd() const;
  inline void clear_new_pswd();
  static const int kNewPswdFieldNumber = 3;
  inline const ::std::string& new_pswd() const;
  inline void set_new_pswd(const ::std::string& value);
  inline void set_new_pswd(const char* value);
  inline void set_new_pswd(const char* value, size_t size);
  inline ::std::string* mutable_new_pswd();
  inline ::std::string* release_new_pswd();
  inline void set_allocated_new_pswd(::std::string* new_pswd);

  // required string old_pswd = 4;
  inline bool has_old_pswd() const;
  inline void clear_old_pswd();
  static const int kOldPswdFieldNumber = 4;
  inline const ::std::string& old_pswd() const;
  inline void set_old_pswd(const ::std::string& value);
  inline void set_old_pswd(const char* value);
  inline void set_old_pswd(const char* value, size_t size);
  inline ::std::string* mutable_old_pswd();
  inline ::std::string* release_old_pswd();
  inline void set_allocated_old_pswd(::std::string* old_pswd);

  // @@protoc_insertion_point(class_scope:IM.Server.IMAlterPswdReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_new_pswd();
  inline void clear_has_new_pswd();
  inline void set_has_old_pswd();
  inline void clear_has_old_pswd();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* new_pswd_;
  ::std::string* old_pswd_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMAlterPswdReq* default_instance_;
};
// -------------------------------------------------------------------

class IMAlterPswdRsp : public ::google::protobuf::MessageLite {
 public:
  IMAlterPswdRsp();
  virtual ~IMAlterPswdRsp();

  IMAlterPswdRsp(const IMAlterPswdRsp& from);

  inline IMAlterPswdRsp& operator=(const IMAlterPswdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAlterPswdRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAlterPswdRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAlterPswdRsp* other);

  // implements Message ----------------------------------------------

  IMAlterPswdRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAlterPswdRsp& from);
  void MergeFrom(const IMAlterPswdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMAlterPswdRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMAlterPswdRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMReportOnlineInfo : public ::google::protobuf::MessageLite {
 public:
  IMReportOnlineInfo();
  virtual ~IMReportOnlineInfo();

  IMReportOnlineInfo(const IMReportOnlineInfo& from);

  inline IMReportOnlineInfo& operator=(const IMReportOnlineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMReportOnlineInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMReportOnlineInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMReportOnlineInfo* other);

  // implements Message ----------------------------------------------

  IMReportOnlineInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMReportOnlineInfo& from);
  void MergeFrom(const IMReportOnlineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // required uint32 online_count = 3;
  inline bool has_online_count() const;
  inline void clear_online_count();
  static const int kOnlineCountFieldNumber = 3;
  inline ::google::protobuf::uint32 online_count() const;
  inline void set_online_count(::google::protobuf::uint32 value);

  // required uint32 online_peek = 4;
  inline bool has_online_peek() const;
  inline void clear_online_peek();
  static const int kOnlinePeekFieldNumber = 4;
  inline ::google::protobuf::uint32 online_peek() const;
  inline void set_online_peek(::google::protobuf::uint32 value);

  // required uint64 update_time = 5;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMReportOnlineInfo)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_online_count();
  inline void clear_has_online_count();
  inline void set_has_online_peek();
  inline void clear_has_online_peek();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 node_id_;
  ::google::protobuf::uint32 online_count_;
  ::google::protobuf::uint32 online_peek_;
  ::google::protobuf::uint64 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMReportOnlineInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMReportChatInfo : public ::google::protobuf::MessageLite {
 public:
  IMReportChatInfo();
  virtual ~IMReportChatInfo();

  IMReportChatInfo(const IMReportChatInfo& from);

  inline IMReportChatInfo& operator=(const IMReportChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMReportChatInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMReportChatInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMReportChatInfo* other);

  // implements Message ----------------------------------------------

  IMReportChatInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMReportChatInfo& from);
  void MergeFrom(const IMReportChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required uint32 node_id = 3;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // required uint64 online_count = 4;
  inline bool has_online_count() const;
  inline void clear_online_count();
  static const int kOnlineCountFieldNumber = 4;
  inline ::google::protobuf::uint64 online_count() const;
  inline void set_online_count(::google::protobuf::uint64 value);

  // required uint64 offline_count = 5;
  inline bool has_offline_count() const;
  inline void clear_offline_count();
  static const int kOfflineCountFieldNumber = 5;
  inline ::google::protobuf::uint64 offline_count() const;
  inline void set_offline_count(::google::protobuf::uint64 value);

  // required uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMReportChatInfo)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_online_count();
  inline void clear_has_online_count();
  inline void set_has_offline_count();
  inline void clear_has_offline_count();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  int session_type_;
  ::google::protobuf::uint64 online_count_;
  ::google::protobuf::uint64 offline_count_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::uint32 node_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMReportChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMGetUserRoleReq : public ::google::protobuf::MessageLite {
 public:
  IMGetUserRoleReq();
  virtual ~IMGetUserRoleReq();

  IMGetUserRoleReq(const IMGetUserRoleReq& from);

  inline IMGetUserRoleReq& operator=(const IMGetUserRoleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetUserRoleReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetUserRoleReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetUserRoleReq* other);

  // implements Message ----------------------------------------------

  IMGetUserRoleReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetUserRoleReq& from);
  void MergeFrom(const IMGetUserRoleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetUserRoleReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetUserRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUserRoleAuthorityRsp : public ::google::protobuf::MessageLite {
 public:
  IMUserRoleAuthorityRsp();
  virtual ~IMUserRoleAuthorityRsp();

  IMUserRoleAuthorityRsp(const IMUserRoleAuthorityRsp& from);

  inline IMUserRoleAuthorityRsp& operator=(const IMUserRoleAuthorityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserRoleAuthorityRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserRoleAuthorityRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserRoleAuthorityRsp* other);

  // implements Message ----------------------------------------------

  IMUserRoleAuthorityRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserRoleAuthorityRsp& from);
  void MergeFrom(const IMUserRoleAuthorityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.IMUserRole role = 1;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline const ::IM::BaseDefine::IMUserRole& role(int index) const;
  inline ::IM::BaseDefine::IMUserRole* mutable_role(int index);
  inline ::IM::BaseDefine::IMUserRole* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >*
      mutable_role();

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserRoleAuthorityRsp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole > role_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserRoleAuthorityRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMAuthenticationReq : public ::google::protobuf::MessageLite {
 public:
  IMAuthenticationReq();
  virtual ~IMAuthenticationReq();

  IMAuthenticationReq(const IMAuthenticationReq& from);

  inline IMAuthenticationReq& operator=(const IMAuthenticationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAuthenticationReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAuthenticationReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAuthenticationReq* other);

  // implements Message ----------------------------------------------

  IMAuthenticationReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAuthenticationReq& from);
  void MergeFrom(const IMAuthenticationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ServiceID type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::IM::BaseDefine::ServiceID type() const;
  inline void set_type(::IM::BaseDefine::ServiceID value);

  // required uint32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMAuthenticationReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_node_id();
  inline void clear_has_node_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 node_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMAuthenticationReq* default_instance_;
};
// -------------------------------------------------------------------

class IMAuthenticationRsp : public ::google::protobuf::MessageLite {
 public:
  IMAuthenticationRsp();
  virtual ~IMAuthenticationRsp();

  IMAuthenticationRsp(const IMAuthenticationRsp& from);

  inline IMAuthenticationRsp& operator=(const IMAuthenticationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAuthenticationRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAuthenticationRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAuthenticationRsp* other);

  // implements Message ----------------------------------------------

  IMAuthenticationRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAuthenticationRsp& from);
  void MergeFrom(const IMAuthenticationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ServiceID type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::IM::BaseDefine::ServiceID type() const;
  inline void set_type(::IM::BaseDefine::ServiceID value);

  // required uint32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // required uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMAuthenticationRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 node_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMAuthenticationRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// RecentContactItem

// required uint32 company_id = 1;
inline bool RecentContactItem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecentContactItem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecentContactItem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecentContactItem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 RecentContactItem::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.RecentContactItem.company_id)
  return company_id_;
}
inline void RecentContactItem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.RecentContactItem.company_id)
}

// required uint32 user_id = 2;
inline bool RecentContactItem::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecentContactItem::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecentContactItem::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecentContactItem::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RecentContactItem::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.RecentContactItem.user_id)
  return user_id_;
}
inline void RecentContactItem::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.RecentContactItem.user_id)
}

// required uint64 update_time = 3;
inline bool RecentContactItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecentContactItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecentContactItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecentContactItem::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 RecentContactItem::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.RecentContactItem.update_time)
  return update_time_;
}
inline void RecentContactItem::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.RecentContactItem.update_time)
}

// -------------------------------------------------------------------

// IMStopReceivePacket

// required uint32 result = 1;
inline bool IMStopReceivePacket::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMStopReceivePacket::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMStopReceivePacket::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMStopReceivePacket::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMStopReceivePacket::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMStopReceivePacket.result)
  return result_;
}
inline void IMStopReceivePacket::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMStopReceivePacket.result)
}

// -------------------------------------------------------------------

// IMValidateReq

// required string user_name = 1;
inline bool IMValidateReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMValidateReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMValidateReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMValidateReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMValidateReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.user_name)
  return *user_name_;
}
inline void IMValidateReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.user_name)
}
inline void IMValidateReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.user_name)
}
inline void IMValidateReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.user_name)
}
inline ::std::string* IMValidateReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.user_name)
  return user_name_;
}
inline ::std::string* IMValidateReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.user_name)
}

// required string password = 2;
inline bool IMValidateReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMValidateReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMValidateReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMValidateReq::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& IMValidateReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.password)
  return *password_;
}
inline void IMValidateReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.password)
}
inline void IMValidateReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.password)
}
inline void IMValidateReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.password)
}
inline ::std::string* IMValidateReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.password)
  return password_;
}
inline ::std::string* IMValidateReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.password)
}

// optional bytes attach_data = 20;
inline bool IMValidateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMValidateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMValidateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMValidateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMValidateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.attach_data)
  return *attach_data_;
}
inline void IMValidateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.attach_data)
}
inline void IMValidateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.attach_data)
}
inline void IMValidateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.attach_data)
}
inline ::std::string* IMValidateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMValidateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.attach_data)
}

// -------------------------------------------------------------------

// IMValidateRsp

// required string user_name = 1;
inline bool IMValidateRsp::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMValidateRsp::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMValidateRsp::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMValidateRsp::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMValidateRsp::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_name)
  return *user_name_;
}
inline void IMValidateRsp::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.user_name)
}
inline void IMValidateRsp::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.user_name)
}
inline void IMValidateRsp::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.user_name)
}
inline ::std::string* IMValidateRsp::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_name)
  return user_name_;
}
inline ::std::string* IMValidateRsp::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_name)
}

// required uint32 result_code = 2;
inline bool IMValidateRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMValidateRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMValidateRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMValidateRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMValidateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_code)
  return result_code_;
}
inline void IMValidateRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_code)
}

// optional string result_string = 3;
inline bool IMValidateRsp::has_result_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMValidateRsp::set_has_result_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMValidateRsp::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMValidateRsp::clear_result_string() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_->clear();
  }
  clear_has_result_string();
}
inline const ::std::string& IMValidateRsp::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_string)
  return *result_string_;
}
inline void IMValidateRsp::set_result_string(const ::std::string& value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_string)
}
inline void IMValidateRsp::set_result_string(const char* value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.result_string)
}
inline void IMValidateRsp::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.result_string)
}
inline ::std::string* IMValidateRsp::mutable_result_string() {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.result_string)
  return result_string_;
}
inline ::std::string* IMValidateRsp::release_result_string() {
  clear_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_string_;
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateRsp::set_allocated_result_string(::std::string* result_string) {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (result_string) {
    set_has_result_string();
    result_string_ = result_string;
  } else {
    clear_has_result_string();
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.result_string)
}

// optional .IM.BaseDefine.UserInfo user_info = 4;
inline bool IMValidateRsp::has_user_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMValidateRsp::set_has_user_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMValidateRsp::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMValidateRsp::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMValidateRsp::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMValidateRsp::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_info)
}

// optional bytes attach_data = 20;
inline bool IMValidateRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMValidateRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMValidateRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMValidateRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMValidateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.attach_data)
  return *attach_data_;
}
inline void IMValidateRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.attach_data)
}
inline void IMValidateRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.attach_data)
}
inline void IMValidateRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.attach_data)
}
inline ::std::string* IMValidateRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMValidateRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenReq

// repeated uint32 user_id = 1;
inline int IMGetDeviceTokenReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGetDeviceTokenReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGetDeviceTokenReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.user_id)
  return user_id_.Get(index);
}
inline void IMGetDeviceTokenReq::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline void IMGetDeviceTokenReq::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGetDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGetDeviceTokenReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return &user_id_;
}

// optional bytes attach_data = 20;
inline bool IMGetDeviceTokenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetDeviceTokenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetDeviceTokenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetDeviceTokenReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.attach_data)
  return *attach_data_;
}
inline void IMGetDeviceTokenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline void IMGetDeviceTokenReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline void IMGetDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline ::std::string* IMGetDeviceTokenReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetDeviceTokenReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenRsp

// repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
inline int IMGetDeviceTokenRsp::user_token_info_size() const {
  return user_token_info_.size();
}
inline void IMGetDeviceTokenRsp::clear_user_token_info() {
  user_token_info_.Clear();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGetDeviceTokenRsp::user_token_info(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::mutable_user_token_info(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::add_user_token_info() {
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMGetDeviceTokenRsp::user_token_info() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMGetDeviceTokenRsp::mutable_user_token_info() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return &user_token_info_;
}

// optional bytes attach_data = 20;
inline bool IMGetDeviceTokenRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetDeviceTokenRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetDeviceTokenRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetDeviceTokenRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return *attach_data_;
}
inline void IMGetDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline void IMGetDeviceTokenRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline void IMGetDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline ::std::string* IMGetDeviceTokenRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetDeviceTokenRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRoleSet

// required uint32 master = 1;
inline bool IMRoleSet::has_master() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRoleSet::set_has_master() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRoleSet::clear_has_master() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRoleSet::clear_master() {
  master_ = 0u;
  clear_has_master();
}
inline ::google::protobuf::uint32 IMRoleSet::master() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRoleSet.master)
  return master_;
}
inline void IMRoleSet::set_master(::google::protobuf::uint32 value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRoleSet.master)
}

// -------------------------------------------------------------------

// IMOnlineUserInfo

// repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
inline int IMOnlineUserInfo::user_stat_list_size() const {
  return user_stat_list_.size();
}
inline void IMOnlineUserInfo::clear_user_stat_list() {
  user_stat_list_.Clear();
}
inline const ::IM::BaseDefine::ServerUserStat& IMOnlineUserInfo::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Get(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Mutable(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::add_user_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
IMOnlineUserInfo::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
IMOnlineUserInfo::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return &user_stat_list_;
}

// -------------------------------------------------------------------

// IMMsgServInfo

// required string ip1 = 1;
inline bool IMMsgServInfo::has_ip1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServInfo::set_has_ip1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServInfo::clear_has_ip1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServInfo::clear_ip1() {
  if (ip1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_->clear();
  }
  clear_has_ip1();
}
inline const ::std::string& IMMsgServInfo::ip1() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip1)
  return *ip1_;
}
inline void IMMsgServInfo::set_ip1(const ::std::string& value) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip1)
}
inline void IMMsgServInfo::set_ip1(const char* value) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ip1)
}
inline void IMMsgServInfo::set_ip1(const char* value, size_t size) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ip1)
}
inline ::std::string* IMMsgServInfo::mutable_ip1() {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip1)
  return ip1_;
}
inline ::std::string* IMMsgServInfo::release_ip1() {
  clear_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip1_;
    ip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_ip1(::std::string* ip1) {
  if (ip1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip1_;
  }
  if (ip1) {
    set_has_ip1();
    ip1_ = ip1;
  } else {
    clear_has_ip1();
    ip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip1)
}

// required string ip2 = 2;
inline bool IMMsgServInfo::has_ip2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServInfo::set_has_ip2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServInfo::clear_has_ip2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServInfo::clear_ip2() {
  if (ip2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_->clear();
  }
  clear_has_ip2();
}
inline const ::std::string& IMMsgServInfo::ip2() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip2)
  return *ip2_;
}
inline void IMMsgServInfo::set_ip2(const ::std::string& value) {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  ip2_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip2)
}
inline void IMMsgServInfo::set_ip2(const char* value) {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  ip2_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ip2)
}
inline void IMMsgServInfo::set_ip2(const char* value, size_t size) {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  ip2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ip2)
}
inline ::std::string* IMMsgServInfo::mutable_ip2() {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip2)
  return ip2_;
}
inline ::std::string* IMMsgServInfo::release_ip2() {
  clear_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip2_;
    ip2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_ip2(::std::string* ip2) {
  if (ip2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip2_;
  }
  if (ip2) {
    set_has_ip2();
    ip2_ = ip2;
  } else {
    clear_has_ip2();
    ip2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip2)
}

// required uint32 port = 3;
inline bool IMMsgServInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgServInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgServInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgServInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IMMsgServInfo::port() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.port)
  return port_;
}
inline void IMMsgServInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.port)
}

// required uint32 max_conn_cnt = 4;
inline bool IMMsgServInfo::has_max_conn_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgServInfo::set_has_max_conn_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgServInfo::clear_has_max_conn_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgServInfo::clear_max_conn_cnt() {
  max_conn_cnt_ = 0u;
  clear_has_max_conn_cnt();
}
inline ::google::protobuf::uint32 IMMsgServInfo::max_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.max_conn_cnt)
  return max_conn_cnt_;
}
inline void IMMsgServInfo::set_max_conn_cnt(::google::protobuf::uint32 value) {
  set_has_max_conn_cnt();
  max_conn_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.max_conn_cnt)
}

// required uint32 cur_conn_cnt = 5;
inline bool IMMsgServInfo::has_cur_conn_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMMsgServInfo::set_has_cur_conn_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMMsgServInfo::clear_has_cur_conn_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMMsgServInfo::clear_cur_conn_cnt() {
  cur_conn_cnt_ = 0u;
  clear_has_cur_conn_cnt();
}
inline ::google::protobuf::uint32 IMMsgServInfo::cur_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.cur_conn_cnt)
  return cur_conn_cnt_;
}
inline void IMMsgServInfo::set_cur_conn_cnt(::google::protobuf::uint32 value) {
  set_has_cur_conn_cnt();
  cur_conn_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.cur_conn_cnt)
}

// required string host_name = 6;
inline bool IMMsgServInfo::has_host_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMMsgServInfo::set_has_host_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMMsgServInfo::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMMsgServInfo::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& IMMsgServInfo::host_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.host_name)
  return *host_name_;
}
inline void IMMsgServInfo::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.host_name)
}
inline void IMMsgServInfo::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.host_name)
}
inline void IMMsgServInfo::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.host_name)
}
inline ::std::string* IMMsgServInfo::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.host_name)
  return host_name_;
}
inline ::std::string* IMMsgServInfo::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.host_name)
}

// -------------------------------------------------------------------

// IMUserStatusUpdate

// required uint32 user_status = 1;
inline bool IMUserStatusUpdate::has_user_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserStatusUpdate::set_has_user_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserStatusUpdate::clear_has_user_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserStatusUpdate::clear_user_status() {
  user_status_ = 0u;
  clear_has_user_status();
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::user_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_status)
  return user_status_;
}
inline void IMUserStatusUpdate::set_user_status(::google::protobuf::uint32 value) {
  set_has_user_status();
  user_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_status)
}

// required uint32 user_id = 2;
inline bool IMUserStatusUpdate::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserStatusUpdate::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserStatusUpdate::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserStatusUpdate::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_id)
  return user_id_;
}
inline void IMUserStatusUpdate::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_id)
}

// required .IM.BaseDefine.ClientType client_type = 3;
inline bool IMUserStatusUpdate::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUserStatusUpdate::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUserStatusUpdate::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUserStatusUpdate::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMUserStatusUpdate::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMUserStatusUpdate::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.client_type)
}

// -------------------------------------------------------------------

// IMUserCntUpdate

// required uint32 user_action = 1;
inline bool IMUserCntUpdate::has_user_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserCntUpdate::set_has_user_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserCntUpdate::clear_has_user_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserCntUpdate::clear_user_action() {
  user_action_ = 0u;
  clear_has_user_action();
}
inline ::google::protobuf::uint32 IMUserCntUpdate::user_action() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_action)
  return user_action_;
}
inline void IMUserCntUpdate::set_user_action(::google::protobuf::uint32 value) {
  set_has_user_action();
  user_action_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_action)
}

// required uint32 user_id = 2;
inline bool IMUserCntUpdate::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserCntUpdate::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserCntUpdate::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserCntUpdate::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUserCntUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_id)
  return user_id_;
}
inline void IMUserCntUpdate::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_id)
}

// -------------------------------------------------------------------

// IMServerKickUser

// required uint32 user_id = 1;
inline bool IMServerKickUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMServerKickUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMServerKickUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMServerKickUser::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMServerKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.user_id)
  return user_id_;
}
inline void IMServerKickUser::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.user_id)
}

// required .IM.BaseDefine.ClientType client_type = 2;
inline bool IMServerKickUser::has_client_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMServerKickUser::set_has_client_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMServerKickUser::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMServerKickUser::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMServerKickUser::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMServerKickUser::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.client_type)
}

// required uint32 reason = 3;
inline bool IMServerKickUser::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMServerKickUser::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMServerKickUser::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMServerKickUser::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 IMServerKickUser::reason() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.reason)
  return reason_;
}
inline void IMServerKickUser::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.reason)
}

// -------------------------------------------------------------------

// IMServerPCLoginStatusNotify

// required uint32 user_id = 1;
inline bool IMServerPCLoginStatusNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMServerPCLoginStatusNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMServerPCLoginStatusNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMServerPCLoginStatusNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMServerPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.user_id)
  return user_id_;
}
inline void IMServerPCLoginStatusNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.user_id)
}

// required uint32 login_status = 2;
inline bool IMServerPCLoginStatusNotify::has_login_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMServerPCLoginStatusNotify::set_has_login_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMServerPCLoginStatusNotify::clear_has_login_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMServerPCLoginStatusNotify::clear_login_status() {
  login_status_ = 0u;
  clear_has_login_status();
}
inline ::google::protobuf::uint32 IMServerPCLoginStatusNotify::login_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.login_status)
  return login_status_;
}
inline void IMServerPCLoginStatusNotify::set_login_status(::google::protobuf::uint32 value) {
  set_has_login_status();
  login_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.login_status)
}

// -------------------------------------------------------------------

// IMPushToUserReq

// required string flash = 1;
inline bool IMPushToUserReq::has_flash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushToUserReq::set_has_flash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushToUserReq::clear_has_flash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushToUserReq::clear_flash() {
  if (flash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_->clear();
  }
  clear_has_flash();
}
inline const ::std::string& IMPushToUserReq::flash() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.flash)
  return *flash_;
}
inline void IMPushToUserReq::set_flash(const ::std::string& value) {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  flash_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.flash)
}
inline void IMPushToUserReq::set_flash(const char* value) {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  flash_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMPushToUserReq.flash)
}
inline void IMPushToUserReq::set_flash(const char* value, size_t size) {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  flash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMPushToUserReq.flash)
}
inline ::std::string* IMPushToUserReq::mutable_flash() {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.flash)
  return flash_;
}
inline ::std::string* IMPushToUserReq::release_flash() {
  clear_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flash_;
    flash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushToUserReq::set_allocated_flash(::std::string* flash) {
  if (flash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flash_;
  }
  if (flash) {
    set_has_flash();
    flash_ = flash;
  } else {
    clear_has_flash();
    flash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.flash)
}

// required string data = 2;
inline bool IMPushToUserReq::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushToUserReq::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushToUserReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushToUserReq::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& IMPushToUserReq::data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.data)
  return *data_;
}
inline void IMPushToUserReq::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.data)
}
inline void IMPushToUserReq::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMPushToUserReq.data)
}
inline void IMPushToUserReq::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMPushToUserReq.data)
}
inline ::std::string* IMPushToUserReq::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.data)
  return data_;
}
inline ::std::string* IMPushToUserReq::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushToUserReq::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.data)
}

// repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
inline int IMPushToUserReq::user_token_list_size() const {
  return user_token_list_.size();
}
inline void IMPushToUserReq::clear_user_token_list() {
  user_token_list_.Clear();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMPushToUserReq::user_token_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::mutable_user_token_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::add_user_token_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMPushToUserReq::user_token_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMPushToUserReq::mutable_user_token_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserReq.user_token_list)
  return &user_token_list_;
}

// -------------------------------------------------------------------

// IMPushToUserRsp

// repeated .IM.BaseDefine.PushResult push_result_list = 1;
inline int IMPushToUserRsp::push_result_list_size() const {
  return push_result_list_.size();
}
inline void IMPushToUserRsp::clear_push_result_list() {
  push_result_list_.Clear();
}
inline const ::IM::BaseDefine::PushResult& IMPushToUserRsp::push_result_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Get(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::mutable_push_result_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Mutable(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::add_push_result_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
IMPushToUserRsp::push_result_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
IMPushToUserRsp::mutable_push_result_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserRsp.push_result_list)
  return &push_result_list_;
}

// -------------------------------------------------------------------

// IMGroupGetShieldReq

// required uint32 group_id = 1;
inline bool IMGroupGetShieldReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupGetShieldReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupGetShieldReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupGetShieldReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupGetShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.group_id)
  return group_id_;
}
inline void IMGroupGetShieldReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.group_id)
}

// repeated uint32 user_id = 2;
inline int IMGroupGetShieldReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupGetShieldReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupGetShieldReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.user_id)
  return user_id_.Get(index);
}
inline void IMGroupGetShieldReq::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.user_id)
}
inline void IMGroupGetShieldReq::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupGetShieldReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupGetShieldReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldReq.user_id)
  return &user_id_;
}

// optional bytes attach_data = 20;
inline bool IMGroupGetShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupGetShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupGetShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupGetShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupGetShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.attach_data)
  return *attach_data_;
}
inline void IMGroupGetShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline void IMGroupGetShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline void IMGroupGetShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline ::std::string* IMGroupGetShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupGetShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupGetShieldRsp

// required uint32 group_id = 1;
inline bool IMGroupGetShieldRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupGetShieldRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupGetShieldRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupGetShieldRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupGetShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.group_id)
  return group_id_;
}
inline void IMGroupGetShieldRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.group_id)
}

// repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
inline int IMGroupGetShieldRsp::shield_status_list_size() const {
  return shield_status_list_.size();
}
inline void IMGroupGetShieldRsp::clear_shield_status_list() {
  shield_status_list_.Clear();
}
inline const ::IM::BaseDefine::ShieldStatus& IMGroupGetShieldRsp::shield_status_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Get(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::mutable_shield_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Mutable(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::add_shield_status_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
IMGroupGetShieldRsp::shield_status_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
IMGroupGetShieldRsp::mutable_shield_status_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return &shield_status_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupGetShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupGetShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupGetShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupGetShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupGetShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupGetShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline void IMGroupGetShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline void IMGroupGetShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline ::std::string* IMGroupGetShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupGetShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferReq

// required uint32 from_user_id = 1;
inline bool IMFileTransferReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFileTransferReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFileTransferReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFileTransferReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMFileTransferReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.from_user_id)
  return from_user_id_;
}
inline void IMFileTransferReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool IMFileTransferReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFileTransferReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFileTransferReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFileTransferReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMFileTransferReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.to_user_id)
  return to_user_id_;
}
inline void IMFileTransferReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.to_user_id)
}

// required string file_name = 3;
inline bool IMFileTransferReq::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFileTransferReq::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFileTransferReq::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFileTransferReq::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& IMFileTransferReq::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_name)
  return *file_name_;
}
inline void IMFileTransferReq::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_name)
}
inline void IMFileTransferReq::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferReq.file_name)
}
inline void IMFileTransferReq::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferReq.file_name)
}
inline ::std::string* IMFileTransferReq::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.file_name)
  return file_name_;
}
inline ::std::string* IMFileTransferReq::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.file_name)
}

// required uint32 file_size = 4;
inline bool IMFileTransferReq::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFileTransferReq::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFileTransferReq::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFileTransferReq::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 IMFileTransferReq::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_size)
  return file_size_;
}
inline void IMFileTransferReq::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_size)
}

// required .IM.BaseDefine.TransferFileType trans_mode = 5;
inline bool IMFileTransferReq::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMFileTransferReq::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMFileTransferReq::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMFileTransferReq::clear_trans_mode() {
  trans_mode_ = 1;
  clear_has_trans_mode();
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline void IMFileTransferReq::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.trans_mode)
}

// optional bytes attach_data = 20;
inline bool IMFileTransferReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMFileTransferReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMFileTransferReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMFileTransferReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFileTransferReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.attach_data)
  return *attach_data_;
}
inline void IMFileTransferReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.attach_data)
}
inline void IMFileTransferReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferReq.attach_data)
}
inline void IMFileTransferReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferReq.attach_data)
}
inline ::std::string* IMFileTransferReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMFileTransferReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferRsp

// required uint32 result_code = 1;
inline bool IMFileTransferRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFileTransferRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFileTransferRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFileTransferRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMFileTransferRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.result_code)
  return result_code_;
}
inline void IMFileTransferRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.result_code)
}

// required uint32 from_user_id = 2;
inline bool IMFileTransferRsp::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFileTransferRsp::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFileTransferRsp::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFileTransferRsp::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMFileTransferRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.from_user_id)
  return from_user_id_;
}
inline void IMFileTransferRsp::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.from_user_id)
}

// required uint32 to_user_id = 3;
inline bool IMFileTransferRsp::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFileTransferRsp::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFileTransferRsp::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFileTransferRsp::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMFileTransferRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.to_user_id)
  return to_user_id_;
}
inline void IMFileTransferRsp::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.to_user_id)
}

// optional string file_name = 4;
inline bool IMFileTransferRsp::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFileTransferRsp::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFileTransferRsp::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFileTransferRsp::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& IMFileTransferRsp::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_name)
  return *file_name_;
}
inline void IMFileTransferRsp::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_name)
}
inline void IMFileTransferRsp::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.file_name)
}
inline void IMFileTransferRsp::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.file_name)
}
inline ::std::string* IMFileTransferRsp::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.file_name)
  return file_name_;
}
inline ::std::string* IMFileTransferRsp::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferRsp::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.file_name)
}

// optional uint32 file_size = 5;
inline bool IMFileTransferRsp::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMFileTransferRsp::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMFileTransferRsp::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMFileTransferRsp::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 IMFileTransferRsp::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_size)
  return file_size_;
}
inline void IMFileTransferRsp::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_size)
}

// optional string task_id = 6;
inline bool IMFileTransferRsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMFileTransferRsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMFileTransferRsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMFileTransferRsp::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& IMFileTransferRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.task_id)
  return *task_id_;
}
inline void IMFileTransferRsp::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.task_id)
}
inline void IMFileTransferRsp::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.task_id)
}
inline void IMFileTransferRsp::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.task_id)
}
inline ::std::string* IMFileTransferRsp::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.task_id)
  return task_id_;
}
inline ::std::string* IMFileTransferRsp::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferRsp::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.task_id)
}

// optional .IM.BaseDefine.TransferFileType trans_mode = 7;
inline bool IMFileTransferRsp::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMFileTransferRsp::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMFileTransferRsp::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMFileTransferRsp::clear_trans_mode() {
  trans_mode_ = 1;
  clear_has_trans_mode();
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferRsp::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline void IMFileTransferRsp::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.trans_mode)
}

// optional bytes attach_data = 20;
inline bool IMFileTransferRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMFileTransferRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMFileTransferRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMFileTransferRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFileTransferRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.attach_data)
  return *attach_data_;
}
inline void IMFileTransferRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.attach_data)
}
inline void IMFileTransferRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.attach_data)
}
inline void IMFileTransferRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.attach_data)
}
inline ::std::string* IMFileTransferRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMFileTransferRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileServerIPReq

// -------------------------------------------------------------------

// IMFileServerIPRsp

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
inline int IMFileServerIPRsp::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline void IMFileServerIPRsp::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
inline const ::IM::BaseDefine::IpAddr& IMFileServerIPRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Get(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileServerIPRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileServerIPRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return &ip_addr_list_;
}

// -------------------------------------------------------------------

// IMGetBuddyConfigReq

// required uint32 company_id = 1;
inline bool IMGetBuddyConfigReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetBuddyConfigReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetBuddyConfigReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetBuddyConfigReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGetBuddyConfigReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetBuddyConfigReq.company_id)
  return company_id_;
}
inline void IMGetBuddyConfigReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetBuddyConfigReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGetBuddyConfigReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetBuddyConfigReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetBuddyConfigReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetBuddyConfigReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetBuddyConfigReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetBuddyConfigReq.user_id)
  return user_id_;
}
inline void IMGetBuddyConfigReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetBuddyConfigReq.user_id)
}

// -------------------------------------------------------------------

// IMGetBuddyConfigRsp

// required uint32 company_id = 1;
inline bool IMGetBuddyConfigRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetBuddyConfigRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetBuddyConfigRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetBuddyConfigRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGetBuddyConfigRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetBuddyConfigRsp.company_id)
  return company_id_;
}
inline void IMGetBuddyConfigRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetBuddyConfigRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMGetBuddyConfigRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetBuddyConfigRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetBuddyConfigRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetBuddyConfigRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetBuddyConfigRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetBuddyConfigRsp.user_id)
  return user_id_;
}
inline void IMGetBuddyConfigRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetBuddyConfigRsp.user_id)
}

// required bytes company_config = 5;
inline bool IMGetBuddyConfigRsp::has_company_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetBuddyConfigRsp::set_has_company_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetBuddyConfigRsp::clear_has_company_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetBuddyConfigRsp::clear_company_config() {
  if (company_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_config_->clear();
  }
  clear_has_company_config();
}
inline const ::std::string& IMGetBuddyConfigRsp::company_config() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetBuddyConfigRsp.company_config)
  return *company_config_;
}
inline void IMGetBuddyConfigRsp::set_company_config(const ::std::string& value) {
  set_has_company_config();
  if (company_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_config_ = new ::std::string;
  }
  company_config_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetBuddyConfigRsp.company_config)
}
inline void IMGetBuddyConfigRsp::set_company_config(const char* value) {
  set_has_company_config();
  if (company_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_config_ = new ::std::string;
  }
  company_config_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetBuddyConfigRsp.company_config)
}
inline void IMGetBuddyConfigRsp::set_company_config(const void* value, size_t size) {
  set_has_company_config();
  if (company_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_config_ = new ::std::string;
  }
  company_config_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetBuddyConfigRsp.company_config)
}
inline ::std::string* IMGetBuddyConfigRsp::mutable_company_config() {
  set_has_company_config();
  if (company_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_config_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetBuddyConfigRsp.company_config)
  return company_config_;
}
inline ::std::string* IMGetBuddyConfigRsp::release_company_config() {
  clear_has_company_config();
  if (company_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_config_;
    company_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetBuddyConfigRsp::set_allocated_company_config(::std::string* company_config) {
  if (company_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_config_;
  }
  if (company_config) {
    set_has_company_config();
    company_config_ = company_config;
  } else {
    clear_has_company_config();
    company_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetBuddyConfigRsp.company_config)
}

// required bytes user_config = 6;
inline bool IMGetBuddyConfigRsp::has_user_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetBuddyConfigRsp::set_has_user_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetBuddyConfigRsp::clear_has_user_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetBuddyConfigRsp::clear_user_config() {
  if (user_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_config_->clear();
  }
  clear_has_user_config();
}
inline const ::std::string& IMGetBuddyConfigRsp::user_config() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetBuddyConfigRsp.user_config)
  return *user_config_;
}
inline void IMGetBuddyConfigRsp::set_user_config(const ::std::string& value) {
  set_has_user_config();
  if (user_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_config_ = new ::std::string;
  }
  user_config_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetBuddyConfigRsp.user_config)
}
inline void IMGetBuddyConfigRsp::set_user_config(const char* value) {
  set_has_user_config();
  if (user_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_config_ = new ::std::string;
  }
  user_config_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetBuddyConfigRsp.user_config)
}
inline void IMGetBuddyConfigRsp::set_user_config(const void* value, size_t size) {
  set_has_user_config();
  if (user_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_config_ = new ::std::string;
  }
  user_config_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetBuddyConfigRsp.user_config)
}
inline ::std::string* IMGetBuddyConfigRsp::mutable_user_config() {
  set_has_user_config();
  if (user_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_config_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetBuddyConfigRsp.user_config)
  return user_config_;
}
inline ::std::string* IMGetBuddyConfigRsp::release_user_config() {
  clear_has_user_config();
  if (user_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_config_;
    user_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetBuddyConfigRsp::set_allocated_user_config(::std::string* user_config) {
  if (user_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_config_;
  }
  if (user_config) {
    set_has_user_config();
    user_config_ = user_config;
  } else {
    clear_has_user_config();
    user_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetBuddyConfigRsp.user_config)
}

// -------------------------------------------------------------------

// IMLoginToSqlReq

// required uint32 company_id = 1;
inline bool IMLoginToSqlReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginToSqlReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginToSqlReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginToSqlReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMLoginToSqlReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.company_id)
  return company_id_;
}
inline void IMLoginToSqlReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.company_id)
}

// required string user_name = 2;
inline bool IMLoginToSqlReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginToSqlReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginToSqlReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginToSqlReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMLoginToSqlReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.user_name)
  return *user_name_;
}
inline void IMLoginToSqlReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.user_name)
}
inline void IMLoginToSqlReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMLoginToSqlReq.user_name)
}
inline void IMLoginToSqlReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMLoginToSqlReq.user_name)
}
inline ::std::string* IMLoginToSqlReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlReq.user_name)
  return user_name_;
}
inline ::std::string* IMLoginToSqlReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginToSqlReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlReq.user_name)
}

// required string password = 3;
inline bool IMLoginToSqlReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginToSqlReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginToSqlReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginToSqlReq::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& IMLoginToSqlReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.password)
  return *password_;
}
inline void IMLoginToSqlReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.password)
}
inline void IMLoginToSqlReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMLoginToSqlReq.password)
}
inline void IMLoginToSqlReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMLoginToSqlReq.password)
}
inline ::std::string* IMLoginToSqlReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlReq.password)
  return password_;
}
inline ::std::string* IMLoginToSqlReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginToSqlReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlReq.password)
}

// required .IM.BaseDefine.ClientType client_type = 4;
inline bool IMLoginToSqlReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginToSqlReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginToSqlReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginToSqlReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMLoginToSqlReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMLoginToSqlReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.client_type)
}

// required .IM.BaseDefine.UserStatType online_status = 5;
inline bool IMLoginToSqlReq::has_online_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginToSqlReq::set_has_online_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginToSqlReq::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginToSqlReq::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMLoginToSqlReq::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMLoginToSqlReq::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.online_status)
}

// optional .IM.BaseDefine.LoginResultCode result_code = 6;
inline bool IMLoginToSqlReq::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMLoginToSqlReq::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMLoginToSqlReq::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMLoginToSqlReq::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::LoginResultCode IMLoginToSqlReq::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.result_code)
  return static_cast< ::IM::BaseDefine::LoginResultCode >(result_code_);
}
inline void IMLoginToSqlReq::set_result_code(::IM::BaseDefine::LoginResultCode value) {
  assert(::IM::BaseDefine::LoginResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.result_code)
}

// optional .IM.BaseDefine.UserInfo user_info = 7;
inline bool IMLoginToSqlReq::has_user_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMLoginToSqlReq::set_has_user_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMLoginToSqlReq::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMLoginToSqlReq::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMLoginToSqlReq::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMLoginToSqlReq::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlReq.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMLoginToSqlReq::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMLoginToSqlReq::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlReq.user_info)
}

// optional uint64 pc_last_offline_time = 8;
inline bool IMLoginToSqlReq::has_pc_last_offline_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMLoginToSqlReq::set_has_pc_last_offline_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMLoginToSqlReq::clear_has_pc_last_offline_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMLoginToSqlReq::clear_pc_last_offline_time() {
  pc_last_offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_pc_last_offline_time();
}
inline ::google::protobuf::uint64 IMLoginToSqlReq::pc_last_offline_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.pc_last_offline_time)
  return pc_last_offline_time_;
}
inline void IMLoginToSqlReq::set_pc_last_offline_time(::google::protobuf::uint64 value) {
  set_has_pc_last_offline_time();
  pc_last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.pc_last_offline_time)
}

// optional uint64 phone_last_offline_time = 9;
inline bool IMLoginToSqlReq::has_phone_last_offline_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMLoginToSqlReq::set_has_phone_last_offline_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMLoginToSqlReq::clear_has_phone_last_offline_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMLoginToSqlReq::clear_phone_last_offline_time() {
  phone_last_offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_phone_last_offline_time();
}
inline ::google::protobuf::uint64 IMLoginToSqlReq::phone_last_offline_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.phone_last_offline_time)
  return phone_last_offline_time_;
}
inline void IMLoginToSqlReq::set_phone_last_offline_time(::google::protobuf::uint64 value) {
  set_has_phone_last_offline_time();
  phone_last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.phone_last_offline_time)
}

// optional string client_ver = 10;
inline bool IMLoginToSqlReq::has_client_ver() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMLoginToSqlReq::set_has_client_ver() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMLoginToSqlReq::clear_has_client_ver() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMLoginToSqlReq::clear_client_ver() {
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_->clear();
  }
  clear_has_client_ver();
}
inline const ::std::string& IMLoginToSqlReq::client_ver() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlReq.client_ver)
  return *client_ver_;
}
inline void IMLoginToSqlReq::set_client_ver(const ::std::string& value) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlReq.client_ver)
}
inline void IMLoginToSqlReq::set_client_ver(const char* value) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMLoginToSqlReq.client_ver)
}
inline void IMLoginToSqlReq::set_client_ver(const char* value, size_t size) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMLoginToSqlReq.client_ver)
}
inline ::std::string* IMLoginToSqlReq::mutable_client_ver() {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlReq.client_ver)
  return client_ver_;
}
inline ::std::string* IMLoginToSqlReq::release_client_ver() {
  clear_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_ver_;
    client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginToSqlReq::set_allocated_client_ver(::std::string* client_ver) {
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ver_;
  }
  if (client_ver) {
    set_has_client_ver();
    client_ver_ = client_ver;
  } else {
    clear_has_client_ver();
    client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlReq.client_ver)
}

// -------------------------------------------------------------------

// IMLoginToSqlRsp

// required uint32 company_id = 1;
inline bool IMLoginToSqlRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginToSqlRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginToSqlRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginToSqlRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMLoginToSqlRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.company_id)
  return company_id_;
}
inline void IMLoginToSqlRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.company_id)
}

// required string user_name = 2;
inline bool IMLoginToSqlRsp::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginToSqlRsp::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginToSqlRsp::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginToSqlRsp::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMLoginToSqlRsp::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.user_name)
  return *user_name_;
}
inline void IMLoginToSqlRsp::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.user_name)
}
inline void IMLoginToSqlRsp::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMLoginToSqlRsp.user_name)
}
inline void IMLoginToSqlRsp::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMLoginToSqlRsp.user_name)
}
inline ::std::string* IMLoginToSqlRsp::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlRsp.user_name)
  return user_name_;
}
inline ::std::string* IMLoginToSqlRsp::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginToSqlRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlRsp.user_name)
}

// required string password = 3;
inline bool IMLoginToSqlRsp::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginToSqlRsp::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginToSqlRsp::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginToSqlRsp::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& IMLoginToSqlRsp::password() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.password)
  return *password_;
}
inline void IMLoginToSqlRsp::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.password)
}
inline void IMLoginToSqlRsp::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMLoginToSqlRsp.password)
}
inline void IMLoginToSqlRsp::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMLoginToSqlRsp.password)
}
inline ::std::string* IMLoginToSqlRsp::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlRsp.password)
  return password_;
}
inline ::std::string* IMLoginToSqlRsp::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMLoginToSqlRsp::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlRsp.password)
}

// required .IM.BaseDefine.ClientType client_type = 4;
inline bool IMLoginToSqlRsp::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginToSqlRsp::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginToSqlRsp::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginToSqlRsp::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMLoginToSqlRsp::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMLoginToSqlRsp::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.client_type)
}

// required .IM.BaseDefine.UserStatType online_status = 5;
inline bool IMLoginToSqlRsp::has_online_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginToSqlRsp::set_has_online_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginToSqlRsp::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginToSqlRsp::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMLoginToSqlRsp::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMLoginToSqlRsp::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.online_status)
}

// optional .IM.BaseDefine.LoginResultCode result_code = 6;
inline bool IMLoginToSqlRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMLoginToSqlRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMLoginToSqlRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMLoginToSqlRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::LoginResultCode IMLoginToSqlRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.result_code)
  return static_cast< ::IM::BaseDefine::LoginResultCode >(result_code_);
}
inline void IMLoginToSqlRsp::set_result_code(::IM::BaseDefine::LoginResultCode value) {
  assert(::IM::BaseDefine::LoginResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.result_code)
}

// optional .IM.BaseDefine.UserInfo user_info = 7;
inline bool IMLoginToSqlRsp::has_user_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMLoginToSqlRsp::set_has_user_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMLoginToSqlRsp::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMLoginToSqlRsp::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMLoginToSqlRsp::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMLoginToSqlRsp::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Server.IMLoginToSqlRsp.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMLoginToSqlRsp::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMLoginToSqlRsp::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMLoginToSqlRsp.user_info)
}

// optional uint64 pc_last_offline_time = 8;
inline bool IMLoginToSqlRsp::has_pc_last_offline_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMLoginToSqlRsp::set_has_pc_last_offline_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMLoginToSqlRsp::clear_has_pc_last_offline_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMLoginToSqlRsp::clear_pc_last_offline_time() {
  pc_last_offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_pc_last_offline_time();
}
inline ::google::protobuf::uint64 IMLoginToSqlRsp::pc_last_offline_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.pc_last_offline_time)
  return pc_last_offline_time_;
}
inline void IMLoginToSqlRsp::set_pc_last_offline_time(::google::protobuf::uint64 value) {
  set_has_pc_last_offline_time();
  pc_last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.pc_last_offline_time)
}

// optional uint64 phone_last_offline_time = 9;
inline bool IMLoginToSqlRsp::has_phone_last_offline_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMLoginToSqlRsp::set_has_phone_last_offline_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMLoginToSqlRsp::clear_has_phone_last_offline_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMLoginToSqlRsp::clear_phone_last_offline_time() {
  phone_last_offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_phone_last_offline_time();
}
inline ::google::protobuf::uint64 IMLoginToSqlRsp::phone_last_offline_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMLoginToSqlRsp.phone_last_offline_time)
  return phone_last_offline_time_;
}
inline void IMLoginToSqlRsp::set_phone_last_offline_time(::google::protobuf::uint64 value) {
  set_has_phone_last_offline_time();
  phone_last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMLoginToSqlRsp.phone_last_offline_time)
}

// -------------------------------------------------------------------

// IMUsrStatBroadcoast

// required uint32 company_id = 1;
inline bool IMUsrStatBroadcoast::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsrStatBroadcoast::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsrStatBroadcoast::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsrStatBroadcoast::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.company_id)
  return company_id_;
}
inline void IMUsrStatBroadcoast::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsrStatBroadcoast::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsrStatBroadcoast::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsrStatBroadcoast::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsrStatBroadcoast::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.user_id)
  return user_id_;
}
inline void IMUsrStatBroadcoast::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.user_id)
}

// required uint32 connsvr_id = 3;
inline bool IMUsrStatBroadcoast::has_connsvr_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_connsvr_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsrStatBroadcoast::clear_has_connsvr_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsrStatBroadcoast::clear_connsvr_id() {
  connsvr_id_ = 0u;
  clear_has_connsvr_id();
}
inline ::google::protobuf::uint32 IMUsrStatBroadcoast::connsvr_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.connsvr_id)
  return connsvr_id_;
}
inline void IMUsrStatBroadcoast::set_connsvr_id(::google::protobuf::uint32 value) {
  set_has_connsvr_id();
  connsvr_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.connsvr_id)
}

// required uint32 connsocket_index = 4;
inline bool IMUsrStatBroadcoast::has_connsocket_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_connsocket_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUsrStatBroadcoast::clear_has_connsocket_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUsrStatBroadcoast::clear_connsocket_index() {
  connsocket_index_ = 0u;
  clear_has_connsocket_index();
}
inline ::google::protobuf::uint32 IMUsrStatBroadcoast::connsocket_index() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.connsocket_index)
  return connsocket_index_;
}
inline void IMUsrStatBroadcoast::set_connsocket_index(::google::protobuf::uint32 value) {
  set_has_connsocket_index();
  connsocket_index_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.connsocket_index)
}

// required .IM.BaseDefine.ClientType client_type = 5;
inline bool IMUsrStatBroadcoast::has_client_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_client_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUsrStatBroadcoast::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUsrStatBroadcoast::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMUsrStatBroadcoast::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMUsrStatBroadcoast::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.client_type)
}

// required .IM.BaseDefine.UserStatType client_stat = 6;
inline bool IMUsrStatBroadcoast::has_client_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_client_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUsrStatBroadcoast::clear_has_client_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUsrStatBroadcoast::clear_client_stat() {
  client_stat_ = 1;
  clear_has_client_stat();
}
inline ::IM::BaseDefine::UserStatType IMUsrStatBroadcoast::client_stat() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.client_stat)
  return static_cast< ::IM::BaseDefine::UserStatType >(client_stat_);
}
inline void IMUsrStatBroadcoast::set_client_stat(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_client_stat();
  client_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.client_stat)
}

// required uint64 update_time = 7;
inline bool IMUsrStatBroadcoast::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMUsrStatBroadcoast::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMUsrStatBroadcoast::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMUsrStatBroadcoast::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMUsrStatBroadcoast::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUsrStatBroadcoast.update_time)
  return update_time_;
}
inline void IMUsrStatBroadcoast::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUsrStatBroadcoast.update_time)
}

// -------------------------------------------------------------------

// IMOptBuddyStorageReq

// required uint32 req_user_id = 1;
inline bool IMOptBuddyStorageReq::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMOptBuddyStorageReq::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMOptBuddyStorageReq::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageReq::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.req_user_id)
  return req_user_id_;
}
inline void IMOptBuddyStorageReq::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMOptBuddyStorageReq::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMOptBuddyStorageReq::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMOptBuddyStorageReq::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageReq::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.req_company_id)
  return req_company_id_;
}
inline void IMOptBuddyStorageReq::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMOptBuddyStorageReq::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMOptBuddyStorageReq::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMOptBuddyStorageReq::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageReq::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.dest_user_id)
  return dest_user_id_;
}
inline void IMOptBuddyStorageReq::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMOptBuddyStorageReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMOptBuddyStorageReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMOptBuddyStorageReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.dest_company_id)
  return dest_company_id_;
}
inline void IMOptBuddyStorageReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.dest_company_id)
}

// required uint64 create_time = 5;
inline bool IMOptBuddyStorageReq::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMOptBuddyStorageReq::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMOptBuddyStorageReq::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 IMOptBuddyStorageReq::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.create_time)
  return create_time_;
}
inline void IMOptBuddyStorageReq::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.create_time)
}

// required string opt_remark = 7;
inline bool IMOptBuddyStorageReq::has_opt_remark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_opt_remark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMOptBuddyStorageReq::clear_has_opt_remark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMOptBuddyStorageReq::clear_opt_remark() {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_->clear();
  }
  clear_has_opt_remark();
}
inline const ::std::string& IMOptBuddyStorageReq::opt_remark() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.opt_remark)
  return *opt_remark_;
}
inline void IMOptBuddyStorageReq::set_opt_remark(const ::std::string& value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.opt_remark)
}
inline void IMOptBuddyStorageReq::set_opt_remark(const char* value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMOptBuddyStorageReq.opt_remark)
}
inline void IMOptBuddyStorageReq::set_opt_remark(const char* value, size_t size) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMOptBuddyStorageReq.opt_remark)
}
inline ::std::string* IMOptBuddyStorageReq::mutable_opt_remark() {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMOptBuddyStorageReq.opt_remark)
  return opt_remark_;
}
inline ::std::string* IMOptBuddyStorageReq::release_opt_remark() {
  clear_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_remark_;
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMOptBuddyStorageReq::set_allocated_opt_remark(::std::string* opt_remark) {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_remark_;
  }
  if (opt_remark) {
    set_has_opt_remark();
    opt_remark_ = opt_remark;
  } else {
    clear_has_opt_remark();
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMOptBuddyStorageReq.opt_remark)
}

// required bool req_stat = 8;
inline bool IMOptBuddyStorageReq::has_req_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMOptBuddyStorageReq::set_has_req_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMOptBuddyStorageReq::clear_has_req_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMOptBuddyStorageReq::clear_req_stat() {
  req_stat_ = false;
  clear_has_req_stat();
}
inline bool IMOptBuddyStorageReq::req_stat() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageReq.req_stat)
  return req_stat_;
}
inline void IMOptBuddyStorageReq::set_req_stat(bool value) {
  set_has_req_stat();
  req_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageReq.req_stat)
}

// -------------------------------------------------------------------

// IMOptBuddyStorageRsp

// required uint32 req_user_id = 1;
inline bool IMOptBuddyStorageRsp::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMOptBuddyStorageRsp::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMOptBuddyStorageRsp::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageRsp::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.req_user_id)
  return req_user_id_;
}
inline void IMOptBuddyStorageRsp::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMOptBuddyStorageRsp::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMOptBuddyStorageRsp::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMOptBuddyStorageRsp::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageRsp::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.req_company_id)
  return req_company_id_;
}
inline void IMOptBuddyStorageRsp::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMOptBuddyStorageRsp::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMOptBuddyStorageRsp::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMOptBuddyStorageRsp::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageRsp::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.dest_user_id)
  return dest_user_id_;
}
inline void IMOptBuddyStorageRsp::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMOptBuddyStorageRsp::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMOptBuddyStorageRsp::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMOptBuddyStorageRsp::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyStorageRsp::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.dest_company_id)
  return dest_company_id_;
}
inline void IMOptBuddyStorageRsp::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.dest_company_id)
}

// required uint64 create_time = 5;
inline bool IMOptBuddyStorageRsp::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMOptBuddyStorageRsp::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMOptBuddyStorageRsp::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 IMOptBuddyStorageRsp::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.create_time)
  return create_time_;
}
inline void IMOptBuddyStorageRsp::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.create_time)
}

// required string opt_remark = 7;
inline bool IMOptBuddyStorageRsp::has_opt_remark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_opt_remark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMOptBuddyStorageRsp::clear_has_opt_remark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMOptBuddyStorageRsp::clear_opt_remark() {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_->clear();
  }
  clear_has_opt_remark();
}
inline const ::std::string& IMOptBuddyStorageRsp::opt_remark() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.opt_remark)
  return *opt_remark_;
}
inline void IMOptBuddyStorageRsp::set_opt_remark(const ::std::string& value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.opt_remark)
}
inline void IMOptBuddyStorageRsp::set_opt_remark(const char* value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMOptBuddyStorageRsp.opt_remark)
}
inline void IMOptBuddyStorageRsp::set_opt_remark(const char* value, size_t size) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMOptBuddyStorageRsp.opt_remark)
}
inline ::std::string* IMOptBuddyStorageRsp::mutable_opt_remark() {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMOptBuddyStorageRsp.opt_remark)
  return opt_remark_;
}
inline ::std::string* IMOptBuddyStorageRsp::release_opt_remark() {
  clear_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_remark_;
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMOptBuddyStorageRsp::set_allocated_opt_remark(::std::string* opt_remark) {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_remark_;
  }
  if (opt_remark) {
    set_has_opt_remark();
    opt_remark_ = opt_remark;
  } else {
    clear_has_opt_remark();
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMOptBuddyStorageRsp.opt_remark)
}

// required bool req_stat = 8;
inline bool IMOptBuddyStorageRsp::has_req_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMOptBuddyStorageRsp::set_has_req_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMOptBuddyStorageRsp::clear_has_req_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMOptBuddyStorageRsp::clear_req_stat() {
  req_stat_ = false;
  clear_has_req_stat();
}
inline bool IMOptBuddyStorageRsp::req_stat() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOptBuddyStorageRsp.req_stat)
  return req_stat_;
}
inline void IMOptBuddyStorageRsp::set_req_stat(bool value) {
  set_has_req_stat();
  req_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMOptBuddyStorageRsp.req_stat)
}

// -------------------------------------------------------------------

// IMBuddyStorageReq

// required uint32 req_user_id = 1;
inline bool IMBuddyStorageReq::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBuddyStorageReq::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBuddyStorageReq::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBuddyStorageReq::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageReq::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.req_user_id)
  return req_user_id_;
}
inline void IMBuddyStorageReq::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMBuddyStorageReq::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBuddyStorageReq::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBuddyStorageReq::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBuddyStorageReq::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageReq::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.req_company_id)
  return req_company_id_;
}
inline void IMBuddyStorageReq::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMBuddyStorageReq::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBuddyStorageReq::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBuddyStorageReq::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBuddyStorageReq::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageReq::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.dest_user_id)
  return dest_user_id_;
}
inline void IMBuddyStorageReq::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMBuddyStorageReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBuddyStorageReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBuddyStorageReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBuddyStorageReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.dest_company_id)
  return dest_company_id_;
}
inline void IMBuddyStorageReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.dest_company_id)
}

// required .IM.BaseDefine.BuddyOptType opt_type = 5;
inline bool IMBuddyStorageReq::has_opt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMBuddyStorageReq::set_has_opt_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMBuddyStorageReq::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMBuddyStorageReq::clear_opt_type() {
  opt_type_ = 1;
  clear_has_opt_type();
}
inline ::IM::BaseDefine::BuddyOptType IMBuddyStorageReq::opt_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.opt_type)
  return static_cast< ::IM::BaseDefine::BuddyOptType >(opt_type_);
}
inline void IMBuddyStorageReq::set_opt_type(::IM::BaseDefine::BuddyOptType value) {
  assert(::IM::BaseDefine::BuddyOptType_IsValid(value));
  set_has_opt_type();
  opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.opt_type)
}

// required uint64 update_time = 6;
inline bool IMBuddyStorageReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMBuddyStorageReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMBuddyStorageReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMBuddyStorageReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMBuddyStorageReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.update_time)
  return update_time_;
}
inline void IMBuddyStorageReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.update_time)
}

// required .IM.BaseDefine.OptResultCode result = 7;
inline bool IMBuddyStorageReq::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMBuddyStorageReq::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMBuddyStorageReq::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMBuddyStorageReq::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::IM::BaseDefine::OptResultCode IMBuddyStorageReq::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageReq.result)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_);
}
inline void IMBuddyStorageReq::set_result(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageReq.result)
}

// -------------------------------------------------------------------

// IMBuddyStorageRsp

// required uint32 req_user_id = 1;
inline bool IMBuddyStorageRsp::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBuddyStorageRsp::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBuddyStorageRsp::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBuddyStorageRsp::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageRsp::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.req_user_id)
  return req_user_id_;
}
inline void IMBuddyStorageRsp::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMBuddyStorageRsp::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBuddyStorageRsp::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBuddyStorageRsp::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBuddyStorageRsp::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageRsp::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.req_company_id)
  return req_company_id_;
}
inline void IMBuddyStorageRsp::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMBuddyStorageRsp::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBuddyStorageRsp::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBuddyStorageRsp::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBuddyStorageRsp::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageRsp::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.dest_user_id)
  return dest_user_id_;
}
inline void IMBuddyStorageRsp::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMBuddyStorageRsp::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBuddyStorageRsp::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBuddyStorageRsp::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBuddyStorageRsp::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMBuddyStorageRsp::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.dest_company_id)
  return dest_company_id_;
}
inline void IMBuddyStorageRsp::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.dest_company_id)
}

// required .IM.BaseDefine.BuddyOptType opt_type = 5;
inline bool IMBuddyStorageRsp::has_opt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMBuddyStorageRsp::set_has_opt_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMBuddyStorageRsp::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMBuddyStorageRsp::clear_opt_type() {
  opt_type_ = 1;
  clear_has_opt_type();
}
inline ::IM::BaseDefine::BuddyOptType IMBuddyStorageRsp::opt_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.opt_type)
  return static_cast< ::IM::BaseDefine::BuddyOptType >(opt_type_);
}
inline void IMBuddyStorageRsp::set_opt_type(::IM::BaseDefine::BuddyOptType value) {
  assert(::IM::BaseDefine::BuddyOptType_IsValid(value));
  set_has_opt_type();
  opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.opt_type)
}

// required uint64 update_time = 6;
inline bool IMBuddyStorageRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMBuddyStorageRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMBuddyStorageRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMBuddyStorageRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMBuddyStorageRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.update_time)
  return update_time_;
}
inline void IMBuddyStorageRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.update_time)
}

// required .IM.BaseDefine.OptResultCode result = 7;
inline bool IMBuddyStorageRsp::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMBuddyStorageRsp::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMBuddyStorageRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMBuddyStorageRsp::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::IM::BaseDefine::OptResultCode IMBuddyStorageRsp::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyStorageRsp.result)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_);
}
inline void IMBuddyStorageRsp::set_result(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyStorageRsp.result)
}

// -------------------------------------------------------------------

// IMRecentContactStorageReq

// required uint32 req_user_id = 1;
inline bool IMRecentContactStorageReq::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRecentContactStorageReq::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRecentContactStorageReq::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRecentContactStorageReq::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMRecentContactStorageReq::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRecentContactStorageReq.req_user_id)
  return req_user_id_;
}
inline void IMRecentContactStorageReq::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRecentContactStorageReq.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMRecentContactStorageReq::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRecentContactStorageReq::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRecentContactStorageReq::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRecentContactStorageReq::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMRecentContactStorageReq::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRecentContactStorageReq.req_company_id)
  return req_company_id_;
}
inline void IMRecentContactStorageReq::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRecentContactStorageReq.req_company_id)
}

// repeated .IM.Server.RecentContactItem recent_contact = 3;
inline int IMRecentContactStorageReq::recent_contact_size() const {
  return recent_contact_.size();
}
inline void IMRecentContactStorageReq::clear_recent_contact() {
  recent_contact_.Clear();
}
inline const ::IM::Server::RecentContactItem& IMRecentContactStorageReq::recent_contact(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRecentContactStorageReq.recent_contact)
  return recent_contact_.Get(index);
}
inline ::IM::Server::RecentContactItem* IMRecentContactStorageReq::mutable_recent_contact(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMRecentContactStorageReq.recent_contact)
  return recent_contact_.Mutable(index);
}
inline ::IM::Server::RecentContactItem* IMRecentContactStorageReq::add_recent_contact() {
  // @@protoc_insertion_point(field_add:IM.Server.IMRecentContactStorageReq.recent_contact)
  return recent_contact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >&
IMRecentContactStorageReq::recent_contact() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMRecentContactStorageReq.recent_contact)
  return recent_contact_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >*
IMRecentContactStorageReq::mutable_recent_contact() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMRecentContactStorageReq.recent_contact)
  return &recent_contact_;
}

// -------------------------------------------------------------------

// IMRecentContactStorageRsp

// required uint32 req_user_id = 1;
inline bool IMRecentContactStorageRsp::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRecentContactStorageRsp::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRecentContactStorageRsp::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRecentContactStorageRsp::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMRecentContactStorageRsp::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRecentContactStorageRsp.req_user_id)
  return req_user_id_;
}
inline void IMRecentContactStorageRsp::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRecentContactStorageRsp.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMRecentContactStorageRsp::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRecentContactStorageRsp::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRecentContactStorageRsp::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRecentContactStorageRsp::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMRecentContactStorageRsp::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRecentContactStorageRsp.req_company_id)
  return req_company_id_;
}
inline void IMRecentContactStorageRsp::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRecentContactStorageRsp.req_company_id)
}

// repeated .IM.Server.RecentContactItem recent_contact = 3;
inline int IMRecentContactStorageRsp::recent_contact_size() const {
  return recent_contact_.size();
}
inline void IMRecentContactStorageRsp::clear_recent_contact() {
  recent_contact_.Clear();
}
inline const ::IM::Server::RecentContactItem& IMRecentContactStorageRsp::recent_contact(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRecentContactStorageRsp.recent_contact)
  return recent_contact_.Get(index);
}
inline ::IM::Server::RecentContactItem* IMRecentContactStorageRsp::mutable_recent_contact(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMRecentContactStorageRsp.recent_contact)
  return recent_contact_.Mutable(index);
}
inline ::IM::Server::RecentContactItem* IMRecentContactStorageRsp::add_recent_contact() {
  // @@protoc_insertion_point(field_add:IM.Server.IMRecentContactStorageRsp.recent_contact)
  return recent_contact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >&
IMRecentContactStorageRsp::recent_contact() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMRecentContactStorageRsp.recent_contact)
  return recent_contact_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Server::RecentContactItem >*
IMRecentContactStorageRsp::mutable_recent_contact() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMRecentContactStorageRsp.recent_contact)
  return &recent_contact_;
}

// -------------------------------------------------------------------

// IMBuddyReqInfoStorage

// required uint32 user_id = 1;
inline bool IMBuddyReqInfoStorage::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBuddyReqInfoStorage::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBuddyReqInfoStorage::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBuddyReqInfoStorage::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.user_id)
  return user_id_;
}
inline void IMBuddyReqInfoStorage::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.user_id)
}

// required uint32 company_id = 2;
inline bool IMBuddyReqInfoStorage::has_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBuddyReqInfoStorage::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBuddyReqInfoStorage::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMBuddyReqInfoStorage::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.company_id)
  return company_id_;
}
inline void IMBuddyReqInfoStorage::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMBuddyReqInfoStorage::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBuddyReqInfoStorage::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBuddyReqInfoStorage::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMBuddyReqInfoStorage::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.dest_user_id)
  return dest_user_id_;
}
inline void IMBuddyReqInfoStorage::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMBuddyReqInfoStorage::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBuddyReqInfoStorage::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBuddyReqInfoStorage::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMBuddyReqInfoStorage::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.dest_company_id)
  return dest_company_id_;
}
inline void IMBuddyReqInfoStorage::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.dest_company_id)
}

// required uint32 req_stat = 5;
inline bool IMBuddyReqInfoStorage::has_req_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_req_stat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMBuddyReqInfoStorage::clear_has_req_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMBuddyReqInfoStorage::clear_req_stat() {
  req_stat_ = 0u;
  clear_has_req_stat();
}
inline ::google::protobuf::uint32 IMBuddyReqInfoStorage::req_stat() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.req_stat)
  return req_stat_;
}
inline void IMBuddyReqInfoStorage::set_req_stat(::google::protobuf::uint32 value) {
  set_has_req_stat();
  req_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.req_stat)
}

// required uint64 req_time = 6;
inline bool IMBuddyReqInfoStorage::has_req_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_req_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMBuddyReqInfoStorage::clear_has_req_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMBuddyReqInfoStorage::clear_req_time() {
  req_time_ = GOOGLE_ULONGLONG(0);
  clear_has_req_time();
}
inline ::google::protobuf::uint64 IMBuddyReqInfoStorage::req_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.req_time)
  return req_time_;
}
inline void IMBuddyReqInfoStorage::set_req_time(::google::protobuf::uint64 value) {
  set_has_req_time();
  req_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.req_time)
}

// required string remark = 7;
inline bool IMBuddyReqInfoStorage::has_remark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMBuddyReqInfoStorage::set_has_remark() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMBuddyReqInfoStorage::clear_has_remark() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMBuddyReqInfoStorage::clear_remark() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& IMBuddyReqInfoStorage::remark() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMBuddyReqInfoStorage.remark)
  return *remark_;
}
inline void IMBuddyReqInfoStorage::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMBuddyReqInfoStorage.remark)
}
inline void IMBuddyReqInfoStorage::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMBuddyReqInfoStorage.remark)
}
inline void IMBuddyReqInfoStorage::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMBuddyReqInfoStorage.remark)
}
inline ::std::string* IMBuddyReqInfoStorage::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMBuddyReqInfoStorage.remark)
  return remark_;
}
inline ::std::string* IMBuddyReqInfoStorage::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBuddyReqInfoStorage::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMBuddyReqInfoStorage.remark)
}

// -------------------------------------------------------------------

// IMDelRecentContactReq

// required uint32 req_user_id = 1;
inline bool IMDelRecentContactReq::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDelRecentContactReq::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDelRecentContactReq::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDelRecentContactReq::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMDelRecentContactReq::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMDelRecentContactReq.req_user_id)
  return req_user_id_;
}
inline void IMDelRecentContactReq::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMDelRecentContactReq.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMDelRecentContactReq::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDelRecentContactReq::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDelRecentContactReq::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDelRecentContactReq::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMDelRecentContactReq::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMDelRecentContactReq.req_company_id)
  return req_company_id_;
}
inline void IMDelRecentContactReq::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMDelRecentContactReq.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMDelRecentContactReq::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDelRecentContactReq::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDelRecentContactReq::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDelRecentContactReq::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMDelRecentContactReq::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMDelRecentContactReq.dest_user_id)
  return dest_user_id_;
}
inline void IMDelRecentContactReq::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMDelRecentContactReq.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMDelRecentContactReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDelRecentContactReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDelRecentContactReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDelRecentContactReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMDelRecentContactReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMDelRecentContactReq.dest_company_id)
  return dest_company_id_;
}
inline void IMDelRecentContactReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMDelRecentContactReq.dest_company_id)
}

// required .IM.BaseDefine.BuddyOptType opt_type = 5;
inline bool IMDelRecentContactReq::has_opt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMDelRecentContactReq::set_has_opt_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMDelRecentContactReq::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMDelRecentContactReq::clear_opt_type() {
  opt_type_ = 1;
  clear_has_opt_type();
}
inline ::IM::BaseDefine::BuddyOptType IMDelRecentContactReq::opt_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMDelRecentContactReq.opt_type)
  return static_cast< ::IM::BaseDefine::BuddyOptType >(opt_type_);
}
inline void IMDelRecentContactReq::set_opt_type(::IM::BaseDefine::BuddyOptType value) {
  assert(::IM::BaseDefine::BuddyOptType_IsValid(value));
  set_has_opt_type();
  opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMDelRecentContactReq.opt_type)
}

// -------------------------------------------------------------------

// IMAlterPswdReq

// required uint32 company_id = 1;
inline bool IMAlterPswdReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAlterPswdReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAlterPswdReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAlterPswdReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMAlterPswdReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdReq.company_id)
  return company_id_;
}
inline void IMAlterPswdReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMAlterPswdReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAlterPswdReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAlterPswdReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAlterPswdReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMAlterPswdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdReq.user_id)
  return user_id_;
}
inline void IMAlterPswdReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdReq.user_id)
}

// required string new_pswd = 3;
inline bool IMAlterPswdReq::has_new_pswd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAlterPswdReq::set_has_new_pswd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAlterPswdReq::clear_has_new_pswd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAlterPswdReq::clear_new_pswd() {
  if (new_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_->clear();
  }
  clear_has_new_pswd();
}
inline const ::std::string& IMAlterPswdReq::new_pswd() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdReq.new_pswd)
  return *new_pswd_;
}
inline void IMAlterPswdReq::set_new_pswd(const ::std::string& value) {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  new_pswd_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdReq.new_pswd)
}
inline void IMAlterPswdReq::set_new_pswd(const char* value) {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  new_pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMAlterPswdReq.new_pswd)
}
inline void IMAlterPswdReq::set_new_pswd(const char* value, size_t size) {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  new_pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMAlterPswdReq.new_pswd)
}
inline ::std::string* IMAlterPswdReq::mutable_new_pswd() {
  set_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMAlterPswdReq.new_pswd)
  return new_pswd_;
}
inline ::std::string* IMAlterPswdReq::release_new_pswd() {
  clear_has_new_pswd();
  if (new_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_pswd_;
    new_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAlterPswdReq::set_allocated_new_pswd(::std::string* new_pswd) {
  if (new_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pswd_;
  }
  if (new_pswd) {
    set_has_new_pswd();
    new_pswd_ = new_pswd;
  } else {
    clear_has_new_pswd();
    new_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMAlterPswdReq.new_pswd)
}

// required string old_pswd = 4;
inline bool IMAlterPswdReq::has_old_pswd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAlterPswdReq::set_has_old_pswd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAlterPswdReq::clear_has_old_pswd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAlterPswdReq::clear_old_pswd() {
  if (old_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_->clear();
  }
  clear_has_old_pswd();
}
inline const ::std::string& IMAlterPswdReq::old_pswd() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdReq.old_pswd)
  return *old_pswd_;
}
inline void IMAlterPswdReq::set_old_pswd(const ::std::string& value) {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  old_pswd_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdReq.old_pswd)
}
inline void IMAlterPswdReq::set_old_pswd(const char* value) {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  old_pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMAlterPswdReq.old_pswd)
}
inline void IMAlterPswdReq::set_old_pswd(const char* value, size_t size) {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  old_pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMAlterPswdReq.old_pswd)
}
inline ::std::string* IMAlterPswdReq::mutable_old_pswd() {
  set_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMAlterPswdReq.old_pswd)
  return old_pswd_;
}
inline ::std::string* IMAlterPswdReq::release_old_pswd() {
  clear_has_old_pswd();
  if (old_pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = old_pswd_;
    old_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAlterPswdReq::set_allocated_old_pswd(::std::string* old_pswd) {
  if (old_pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_pswd_;
  }
  if (old_pswd) {
    set_has_old_pswd();
    old_pswd_ = old_pswd;
  } else {
    clear_has_old_pswd();
    old_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMAlterPswdReq.old_pswd)
}

// -------------------------------------------------------------------

// IMAlterPswdRsp

// required uint32 company_id = 1;
inline bool IMAlterPswdRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAlterPswdRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAlterPswdRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAlterPswdRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMAlterPswdRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdRsp.company_id)
  return company_id_;
}
inline void IMAlterPswdRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMAlterPswdRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAlterPswdRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAlterPswdRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAlterPswdRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMAlterPswdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdRsp.user_id)
  return user_id_;
}
inline void IMAlterPswdRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdRsp.user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMAlterPswdRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAlterPswdRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAlterPswdRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAlterPswdRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMAlterPswdRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAlterPswdRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMAlterPswdRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAlterPswdRsp.result_code)
}

// -------------------------------------------------------------------

// IMReportOnlineInfo

// required uint32 company_id = 1;
inline bool IMReportOnlineInfo::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMReportOnlineInfo::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMReportOnlineInfo::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMReportOnlineInfo::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMReportOnlineInfo::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportOnlineInfo.company_id)
  return company_id_;
}
inline void IMReportOnlineInfo::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportOnlineInfo.company_id)
}

// required uint32 node_id = 2;
inline bool IMReportOnlineInfo::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMReportOnlineInfo::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMReportOnlineInfo::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMReportOnlineInfo::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 IMReportOnlineInfo::node_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportOnlineInfo.node_id)
  return node_id_;
}
inline void IMReportOnlineInfo::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportOnlineInfo.node_id)
}

// required uint32 online_count = 3;
inline bool IMReportOnlineInfo::has_online_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMReportOnlineInfo::set_has_online_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMReportOnlineInfo::clear_has_online_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMReportOnlineInfo::clear_online_count() {
  online_count_ = 0u;
  clear_has_online_count();
}
inline ::google::protobuf::uint32 IMReportOnlineInfo::online_count() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportOnlineInfo.online_count)
  return online_count_;
}
inline void IMReportOnlineInfo::set_online_count(::google::protobuf::uint32 value) {
  set_has_online_count();
  online_count_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportOnlineInfo.online_count)
}

// required uint32 online_peek = 4;
inline bool IMReportOnlineInfo::has_online_peek() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMReportOnlineInfo::set_has_online_peek() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMReportOnlineInfo::clear_has_online_peek() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMReportOnlineInfo::clear_online_peek() {
  online_peek_ = 0u;
  clear_has_online_peek();
}
inline ::google::protobuf::uint32 IMReportOnlineInfo::online_peek() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportOnlineInfo.online_peek)
  return online_peek_;
}
inline void IMReportOnlineInfo::set_online_peek(::google::protobuf::uint32 value) {
  set_has_online_peek();
  online_peek_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportOnlineInfo.online_peek)
}

// required uint64 update_time = 5;
inline bool IMReportOnlineInfo::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMReportOnlineInfo::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMReportOnlineInfo::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMReportOnlineInfo::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMReportOnlineInfo::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportOnlineInfo.update_time)
  return update_time_;
}
inline void IMReportOnlineInfo::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportOnlineInfo.update_time)
}

// -------------------------------------------------------------------

// IMReportChatInfo

// required uint32 company_id = 1;
inline bool IMReportChatInfo::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMReportChatInfo::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMReportChatInfo::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMReportChatInfo::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMReportChatInfo::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportChatInfo.company_id)
  return company_id_;
}
inline void IMReportChatInfo::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportChatInfo.company_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMReportChatInfo::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMReportChatInfo::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMReportChatInfo::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMReportChatInfo::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMReportChatInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportChatInfo.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMReportChatInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportChatInfo.session_type)
}

// required uint32 node_id = 3;
inline bool IMReportChatInfo::has_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMReportChatInfo::set_has_node_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMReportChatInfo::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMReportChatInfo::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 IMReportChatInfo::node_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportChatInfo.node_id)
  return node_id_;
}
inline void IMReportChatInfo::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportChatInfo.node_id)
}

// required uint64 online_count = 4;
inline bool IMReportChatInfo::has_online_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMReportChatInfo::set_has_online_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMReportChatInfo::clear_has_online_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMReportChatInfo::clear_online_count() {
  online_count_ = GOOGLE_ULONGLONG(0);
  clear_has_online_count();
}
inline ::google::protobuf::uint64 IMReportChatInfo::online_count() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportChatInfo.online_count)
  return online_count_;
}
inline void IMReportChatInfo::set_online_count(::google::protobuf::uint64 value) {
  set_has_online_count();
  online_count_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportChatInfo.online_count)
}

// required uint64 offline_count = 5;
inline bool IMReportChatInfo::has_offline_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMReportChatInfo::set_has_offline_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMReportChatInfo::clear_has_offline_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMReportChatInfo::clear_offline_count() {
  offline_count_ = GOOGLE_ULONGLONG(0);
  clear_has_offline_count();
}
inline ::google::protobuf::uint64 IMReportChatInfo::offline_count() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportChatInfo.offline_count)
  return offline_count_;
}
inline void IMReportChatInfo::set_offline_count(::google::protobuf::uint64 value) {
  set_has_offline_count();
  offline_count_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportChatInfo.offline_count)
}

// required uint64 update_time = 6;
inline bool IMReportChatInfo::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMReportChatInfo::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMReportChatInfo::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMReportChatInfo::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMReportChatInfo::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMReportChatInfo.update_time)
  return update_time_;
}
inline void IMReportChatInfo::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMReportChatInfo.update_time)
}

// -------------------------------------------------------------------

// IMGetUserRoleReq

// required uint32 company_id = 1;
inline bool IMGetUserRoleReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetUserRoleReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetUserRoleReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetUserRoleReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGetUserRoleReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetUserRoleReq.company_id)
  return company_id_;
}
inline void IMGetUserRoleReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetUserRoleReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGetUserRoleReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetUserRoleReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetUserRoleReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetUserRoleReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetUserRoleReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetUserRoleReq.user_id)
  return user_id_;
}
inline void IMGetUserRoleReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetUserRoleReq.user_id)
}

// -------------------------------------------------------------------

// IMUserRoleAuthorityRsp

// repeated .IM.BaseDefine.IMUserRole role = 1;
inline int IMUserRoleAuthorityRsp::role_size() const {
  return role_.size();
}
inline void IMUserRoleAuthorityRsp::clear_role() {
  role_.Clear();
}
inline const ::IM::BaseDefine::IMUserRole& IMUserRoleAuthorityRsp::role(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserRoleAuthorityRsp.role)
  return role_.Get(index);
}
inline ::IM::BaseDefine::IMUserRole* IMUserRoleAuthorityRsp::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMUserRoleAuthorityRsp.role)
  return role_.Mutable(index);
}
inline ::IM::BaseDefine::IMUserRole* IMUserRoleAuthorityRsp::add_role() {
  // @@protoc_insertion_point(field_add:IM.Server.IMUserRoleAuthorityRsp.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >&
IMUserRoleAuthorityRsp::role() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMUserRoleAuthorityRsp.role)
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMUserRole >*
IMUserRoleAuthorityRsp::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMUserRoleAuthorityRsp.role)
  return &role_;
}

// -------------------------------------------------------------------

// IMAuthenticationReq

// required .IM.BaseDefine.ServiceID type = 1;
inline bool IMAuthenticationReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAuthenticationReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAuthenticationReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAuthenticationReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::IM::BaseDefine::ServiceID IMAuthenticationReq::type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAuthenticationReq.type)
  return static_cast< ::IM::BaseDefine::ServiceID >(type_);
}
inline void IMAuthenticationReq::set_type(::IM::BaseDefine::ServiceID value) {
  assert(::IM::BaseDefine::ServiceID_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAuthenticationReq.type)
}

// required uint32 node_id = 2;
inline bool IMAuthenticationReq::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAuthenticationReq::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAuthenticationReq::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAuthenticationReq::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 IMAuthenticationReq::node_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAuthenticationReq.node_id)
  return node_id_;
}
inline void IMAuthenticationReq::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAuthenticationReq.node_id)
}

// -------------------------------------------------------------------

// IMAuthenticationRsp

// required .IM.BaseDefine.ServiceID type = 1;
inline bool IMAuthenticationRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAuthenticationRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAuthenticationRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAuthenticationRsp::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::IM::BaseDefine::ServiceID IMAuthenticationRsp::type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAuthenticationRsp.type)
  return static_cast< ::IM::BaseDefine::ServiceID >(type_);
}
inline void IMAuthenticationRsp::set_type(::IM::BaseDefine::ServiceID value) {
  assert(::IM::BaseDefine::ServiceID_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAuthenticationRsp.type)
}

// required uint32 node_id = 2;
inline bool IMAuthenticationRsp::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAuthenticationRsp::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAuthenticationRsp::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAuthenticationRsp::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 IMAuthenticationRsp::node_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAuthenticationRsp.node_id)
  return node_id_;
}
inline void IMAuthenticationRsp::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAuthenticationRsp.node_id)
}

// required uint32 result = 3;
inline bool IMAuthenticationRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAuthenticationRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAuthenticationRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAuthenticationRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMAuthenticationRsp::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAuthenticationRsp.result)
  return result_;
}
inline void IMAuthenticationRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMAuthenticationRsp.result)
}

// optional bytes attach_data = 20;
inline bool IMAuthenticationRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAuthenticationRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAuthenticationRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAuthenticationRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAuthenticationRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMAuthenticationRsp.attach_data)
  return *attach_data_;
}
inline void IMAuthenticationRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMAuthenticationRsp.attach_data)
}
inline void IMAuthenticationRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMAuthenticationRsp.attach_data)
}
inline void IMAuthenticationRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMAuthenticationRsp.attach_data)
}
inline ::std::string* IMAuthenticationRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMAuthenticationRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMAuthenticationRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAuthenticationRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMAuthenticationRsp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eServer_2eproto__INCLUDED
