// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Status.proto

#ifndef PROTOBUF_IM_2eStatus_2eproto__INCLUDED
#define PROTOBUF_IM_2eStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Status {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eStatus_2eproto();
void protobuf_AssignDesc_IM_2eStatus_2eproto();
void protobuf_ShutdownFile_IM_2eStatus_2eproto();

class IMMsgServReq;
class IMMsgServRes;
class IMPushShieldReq;
class IMPushShieldRsp;
class IMQueryPushShieldReq;
class IMQueryPushShieldRsp;

// ===================================================================

class IMMsgServReq : public ::google::protobuf::MessageLite {
 public:
  IMMsgServReq();
  virtual ~IMMsgServReq();

  IMMsgServReq(const IMMsgServReq& from);

  inline IMMsgServReq& operator=(const IMMsgServReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServReq* other);

  // implements Message ----------------------------------------------

  IMMsgServReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServReq& from);
  void MergeFrom(const IMMsgServReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Status.IMMsgServReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eStatus_2eproto();
  friend void protobuf_ShutdownFile_IM_2eStatus_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServRes : public ::google::protobuf::MessageLite {
 public:
  IMMsgServRes();
  virtual ~IMMsgServRes();

  IMMsgServRes(const IMMsgServRes& from);

  inline IMMsgServRes& operator=(const IMMsgServRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServRes* other);

  // implements Message ----------------------------------------------

  IMMsgServRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServRes& from);
  void MergeFrom(const IMMsgServRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string backip_ip = 4;
  inline bool has_backip_ip() const;
  inline void clear_backip_ip();
  static const int kBackipIpFieldNumber = 4;
  inline const ::std::string& backip_ip() const;
  inline void set_backip_ip(const ::std::string& value);
  inline void set_backip_ip(const char* value);
  inline void set_backip_ip(const char* value, size_t size);
  inline ::std::string* mutable_backip_ip();
  inline ::std::string* release_backip_ip();
  inline void set_allocated_backip_ip(::std::string* backip_ip);

  // optional uint32 backip_port = 5;
  inline bool has_backip_port() const;
  inline void clear_backip_port();
  static const int kBackipPortFieldNumber = 5;
  inline ::google::protobuf::uint32 backip_port() const;
  inline void set_backip_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Status.IMMsgServRes)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_backip_ip();
  inline void clear_has_backip_ip();
  inline void set_has_backip_port();
  inline void clear_has_backip_port();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  int result_code_;
  ::google::protobuf::uint32 port_;
  ::std::string* backip_ip_;
  ::google::protobuf::uint32 backip_port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eStatus_2eproto();
  friend void protobuf_ShutdownFile_IM_2eStatus_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServRes* default_instance_;
};
// -------------------------------------------------------------------

class IMPushShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMPushShieldReq();
  virtual ~IMPushShieldReq();

  IMPushShieldReq(const IMPushShieldReq& from);

  inline IMPushShieldReq& operator=(const IMPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushShieldReq* other);

  // implements Message ----------------------------------------------

  IMPushShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushShieldReq& from);
  void MergeFrom(const IMPushShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 shield_status = 3;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Status.IMPushShieldReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 shield_status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eStatus_2eproto();
  friend void protobuf_ShutdownFile_IM_2eStatus_2eproto();

  void InitAsDefaultInstance();
  static IMPushShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMPushShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMPushShieldRsp();
  virtual ~IMPushShieldRsp();

  IMPushShieldRsp(const IMPushShieldRsp& from);

  inline IMPushShieldRsp& operator=(const IMPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushShieldRsp* other);

  // implements Message ----------------------------------------------

  IMPushShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushShieldRsp& from);
  void MergeFrom(const IMPushShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 shield_status = 4;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Status.IMPushShieldRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 shield_status_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eStatus_2eproto();
  friend void protobuf_ShutdownFile_IM_2eStatus_2eproto();

  void InitAsDefaultInstance();
  static IMPushShieldRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMQueryPushShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMQueryPushShieldReq();
  virtual ~IMQueryPushShieldReq();

  IMQueryPushShieldReq(const IMQueryPushShieldReq& from);

  inline IMQueryPushShieldReq& operator=(const IMQueryPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMQueryPushShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMQueryPushShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMQueryPushShieldReq* other);

  // implements Message ----------------------------------------------

  IMQueryPushShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMQueryPushShieldReq& from);
  void MergeFrom(const IMQueryPushShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Status.IMQueryPushShieldReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eStatus_2eproto();
  friend void protobuf_ShutdownFile_IM_2eStatus_2eproto();

  void InitAsDefaultInstance();
  static IMQueryPushShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMQueryPushShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMQueryPushShieldRsp();
  virtual ~IMQueryPushShieldRsp();

  IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from);

  inline IMQueryPushShieldRsp& operator=(const IMQueryPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMQueryPushShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMQueryPushShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMQueryPushShieldRsp* other);

  // implements Message ----------------------------------------------

  IMQueryPushShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMQueryPushShieldRsp& from);
  void MergeFrom(const IMQueryPushShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 shield_status = 4;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Status.IMQueryPushShieldRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 shield_status_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eStatus_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eStatus_2eproto();
  friend void protobuf_ShutdownFile_IM_2eStatus_2eproto();

  void InitAsDefaultInstance();
  static IMQueryPushShieldRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMMsgServReq

// optional uint32 company_id = 1;
inline bool IMMsgServReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMMsgServReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMMsgServReq.company_id)
  return company_id_;
}
inline void IMMsgServReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMMsgServReq.company_id)
}

// -------------------------------------------------------------------

// IMMsgServRes

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMMsgServRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServRes::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMMsgServRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMMsgServRes.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMMsgServRes::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMMsgServRes.result_code)
}

// optional string ip = 2;
inline bool IMMsgServRes::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServRes::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServRes::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServRes::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IMMsgServRes::ip() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMMsgServRes.ip)
  return *ip_;
}
inline void IMMsgServRes::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Status.IMMsgServRes.ip)
}
inline void IMMsgServRes::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Status.IMMsgServRes.ip)
}
inline void IMMsgServRes::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Status.IMMsgServRes.ip)
}
inline ::std::string* IMMsgServRes::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Status.IMMsgServRes.ip)
  return ip_;
}
inline ::std::string* IMMsgServRes::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServRes::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Status.IMMsgServRes.ip)
}

// optional uint32 port = 3;
inline bool IMMsgServRes::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgServRes::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgServRes::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgServRes::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IMMsgServRes::port() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMMsgServRes.port)
  return port_;
}
inline void IMMsgServRes::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMMsgServRes.port)
}

// optional string backip_ip = 4;
inline bool IMMsgServRes::has_backip_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgServRes::set_has_backip_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgServRes::clear_has_backip_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgServRes::clear_backip_ip() {
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_->clear();
  }
  clear_has_backip_ip();
}
inline const ::std::string& IMMsgServRes::backip_ip() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMMsgServRes.backip_ip)
  return *backip_ip_;
}
inline void IMMsgServRes::set_backip_ip(const ::std::string& value) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Status.IMMsgServRes.backip_ip)
}
inline void IMMsgServRes::set_backip_ip(const char* value) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Status.IMMsgServRes.backip_ip)
}
inline void IMMsgServRes::set_backip_ip(const char* value, size_t size) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Status.IMMsgServRes.backip_ip)
}
inline ::std::string* IMMsgServRes::mutable_backip_ip() {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Status.IMMsgServRes.backip_ip)
  return backip_ip_;
}
inline ::std::string* IMMsgServRes::release_backip_ip() {
  clear_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backip_ip_;
    backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServRes::set_allocated_backip_ip(::std::string* backip_ip) {
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backip_ip_;
  }
  if (backip_ip) {
    set_has_backip_ip();
    backip_ip_ = backip_ip;
  } else {
    clear_has_backip_ip();
    backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Status.IMMsgServRes.backip_ip)
}

// optional uint32 backip_port = 5;
inline bool IMMsgServRes::has_backip_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMMsgServRes::set_has_backip_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMMsgServRes::clear_has_backip_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMMsgServRes::clear_backip_port() {
  backip_port_ = 0u;
  clear_has_backip_port();
}
inline ::google::protobuf::uint32 IMMsgServRes::backip_port() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMMsgServRes.backip_port)
  return backip_port_;
}
inline void IMMsgServRes::set_backip_port(::google::protobuf::uint32 value) {
  set_has_backip_port();
  backip_port_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMMsgServRes.backip_port)
}

// -------------------------------------------------------------------

// IMPushShieldReq

// required uint32 company_id = 1;
inline bool IMPushShieldReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushShieldReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushShieldReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushShieldReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMPushShieldReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldReq.company_id)
  return company_id_;
}
inline void IMPushShieldReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMPushShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldReq.user_id)
  return user_id_;
}
inline void IMPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldReq.user_id)
}

// required uint32 shield_status = 3;
inline bool IMPushShieldReq::has_shield_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushShieldReq::set_has_shield_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushShieldReq::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushShieldReq::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMPushShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldReq.shield_status)
  return shield_status_;
}
inline void IMPushShieldReq::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldReq.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMPushShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMPushShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMPushShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMPushShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldReq.attach_data)
  return *attach_data_;
}
inline void IMPushShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldReq.attach_data)
}
inline void IMPushShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Status.IMPushShieldReq.attach_data)
}
inline void IMPushShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Status.IMPushShieldReq.attach_data)
}
inline ::std::string* IMPushShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Status.IMPushShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMPushShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Status.IMPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMPushShieldRsp

// required uint32 company_id = 1;
inline bool IMPushShieldRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushShieldRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushShieldRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushShieldRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldRsp.company_id)
  return company_id_;
}
inline void IMPushShieldRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMPushShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldRsp.user_id)
  return user_id_;
}
inline void IMPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldRsp.user_id)
}

// required uint32 result_code = 3;
inline bool IMPushShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldRsp.result_code)
  return result_code_;
}
inline void IMPushShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldRsp.result_code)
}

// optional uint32 shield_status = 4;
inline bool IMPushShieldRsp::has_shield_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMPushShieldRsp::set_has_shield_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMPushShieldRsp::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldRsp.shield_status)
  return shield_status_;
}
inline void IMPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldRsp.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMPushShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMPushShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMPushShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMPushShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMPushShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMPushShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Status.IMPushShieldRsp.attach_data)
}
inline void IMPushShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Status.IMPushShieldRsp.attach_data)
}
inline void IMPushShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Status.IMPushShieldRsp.attach_data)
}
inline ::std::string* IMPushShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Status.IMPushShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMPushShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Status.IMPushShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldReq

// required uint32 company_id = 1;
inline bool IMQueryPushShieldReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMQueryPushShieldReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMQueryPushShieldReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMQueryPushShieldReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldReq.company_id)
  return company_id_;
}
inline void IMQueryPushShieldReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMQueryPushShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMQueryPushShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMQueryPushShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMQueryPushShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldReq.user_id)
  return user_id_;
}
inline void IMQueryPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldReq.user_id)
}

// optional bytes attach_data = 20;
inline bool IMQueryPushShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMQueryPushShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMQueryPushShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMQueryPushShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMQueryPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldReq.attach_data)
  return *attach_data_;
}
inline void IMQueryPushShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldReq.attach_data)
}
inline void IMQueryPushShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Status.IMQueryPushShieldReq.attach_data)
}
inline void IMQueryPushShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Status.IMQueryPushShieldReq.attach_data)
}
inline ::std::string* IMQueryPushShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Status.IMQueryPushShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMQueryPushShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMQueryPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Status.IMQueryPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldRsp

// required uint32 company_id = 1;
inline bool IMQueryPushShieldRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMQueryPushShieldRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMQueryPushShieldRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldRsp.company_id)
  return company_id_;
}
inline void IMQueryPushShieldRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMQueryPushShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMQueryPushShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMQueryPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldRsp.user_id)
  return user_id_;
}
inline void IMQueryPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldRsp.user_id)
}

// required uint32 result_code = 3;
inline bool IMQueryPushShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMQueryPushShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMQueryPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldRsp.result_code)
  return result_code_;
}
inline void IMQueryPushShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldRsp.result_code)
}

// optional uint32 shield_status = 4;
inline bool IMQueryPushShieldRsp::has_shield_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_shield_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMQueryPushShieldRsp::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMQueryPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldRsp.shield_status)
  return shield_status_;
}
inline void IMQueryPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldRsp.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMQueryPushShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMQueryPushShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMQueryPushShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMQueryPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Status.IMQueryPushShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMQueryPushShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Status.IMQueryPushShieldRsp.attach_data)
}
inline void IMQueryPushShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Status.IMQueryPushShieldRsp.attach_data)
}
inline void IMQueryPushShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Status.IMQueryPushShieldRsp.attach_data)
}
inline ::std::string* IMQueryPushShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Status.IMQueryPushShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMQueryPushShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMQueryPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Status.IMQueryPushShieldRsp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Status
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eStatus_2eproto__INCLUDED
