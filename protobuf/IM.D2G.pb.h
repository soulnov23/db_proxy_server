// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.D2G.proto

#ifndef PROTOBUF_IM_2eD2G_2eproto__INCLUDED
#define PROTOBUF_IM_2eD2G_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace DTG {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eD2G_2eproto();
void protobuf_AssignDesc_IM_2eD2G_2eproto();
void protobuf_ShutdownFile_IM_2eD2G_2eproto();

class DTGroupCreateReq;
class DTGroupCreateRsp;
class DTGMsg;
class DTGMsgList;

// ===================================================================

class DTGroupCreateReq : public ::google::protobuf::MessageLite {
 public:
  DTGroupCreateReq();
  virtual ~DTGroupCreateReq();

  DTGroupCreateReq(const DTGroupCreateReq& from);

  inline DTGroupCreateReq& operator=(const DTGroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DTGroupCreateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DTGroupCreateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DTGroupCreateReq* other);

  // implements Message ----------------------------------------------

  DTGroupCreateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DTGroupCreateReq& from);
  void MergeFrom(const DTGroupCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 4;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 4;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required string group_name = 5;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 5;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_avatar = 6;
  inline bool has_group_avatar() const;
  inline void clear_group_avatar();
  static const int kGroupAvatarFieldNumber = 6;
  inline const ::std::string& group_avatar() const;
  inline void set_group_avatar(const ::std::string& value);
  inline void set_group_avatar(const char* value);
  inline void set_group_avatar(const char* value, size_t size);
  inline ::std::string* mutable_group_avatar();
  inline ::std::string* release_group_avatar();
  inline void set_allocated_group_avatar(::std::string* group_avatar);

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 7;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 7;
  inline const ::IM::BaseDefine::UserIdItem& member_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_member_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_member_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_member_id_list();

  // optional string topic = 8;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 8;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.DTG.DTGroupCreateReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_avatar();
  inline void clear_has_group_avatar();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::std::string* group_name_;
  ::std::string* group_avatar_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > member_id_list_;
  ::std::string* topic_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eD2G_2eproto();
  friend void protobuf_ShutdownFile_IM_2eD2G_2eproto();

  void InitAsDefaultInstance();
  static DTGroupCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class DTGroupCreateRsp : public ::google::protobuf::MessageLite {
 public:
  DTGroupCreateRsp();
  virtual ~DTGroupCreateRsp();

  DTGroupCreateRsp(const DTGroupCreateRsp& from);

  inline DTGroupCreateRsp& operator=(const DTGroupCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DTGroupCreateRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DTGroupCreateRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DTGroupCreateRsp* other);

  // implements Message ----------------------------------------------

  DTGroupCreateRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DTGroupCreateRsp& from);
  void MergeFrom(const DTGroupCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.OptResultCode result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // required uint32 company_id = 2;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 4;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 4;
  inline const ::IM::BaseDefine::UserIdItem& member_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_member_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_member_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_member_id_list();

  // required uint64 memberlist_update_time = 5;
  inline bool has_memberlist_update_time() const;
  inline void clear_memberlist_update_time();
  static const int kMemberlistUpdateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 memberlist_update_time() const;
  inline void set_memberlist_update_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.GroupType group_type = 6;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 6;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.DTG.DTGroupCreateRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_memberlist_update_time();
  inline void clear_has_memberlist_update_time();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_code_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > member_id_list_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint64 memberlist_update_time_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eD2G_2eproto();
  friend void protobuf_ShutdownFile_IM_2eD2G_2eproto();

  void InitAsDefaultInstance();
  static DTGroupCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class DTGMsg : public ::google::protobuf::MessageLite {
 public:
  DTGMsg();
  virtual ~DTGMsg();

  DTGMsg(const DTGMsg& from);

  inline DTGMsg& operator=(const DTGMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DTGMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DTGMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DTGMsg* other);

  // implements Message ----------------------------------------------

  DTGMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DTGMsg& from);
  void MergeFrom(const DTGMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.MsgData msg_data = 1;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 1;
  inline const ::IM::BaseDefine::MsgData& msg_data() const;
  inline ::IM::BaseDefine::MsgData* mutable_msg_data();
  inline ::IM::BaseDefine::MsgData* release_msg_data();
  inline void set_allocated_msg_data(::IM::BaseDefine::MsgData* msg_data);

  // optional .IM.BaseDefine.UserIdItem member_id_list = 2;
  inline bool has_member_id_list() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 2;
  inline const ::IM::BaseDefine::UserIdItem& member_id_list() const;
  inline ::IM::BaseDefine::UserIdItem* mutable_member_id_list();
  inline ::IM::BaseDefine::UserIdItem* release_member_id_list();
  inline void set_allocated_member_id_list(::IM::BaseDefine::UserIdItem* member_id_list);

  // optional bytes attach_data = 11;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 11;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.DTG.DTGMsg)
 private:
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  inline void set_has_member_id_list();
  inline void clear_has_member_id_list();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::BaseDefine::MsgData* msg_data_;
  ::IM::BaseDefine::UserIdItem* member_id_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eD2G_2eproto();
  friend void protobuf_ShutdownFile_IM_2eD2G_2eproto();

  void InitAsDefaultInstance();
  static DTGMsg* default_instance_;
};
// -------------------------------------------------------------------

class DTGMsgList : public ::google::protobuf::MessageLite {
 public:
  DTGMsgList();
  virtual ~DTGMsgList();

  DTGMsgList(const DTGMsgList& from);

  inline DTGMsgList& operator=(const DTGMsgList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DTGMsgList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DTGMsgList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DTGMsgList* other);

  // implements Message ----------------------------------------------

  DTGMsgList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DTGMsgList& from);
  void MergeFrom(const DTGMsgList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.DTG.DTGMsg msg_list = 1;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 1;
  inline const ::IM::DTG::DTGMsg& msg_list(int index) const;
  inline ::IM::DTG::DTGMsg* mutable_msg_list(int index);
  inline ::IM::DTG::DTGMsg* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::DTG::DTGMsg >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::DTG::DTGMsg >*
      mutable_msg_list();

  // @@protoc_insertion_point(class_scope:IM.DTG.DTGMsgList)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::DTG::DTGMsg > msg_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eD2G_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eD2G_2eproto();
  friend void protobuf_ShutdownFile_IM_2eD2G_2eproto();

  void InitAsDefaultInstance();
  static DTGMsgList* default_instance_;
};
// ===================================================================


// ===================================================================

// DTGroupCreateReq

// required uint32 company_id = 1;
inline bool DTGroupCreateReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DTGroupCreateReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DTGroupCreateReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DTGroupCreateReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 DTGroupCreateReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.company_id)
  return company_id_;
}
inline void DTGroupCreateReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.company_id)
}

// required uint32 user_id = 2;
inline bool DTGroupCreateReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DTGroupCreateReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DTGroupCreateReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DTGroupCreateReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 DTGroupCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.user_id)
  return user_id_;
}
inline void DTGroupCreateReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.user_id)
}

// required uint32 group_id = 3;
inline bool DTGroupCreateReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DTGroupCreateReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DTGroupCreateReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DTGroupCreateReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 DTGroupCreateReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.group_id)
  return group_id_;
}
inline void DTGroupCreateReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 4;
inline bool DTGroupCreateReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DTGroupCreateReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DTGroupCreateReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DTGroupCreateReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType DTGroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void DTGroupCreateReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.group_type)
}

// required string group_name = 5;
inline bool DTGroupCreateReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DTGroupCreateReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DTGroupCreateReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DTGroupCreateReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& DTGroupCreateReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.group_name)
  return *group_name_;
}
inline void DTGroupCreateReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.group_name)
}
inline void DTGroupCreateReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DTG.DTGroupCreateReq.group_name)
}
inline void DTGroupCreateReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DTG.DTGroupCreateReq.group_name)
}
inline ::std::string* DTGroupCreateReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateReq.group_name)
  return group_name_;
}
inline ::std::string* DTGroupCreateReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DTGroupCreateReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGroupCreateReq.group_name)
}

// required string group_avatar = 6;
inline bool DTGroupCreateReq::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DTGroupCreateReq::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DTGroupCreateReq::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DTGroupCreateReq::clear_group_avatar() {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_->clear();
  }
  clear_has_group_avatar();
}
inline const ::std::string& DTGroupCreateReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.group_avatar)
  return *group_avatar_;
}
inline void DTGroupCreateReq::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.group_avatar)
}
inline void DTGroupCreateReq::set_group_avatar(const char* value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DTG.DTGroupCreateReq.group_avatar)
}
inline void DTGroupCreateReq::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DTG.DTGroupCreateReq.group_avatar)
}
inline ::std::string* DTGroupCreateReq::mutable_group_avatar() {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateReq.group_avatar)
  return group_avatar_;
}
inline ::std::string* DTGroupCreateReq::release_group_avatar() {
  clear_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_avatar_;
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DTGroupCreateReq::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (group_avatar) {
    set_has_group_avatar();
    group_avatar_ = group_avatar;
  } else {
    clear_has_group_avatar();
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGroupCreateReq.group_avatar)
}

// repeated .IM.BaseDefine.UserIdItem member_id_list = 7;
inline int DTGroupCreateReq::member_id_list_size() const {
  return member_id_list_.size();
}
inline void DTGroupCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& DTGroupCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.member_id_list)
  return member_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* DTGroupCreateReq::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateReq.member_id_list)
  return member_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* DTGroupCreateReq::add_member_id_list() {
  // @@protoc_insertion_point(field_add:IM.DTG.DTGroupCreateReq.member_id_list)
  return member_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
DTGroupCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.DTG.DTGroupCreateReq.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
DTGroupCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.DTG.DTGroupCreateReq.member_id_list)
  return &member_id_list_;
}

// optional string topic = 8;
inline bool DTGroupCreateReq::has_topic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DTGroupCreateReq::set_has_topic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DTGroupCreateReq::clear_has_topic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DTGroupCreateReq::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& DTGroupCreateReq::topic() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.topic)
  return *topic_;
}
inline void DTGroupCreateReq::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.topic)
}
inline void DTGroupCreateReq::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DTG.DTGroupCreateReq.topic)
}
inline void DTGroupCreateReq::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DTG.DTGroupCreateReq.topic)
}
inline ::std::string* DTGroupCreateReq::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateReq.topic)
  return topic_;
}
inline ::std::string* DTGroupCreateReq::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DTGroupCreateReq::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGroupCreateReq.topic)
}

// optional bytes attach_data = 20;
inline bool DTGroupCreateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DTGroupCreateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DTGroupCreateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DTGroupCreateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& DTGroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateReq.attach_data)
  return *attach_data_;
}
inline void DTGroupCreateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateReq.attach_data)
}
inline void DTGroupCreateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DTG.DTGroupCreateReq.attach_data)
}
inline void DTGroupCreateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DTG.DTGroupCreateReq.attach_data)
}
inline ::std::string* DTGroupCreateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateReq.attach_data)
  return attach_data_;
}
inline ::std::string* DTGroupCreateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DTGroupCreateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGroupCreateReq.attach_data)
}

// -------------------------------------------------------------------

// DTGroupCreateRsp

// required .IM.BaseDefine.OptResultCode result_code = 1;
inline bool DTGroupCreateRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DTGroupCreateRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DTGroupCreateRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DTGroupCreateRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode DTGroupCreateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void DTGroupCreateRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.result_code)
}

// required uint32 company_id = 2;
inline bool DTGroupCreateRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DTGroupCreateRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DTGroupCreateRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DTGroupCreateRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 DTGroupCreateRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.company_id)
  return company_id_;
}
inline void DTGroupCreateRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.company_id)
}

// required uint32 group_id = 3;
inline bool DTGroupCreateRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DTGroupCreateRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DTGroupCreateRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DTGroupCreateRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 DTGroupCreateRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.group_id)
  return group_id_;
}
inline void DTGroupCreateRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.group_id)
}

// repeated .IM.BaseDefine.UserIdItem member_id_list = 4;
inline int DTGroupCreateRsp::member_id_list_size() const {
  return member_id_list_.size();
}
inline void DTGroupCreateRsp::clear_member_id_list() {
  member_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& DTGroupCreateRsp::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.member_id_list)
  return member_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* DTGroupCreateRsp::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateRsp.member_id_list)
  return member_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* DTGroupCreateRsp::add_member_id_list() {
  // @@protoc_insertion_point(field_add:IM.DTG.DTGroupCreateRsp.member_id_list)
  return member_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
DTGroupCreateRsp::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.DTG.DTGroupCreateRsp.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
DTGroupCreateRsp::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.DTG.DTGroupCreateRsp.member_id_list)
  return &member_id_list_;
}

// required uint64 memberlist_update_time = 5;
inline bool DTGroupCreateRsp::has_memberlist_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DTGroupCreateRsp::set_has_memberlist_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DTGroupCreateRsp::clear_has_memberlist_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DTGroupCreateRsp::clear_memberlist_update_time() {
  memberlist_update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_memberlist_update_time();
}
inline ::google::protobuf::uint64 DTGroupCreateRsp::memberlist_update_time() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.memberlist_update_time)
  return memberlist_update_time_;
}
inline void DTGroupCreateRsp::set_memberlist_update_time(::google::protobuf::uint64 value) {
  set_has_memberlist_update_time();
  memberlist_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.memberlist_update_time)
}

// required .IM.BaseDefine.GroupType group_type = 6;
inline bool DTGroupCreateRsp::has_group_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DTGroupCreateRsp::set_has_group_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DTGroupCreateRsp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DTGroupCreateRsp::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType DTGroupCreateRsp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void DTGroupCreateRsp::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.group_type)
}

// required uint32 user_id = 7;
inline bool DTGroupCreateRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DTGroupCreateRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DTGroupCreateRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DTGroupCreateRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 DTGroupCreateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.user_id)
  return user_id_;
}
inline void DTGroupCreateRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.user_id)
}

// optional bytes attach_data = 20;
inline bool DTGroupCreateRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DTGroupCreateRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DTGroupCreateRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DTGroupCreateRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& DTGroupCreateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGroupCreateRsp.attach_data)
  return *attach_data_;
}
inline void DTGroupCreateRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.DTG.DTGroupCreateRsp.attach_data)
}
inline void DTGroupCreateRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DTG.DTGroupCreateRsp.attach_data)
}
inline void DTGroupCreateRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DTG.DTGroupCreateRsp.attach_data)
}
inline ::std::string* DTGroupCreateRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGroupCreateRsp.attach_data)
  return attach_data_;
}
inline ::std::string* DTGroupCreateRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DTGroupCreateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGroupCreateRsp.attach_data)
}

// -------------------------------------------------------------------

// DTGMsg

// required .IM.BaseDefine.MsgData msg_data = 1;
inline bool DTGMsg::has_msg_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DTGMsg::set_has_msg_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DTGMsg::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DTGMsg::clear_msg_data() {
  if (msg_data_ != NULL) msg_data_->::IM::BaseDefine::MsgData::Clear();
  clear_has_msg_data();
}
inline const ::IM::BaseDefine::MsgData& DTGMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGMsg.msg_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msg_data_ != NULL ? *msg_data_ : *default_instance().msg_data_;
#else
  return msg_data_ != NULL ? *msg_data_ : *default_instance_->msg_data_;
#endif
}
inline ::IM::BaseDefine::MsgData* DTGMsg::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == NULL) msg_data_ = new ::IM::BaseDefine::MsgData;
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGMsg.msg_data)
  return msg_data_;
}
inline ::IM::BaseDefine::MsgData* DTGMsg::release_msg_data() {
  clear_has_msg_data();
  ::IM::BaseDefine::MsgData* temp = msg_data_;
  msg_data_ = NULL;
  return temp;
}
inline void DTGMsg::set_allocated_msg_data(::IM::BaseDefine::MsgData* msg_data) {
  delete msg_data_;
  msg_data_ = msg_data;
  if (msg_data) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGMsg.msg_data)
}

// optional .IM.BaseDefine.UserIdItem member_id_list = 2;
inline bool DTGMsg::has_member_id_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DTGMsg::set_has_member_id_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DTGMsg::clear_has_member_id_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DTGMsg::clear_member_id_list() {
  if (member_id_list_ != NULL) member_id_list_->::IM::BaseDefine::UserIdItem::Clear();
  clear_has_member_id_list();
}
inline const ::IM::BaseDefine::UserIdItem& DTGMsg::member_id_list() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGMsg.member_id_list)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return member_id_list_ != NULL ? *member_id_list_ : *default_instance().member_id_list_;
#else
  return member_id_list_ != NULL ? *member_id_list_ : *default_instance_->member_id_list_;
#endif
}
inline ::IM::BaseDefine::UserIdItem* DTGMsg::mutable_member_id_list() {
  set_has_member_id_list();
  if (member_id_list_ == NULL) member_id_list_ = new ::IM::BaseDefine::UserIdItem;
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGMsg.member_id_list)
  return member_id_list_;
}
inline ::IM::BaseDefine::UserIdItem* DTGMsg::release_member_id_list() {
  clear_has_member_id_list();
  ::IM::BaseDefine::UserIdItem* temp = member_id_list_;
  member_id_list_ = NULL;
  return temp;
}
inline void DTGMsg::set_allocated_member_id_list(::IM::BaseDefine::UserIdItem* member_id_list) {
  delete member_id_list_;
  member_id_list_ = member_id_list;
  if (member_id_list) {
    set_has_member_id_list();
  } else {
    clear_has_member_id_list();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGMsg.member_id_list)
}

// optional bytes attach_data = 11;
inline bool DTGMsg::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DTGMsg::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DTGMsg::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DTGMsg::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& DTGMsg::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGMsg.attach_data)
  return *attach_data_;
}
inline void DTGMsg::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.DTG.DTGMsg.attach_data)
}
inline void DTGMsg::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DTG.DTGMsg.attach_data)
}
inline void DTGMsg::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DTG.DTGMsg.attach_data)
}
inline ::std::string* DTGMsg::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGMsg.attach_data)
  return attach_data_;
}
inline ::std::string* DTGMsg::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DTGMsg::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.DTG.DTGMsg.attach_data)
}

// -------------------------------------------------------------------

// DTGMsgList

// repeated .IM.DTG.DTGMsg msg_list = 1;
inline int DTGMsgList::msg_list_size() const {
  return msg_list_.size();
}
inline void DTGMsgList::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::IM::DTG::DTGMsg& DTGMsgList::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.DTG.DTGMsgList.msg_list)
  return msg_list_.Get(index);
}
inline ::IM::DTG::DTGMsg* DTGMsgList::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DTG.DTGMsgList.msg_list)
  return msg_list_.Mutable(index);
}
inline ::IM::DTG::DTGMsg* DTGMsgList::add_msg_list() {
  // @@protoc_insertion_point(field_add:IM.DTG.DTGMsgList.msg_list)
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::DTG::DTGMsg >&
DTGMsgList::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.DTG.DTGMsgList.msg_list)
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::DTG::DTGMsg >*
DTGMsgList::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.DTG.DTGMsgList.msg_list)
  return &msg_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTG
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eD2G_2eproto__INCLUDED
