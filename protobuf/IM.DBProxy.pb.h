// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.DBProxy.proto

#ifndef PROTOBUF_IM_2eDBProxy_2eproto__INCLUDED
#define PROTOBUF_IM_2eDBProxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace DBProxy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

class IMDBCompanyInfoReq;
class IMDBCompanyInfoRsp;
class IMDBUserInfoReq;
class IMDBUserInfoRsp;
class IMDBUserFriendListReq;
class IMDBUserFriendListRsp;
class IMDBUserFriendVerReq;
class IMDBUserFriendVerRsp;
class IMDBUserGroupListReq;
class IMDBUserGroupListRsp;
class IMDBGroupMemberReq;
class IMDBGroupMemberRsp;
class IMDBOrgTreeReq;
class IMDBOrgTreeRsp;
class IMDBCompanyUserListReq;
class IMDBCompanyUserListRsp;
class IMDBCompanyOrgUpdateReq;

enum DBUpdateInfoResultDef {
  DB_UPDATE_DATA_SUCCESS = 1,
  DB_UPDATE_DATA_NO_DATA = 2,
  DB_UPDATE_DATA_FAIL = 3
};
bool DBUpdateInfoResultDef_IsValid(int value);
const DBUpdateInfoResultDef DBUpdateInfoResultDef_MIN = DB_UPDATE_DATA_SUCCESS;
const DBUpdateInfoResultDef DBUpdateInfoResultDef_MAX = DB_UPDATE_DATA_FAIL;
const int DBUpdateInfoResultDef_ARRAYSIZE = DBUpdateInfoResultDef_MAX + 1;

// ===================================================================

class IMDBCompanyInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMDBCompanyInfoReq();
  virtual ~IMDBCompanyInfoReq();

  IMDBCompanyInfoReq(const IMDBCompanyInfoReq& from);

  inline IMDBCompanyInfoReq& operator=(const IMDBCompanyInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBCompanyInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBCompanyInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBCompanyInfoReq* other);

  // implements Message ----------------------------------------------

  IMDBCompanyInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBCompanyInfoReq& from);
  void MergeFrom(const IMDBCompanyInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBCompanyInfoReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBCompanyInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBCompanyInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBCompanyInfoRsp();
  virtual ~IMDBCompanyInfoRsp();

  IMDBCompanyInfoRsp(const IMDBCompanyInfoRsp& from);

  inline IMDBCompanyInfoRsp& operator=(const IMDBCompanyInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBCompanyInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBCompanyInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBCompanyInfoRsp* other);

  // implements Message ----------------------------------------------

  IMDBCompanyInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBCompanyInfoRsp& from);
  void MergeFrom(const IMDBCompanyInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBCompanyInfoRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  int update_ret_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBCompanyInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMDBUserInfoReq();
  virtual ~IMDBUserInfoReq();

  IMDBUserInfoReq(const IMDBUserInfoReq& from);

  inline IMDBUserInfoReq& operator=(const IMDBUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserInfoReq* other);

  // implements Message ----------------------------------------------

  IMDBUserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserInfoReq& from);
  void MergeFrom(const IMDBUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserInfoReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBUserInfoRsp();
  virtual ~IMDBUserInfoRsp();

  IMDBUserInfoRsp(const IMDBUserInfoRsp& from);

  inline IMDBUserInfoRsp& operator=(const IMDBUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserInfoRsp* other);

  // implements Message ----------------------------------------------

  IMDBUserInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserInfoRsp& from);
  void MergeFrom(const IMDBUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserInfoRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int update_ret_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserFriendListReq : public ::google::protobuf::MessageLite {
 public:
  IMDBUserFriendListReq();
  virtual ~IMDBUserFriendListReq();

  IMDBUserFriendListReq(const IMDBUserFriendListReq& from);

  inline IMDBUserFriendListReq& operator=(const IMDBUserFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserFriendListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserFriendListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserFriendListReq* other);

  // implements Message ----------------------------------------------

  IMDBUserFriendListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserFriendListReq& from);
  void MergeFrom(const IMDBUserFriendListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserFriendListReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserFriendListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserFriendListRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBUserFriendListRsp();
  virtual ~IMDBUserFriendListRsp();

  IMDBUserFriendListRsp(const IMDBUserFriendListRsp& from);

  inline IMDBUserFriendListRsp& operator=(const IMDBUserFriendListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserFriendListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserFriendListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserFriendListRsp* other);

  // implements Message ----------------------------------------------

  IMDBUserFriendListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserFriendListRsp& from);
  void MergeFrom(const IMDBUserFriendListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserFriendListRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int update_ret_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserFriendListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserFriendVerReq : public ::google::protobuf::MessageLite {
 public:
  IMDBUserFriendVerReq();
  virtual ~IMDBUserFriendVerReq();

  IMDBUserFriendVerReq(const IMDBUserFriendVerReq& from);

  inline IMDBUserFriendVerReq& operator=(const IMDBUserFriendVerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserFriendVerReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserFriendVerReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserFriendVerReq* other);

  // implements Message ----------------------------------------------

  IMDBUserFriendVerReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserFriendVerReq& from);
  void MergeFrom(const IMDBUserFriendVerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserFriendVerReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserFriendVerReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserFriendVerRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBUserFriendVerRsp();
  virtual ~IMDBUserFriendVerRsp();

  IMDBUserFriendVerRsp(const IMDBUserFriendVerRsp& from);

  inline IMDBUserFriendVerRsp& operator=(const IMDBUserFriendVerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserFriendVerRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserFriendVerRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserFriendVerRsp* other);

  // implements Message ----------------------------------------------

  IMDBUserFriendVerRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserFriendVerRsp& from);
  void MergeFrom(const IMDBUserFriendVerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserFriendVerRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int update_ret_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserFriendVerRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserGroupListReq : public ::google::protobuf::MessageLite {
 public:
  IMDBUserGroupListReq();
  virtual ~IMDBUserGroupListReq();

  IMDBUserGroupListReq(const IMDBUserGroupListReq& from);

  inline IMDBUserGroupListReq& operator=(const IMDBUserGroupListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserGroupListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserGroupListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserGroupListReq* other);

  // implements Message ----------------------------------------------

  IMDBUserGroupListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserGroupListReq& from);
  void MergeFrom(const IMDBUserGroupListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserGroupListReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserGroupListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBUserGroupListRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBUserGroupListRsp();
  virtual ~IMDBUserGroupListRsp();

  IMDBUserGroupListRsp(const IMDBUserGroupListRsp& from);

  inline IMDBUserGroupListRsp& operator=(const IMDBUserGroupListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBUserGroupListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBUserGroupListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBUserGroupListRsp* other);

  // implements Message ----------------------------------------------

  IMDBUserGroupListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBUserGroupListRsp& from);
  void MergeFrom(const IMDBUserGroupListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBUserGroupListRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int update_ret_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBUserGroupListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBGroupMemberReq : public ::google::protobuf::MessageLite {
 public:
  IMDBGroupMemberReq();
  virtual ~IMDBGroupMemberReq();

  IMDBGroupMemberReq(const IMDBGroupMemberReq& from);

  inline IMDBGroupMemberReq& operator=(const IMDBGroupMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBGroupMemberReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBGroupMemberReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBGroupMemberReq* other);

  // implements Message ----------------------------------------------

  IMDBGroupMemberReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBGroupMemberReq& from);
  void MergeFrom(const IMDBGroupMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBGroupMemberReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBGroupMemberReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBGroupMemberRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBGroupMemberRsp();
  virtual ~IMDBGroupMemberRsp();

  IMDBGroupMemberRsp(const IMDBGroupMemberRsp& from);

  inline IMDBGroupMemberRsp& operator=(const IMDBGroupMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBGroupMemberRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBGroupMemberRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBGroupMemberRsp* other);

  // implements Message ----------------------------------------------

  IMDBGroupMemberRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBGroupMemberRsp& from);
  void MergeFrom(const IMDBGroupMemberRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBGroupMemberRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  int update_ret_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBGroupMemberRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBOrgTreeReq : public ::google::protobuf::MessageLite {
 public:
  IMDBOrgTreeReq();
  virtual ~IMDBOrgTreeReq();

  IMDBOrgTreeReq(const IMDBOrgTreeReq& from);

  inline IMDBOrgTreeReq& operator=(const IMDBOrgTreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBOrgTreeReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBOrgTreeReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBOrgTreeReq* other);

  // implements Message ----------------------------------------------

  IMDBOrgTreeReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBOrgTreeReq& from);
  void MergeFrom(const IMDBOrgTreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBOrgTreeReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 company_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBOrgTreeReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBOrgTreeRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBOrgTreeRsp();
  virtual ~IMDBOrgTreeRsp();

  IMDBOrgTreeRsp(const IMDBOrgTreeRsp& from);

  inline IMDBOrgTreeRsp& operator=(const IMDBOrgTreeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBOrgTreeRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBOrgTreeRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBOrgTreeRsp* other);

  // implements Message ----------------------------------------------

  IMDBOrgTreeRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBOrgTreeRsp& from);
  void MergeFrom(const IMDBOrgTreeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBOrgTreeRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  int update_ret_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBOrgTreeRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBCompanyUserListReq : public ::google::protobuf::MessageLite {
 public:
  IMDBCompanyUserListReq();
  virtual ~IMDBCompanyUserListReq();

  IMDBCompanyUserListReq(const IMDBCompanyUserListReq& from);

  inline IMDBCompanyUserListReq& operator=(const IMDBCompanyUserListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBCompanyUserListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBCompanyUserListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBCompanyUserListReq* other);

  // implements Message ----------------------------------------------

  IMDBCompanyUserListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBCompanyUserListReq& from);
  void MergeFrom(const IMDBCompanyUserListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBCompanyUserListReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 opt_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBCompanyUserListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDBCompanyUserListRsp : public ::google::protobuf::MessageLite {
 public:
  IMDBCompanyUserListRsp();
  virtual ~IMDBCompanyUserListRsp();

  IMDBCompanyUserListRsp(const IMDBCompanyUserListRsp& from);

  inline IMDBCompanyUserListRsp& operator=(const IMDBCompanyUserListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBCompanyUserListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBCompanyUserListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBCompanyUserListRsp* other);

  // implements Message ----------------------------------------------

  IMDBCompanyUserListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBCompanyUserListRsp& from);
  void MergeFrom(const IMDBCompanyUserListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  inline bool has_update_ret() const;
  inline void clear_update_ret();
  static const int kUpdateRetFieldNumber = 18;
  inline ::IM::DBProxy::DBUpdateInfoResultDef update_ret() const;
  inline void set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value);

  // required uint32 opt_id = 19;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 19;
  inline ::google::protobuf::uint32 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint32 value);

  // repeated bytes attach_data = 20;
  inline int attach_data_size() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data(int index) const;
  inline ::std::string* mutable_attach_data(int index);
  inline void set_attach_data(int index, const ::std::string& value);
  inline void set_attach_data(int index, const char* value);
  inline void set_attach_data(int index, const void* value, size_t size);
  inline ::std::string* add_attach_data();
  inline void add_attach_data(const ::std::string& value);
  inline void add_attach_data(const char* value);
  inline void add_attach_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attach_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attach_data();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBCompanyUserListRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_update_ret();
  inline void clear_has_update_ret();
  inline void set_has_opt_id();
  inline void clear_has_opt_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  int update_ret_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attach_data_;
  ::google::protobuf::uint32 opt_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBCompanyUserListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMDBCompanyOrgUpdateReq : public ::google::protobuf::MessageLite {
 public:
  IMDBCompanyOrgUpdateReq();
  virtual ~IMDBCompanyOrgUpdateReq();

  IMDBCompanyOrgUpdateReq(const IMDBCompanyOrgUpdateReq& from);

  inline IMDBCompanyOrgUpdateReq& operator=(const IMDBCompanyOrgUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDBCompanyOrgUpdateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDBCompanyOrgUpdateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDBCompanyOrgUpdateReq* other);

  // implements Message ----------------------------------------------

  IMDBCompanyOrgUpdateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDBCompanyOrgUpdateReq& from);
  void MergeFrom(const IMDBCompanyOrgUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_opt_type = 2;
  inline bool has_user_opt_type() const;
  inline void clear_user_opt_type();
  static const int kUserOptTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 user_opt_type() const;
  inline void set_user_opt_type(::google::protobuf::uint32 value);

  // repeated uint32 user_list = 3;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 3;
  inline ::google::protobuf::uint32 user_list(int index) const;
  inline void set_user_list(int index, ::google::protobuf::uint32 value);
  inline void add_user_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_list();

  // @@protoc_insertion_point(class_scope:IM.DBProxy.IMDBCompanyOrgUpdateReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_opt_type();
  inline void clear_has_user_opt_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_opt_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eDBProxy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eDBProxy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eDBProxy_2eproto();

  void InitAsDefaultInstance();
  static IMDBCompanyOrgUpdateReq* default_instance_;
};
// ===================================================================


// ===================================================================

// IMDBCompanyInfoReq

// required uint32 company_id = 1;
inline bool IMDBCompanyInfoReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBCompanyInfoReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBCompanyInfoReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBCompanyInfoReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBCompanyInfoReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoReq.company_id)
  return company_id_;
}
inline void IMDBCompanyInfoReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoReq.company_id)
}

// required uint32 opt_id = 19;
inline bool IMDBCompanyInfoReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBCompanyInfoReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBCompanyInfoReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBCompanyInfoReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBCompanyInfoReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoReq.opt_id)
  return opt_id_;
}
inline void IMDBCompanyInfoReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBCompanyInfoReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBCompanyInfoReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBCompanyInfoReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBCompanyInfoReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBCompanyInfoReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBCompanyInfoReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
}
inline void IMDBCompanyInfoReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
}
inline ::std::string* IMDBCompanyInfoReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBCompanyInfoReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
}
inline void IMDBCompanyInfoReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
}
inline void IMDBCompanyInfoReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBCompanyInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBCompanyInfoReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBCompanyInfoReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBCompanyInfoRsp

// required uint32 company_id = 1;
inline bool IMDBCompanyInfoRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBCompanyInfoRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBCompanyInfoRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBCompanyInfoRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBCompanyInfoRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoRsp.company_id)
  return company_id_;
}
inline void IMDBCompanyInfoRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoRsp.company_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBCompanyInfoRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBCompanyInfoRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBCompanyInfoRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBCompanyInfoRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBCompanyInfoRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBCompanyInfoRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBCompanyInfoRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBCompanyInfoRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBCompanyInfoRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBCompanyInfoRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBCompanyInfoRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoRsp.opt_id)
  return opt_id_;
}
inline void IMDBCompanyInfoRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBCompanyInfoRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBCompanyInfoRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBCompanyInfoRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBCompanyInfoRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBCompanyInfoRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBCompanyInfoRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
}
inline void IMDBCompanyInfoRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
}
inline ::std::string* IMDBCompanyInfoRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBCompanyInfoRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
}
inline void IMDBCompanyInfoRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
}
inline void IMDBCompanyInfoRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBCompanyInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBCompanyInfoRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBCompanyInfoRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserInfoReq

// required uint32 company_id = 1;
inline bool IMDBUserInfoReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserInfoReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserInfoReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserInfoReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserInfoReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoReq.company_id)
  return company_id_;
}
inline void IMDBUserInfoReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoReq.user_id)
  return user_id_;
}
inline void IMDBUserInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoReq.user_id)
}

// required uint32 opt_id = 19;
inline bool IMDBUserInfoReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserInfoReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserInfoReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserInfoReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserInfoReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoReq.opt_id)
  return opt_id_;
}
inline void IMDBUserInfoReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserInfoReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserInfoReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserInfoReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserInfoReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserInfoReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserInfoReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserInfoReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserInfoReq.attach_data)
}
inline void IMDBUserInfoReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserInfoReq.attach_data)
}
inline ::std::string* IMDBUserInfoReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserInfoReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserInfoReq.attach_data)
}
inline void IMDBUserInfoReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserInfoReq.attach_data)
}
inline void IMDBUserInfoReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserInfoReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserInfoReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserInfoReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserInfoReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserInfoRsp

// required uint32 company_id = 1;
inline bool IMDBUserInfoRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserInfoRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserInfoRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserInfoRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserInfoRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoRsp.company_id)
  return company_id_;
}
inline void IMDBUserInfoRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserInfoRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserInfoRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserInfoRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserInfoRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoRsp.user_id)
  return user_id_;
}
inline void IMDBUserInfoRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoRsp.user_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBUserInfoRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserInfoRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserInfoRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserInfoRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBUserInfoRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBUserInfoRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBUserInfoRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDBUserInfoRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDBUserInfoRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDBUserInfoRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserInfoRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoRsp.opt_id)
  return opt_id_;
}
inline void IMDBUserInfoRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserInfoRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserInfoRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserInfoRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserInfoRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserInfoRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserInfoRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserInfoRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserInfoRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserInfoRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserInfoRsp.attach_data)
}
inline void IMDBUserInfoRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserInfoRsp.attach_data)
}
inline ::std::string* IMDBUserInfoRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserInfoRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserInfoRsp.attach_data)
}
inline void IMDBUserInfoRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserInfoRsp.attach_data)
}
inline void IMDBUserInfoRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserInfoRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserInfoRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserInfoRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserInfoRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserFriendListReq

// required uint32 company_id = 1;
inline bool IMDBUserFriendListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserFriendListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserFriendListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserFriendListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListReq.company_id)
  return company_id_;
}
inline void IMDBUserFriendListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserFriendListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserFriendListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserFriendListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserFriendListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListReq.user_id)
  return user_id_;
}
inline void IMDBUserFriendListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListReq.user_id)
}

// required uint32 opt_id = 19;
inline bool IMDBUserFriendListReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserFriendListReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserFriendListReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserFriendListReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendListReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListReq.opt_id)
  return opt_id_;
}
inline void IMDBUserFriendListReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserFriendListReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserFriendListReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserFriendListReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserFriendListReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserFriendListReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserFriendListReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserFriendListReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserFriendListReq.attach_data)
}
inline void IMDBUserFriendListReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserFriendListReq.attach_data)
}
inline ::std::string* IMDBUserFriendListReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserFriendListReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserFriendListReq.attach_data)
}
inline void IMDBUserFriendListReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserFriendListReq.attach_data)
}
inline void IMDBUserFriendListReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserFriendListReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserFriendListReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserFriendListReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserFriendListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserFriendListReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserFriendListRsp

// required uint32 company_id = 1;
inline bool IMDBUserFriendListRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserFriendListRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserFriendListRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserFriendListRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendListRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListRsp.company_id)
  return company_id_;
}
inline void IMDBUserFriendListRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserFriendListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserFriendListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserFriendListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserFriendListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListRsp.user_id)
  return user_id_;
}
inline void IMDBUserFriendListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListRsp.user_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBUserFriendListRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserFriendListRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserFriendListRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserFriendListRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBUserFriendListRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBUserFriendListRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBUserFriendListRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDBUserFriendListRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDBUserFriendListRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDBUserFriendListRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendListRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListRsp.opt_id)
  return opt_id_;
}
inline void IMDBUserFriendListRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserFriendListRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserFriendListRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserFriendListRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserFriendListRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserFriendListRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserFriendListRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
}
inline void IMDBUserFriendListRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
}
inline ::std::string* IMDBUserFriendListRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserFriendListRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
}
inline void IMDBUserFriendListRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
}
inline void IMDBUserFriendListRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserFriendListRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserFriendListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserFriendListRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserFriendVerReq

// required uint32 company_id = 1;
inline bool IMDBUserFriendVerReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserFriendVerReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserFriendVerReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserFriendVerReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendVerReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerReq.company_id)
  return company_id_;
}
inline void IMDBUserFriendVerReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserFriendVerReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserFriendVerReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserFriendVerReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserFriendVerReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendVerReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerReq.user_id)
  return user_id_;
}
inline void IMDBUserFriendVerReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerReq.user_id)
}

// required uint32 opt_id = 19;
inline bool IMDBUserFriendVerReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserFriendVerReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserFriendVerReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserFriendVerReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendVerReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerReq.opt_id)
  return opt_id_;
}
inline void IMDBUserFriendVerReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserFriendVerReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserFriendVerReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserFriendVerReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserFriendVerReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserFriendVerReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserFriendVerReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
}
inline void IMDBUserFriendVerReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
}
inline ::std::string* IMDBUserFriendVerReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserFriendVerReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
}
inline void IMDBUserFriendVerReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
}
inline void IMDBUserFriendVerReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserFriendVerReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserFriendVerReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserFriendVerReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserFriendVerRsp

// required uint32 company_id = 1;
inline bool IMDBUserFriendVerRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserFriendVerRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserFriendVerRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserFriendVerRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendVerRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerRsp.company_id)
  return company_id_;
}
inline void IMDBUserFriendVerRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserFriendVerRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserFriendVerRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserFriendVerRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserFriendVerRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendVerRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerRsp.user_id)
  return user_id_;
}
inline void IMDBUserFriendVerRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerRsp.user_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBUserFriendVerRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserFriendVerRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserFriendVerRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserFriendVerRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBUserFriendVerRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBUserFriendVerRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBUserFriendVerRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDBUserFriendVerRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDBUserFriendVerRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDBUserFriendVerRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserFriendVerRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerRsp.opt_id)
  return opt_id_;
}
inline void IMDBUserFriendVerRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserFriendVerRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserFriendVerRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserFriendVerRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserFriendVerRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserFriendVerRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserFriendVerRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
}
inline void IMDBUserFriendVerRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
}
inline ::std::string* IMDBUserFriendVerRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserFriendVerRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
}
inline void IMDBUserFriendVerRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
}
inline void IMDBUserFriendVerRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserFriendVerRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserFriendVerRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserFriendVerRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserGroupListReq

// required uint32 company_id = 1;
inline bool IMDBUserGroupListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserGroupListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserGroupListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserGroupListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserGroupListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListReq.company_id)
  return company_id_;
}
inline void IMDBUserGroupListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserGroupListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserGroupListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserGroupListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserGroupListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserGroupListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListReq.user_id)
  return user_id_;
}
inline void IMDBUserGroupListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListReq.user_id)
}

// required uint32 opt_id = 19;
inline bool IMDBUserGroupListReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserGroupListReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserGroupListReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserGroupListReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserGroupListReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListReq.opt_id)
  return opt_id_;
}
inline void IMDBUserGroupListReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserGroupListReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserGroupListReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserGroupListReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserGroupListReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserGroupListReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserGroupListReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserGroupListReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserGroupListReq.attach_data)
}
inline void IMDBUserGroupListReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserGroupListReq.attach_data)
}
inline ::std::string* IMDBUserGroupListReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserGroupListReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserGroupListReq.attach_data)
}
inline void IMDBUserGroupListReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserGroupListReq.attach_data)
}
inline void IMDBUserGroupListReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserGroupListReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserGroupListReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserGroupListReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserGroupListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserGroupListReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBUserGroupListRsp

// required uint32 company_id = 1;
inline bool IMDBUserGroupListRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBUserGroupListRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBUserGroupListRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBUserGroupListRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBUserGroupListRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListRsp.company_id)
  return company_id_;
}
inline void IMDBUserGroupListRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMDBUserGroupListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBUserGroupListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBUserGroupListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBUserGroupListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDBUserGroupListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListRsp.user_id)
  return user_id_;
}
inline void IMDBUserGroupListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListRsp.user_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBUserGroupListRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBUserGroupListRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBUserGroupListRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBUserGroupListRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBUserGroupListRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBUserGroupListRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBUserGroupListRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDBUserGroupListRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDBUserGroupListRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDBUserGroupListRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBUserGroupListRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListRsp.opt_id)
  return opt_id_;
}
inline void IMDBUserGroupListRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBUserGroupListRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBUserGroupListRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBUserGroupListRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBUserGroupListRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBUserGroupListRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBUserGroupListRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
}
inline void IMDBUserGroupListRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
}
inline ::std::string* IMDBUserGroupListRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBUserGroupListRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
}
inline void IMDBUserGroupListRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
}
inline void IMDBUserGroupListRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBUserGroupListRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBUserGroupListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBUserGroupListRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBGroupMemberReq

// required uint32 company_id = 1;
inline bool IMDBGroupMemberReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBGroupMemberReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBGroupMemberReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBGroupMemberReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBGroupMemberReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberReq.company_id)
  return company_id_;
}
inline void IMDBGroupMemberReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberReq.company_id)
}

// required uint32 group_id = 2;
inline bool IMDBGroupMemberReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBGroupMemberReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBGroupMemberReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBGroupMemberReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMDBGroupMemberReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberReq.group_id)
  return group_id_;
}
inline void IMDBGroupMemberReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberReq.group_id)
}

// required uint32 opt_id = 19;
inline bool IMDBGroupMemberReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBGroupMemberReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBGroupMemberReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBGroupMemberReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBGroupMemberReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberReq.opt_id)
  return opt_id_;
}
inline void IMDBGroupMemberReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBGroupMemberReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBGroupMemberReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBGroupMemberReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBGroupMemberReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBGroupMemberReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBGroupMemberReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBGroupMemberReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBGroupMemberReq.attach_data)
}
inline void IMDBGroupMemberReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBGroupMemberReq.attach_data)
}
inline ::std::string* IMDBGroupMemberReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBGroupMemberReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBGroupMemberReq.attach_data)
}
inline void IMDBGroupMemberReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBGroupMemberReq.attach_data)
}
inline void IMDBGroupMemberReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBGroupMemberReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBGroupMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBGroupMemberReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBGroupMemberReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBGroupMemberReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBGroupMemberRsp

// required uint32 company_id = 1;
inline bool IMDBGroupMemberRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBGroupMemberRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBGroupMemberRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBGroupMemberRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBGroupMemberRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberRsp.company_id)
  return company_id_;
}
inline void IMDBGroupMemberRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberRsp.company_id)
}

// required uint32 group_id = 2;
inline bool IMDBGroupMemberRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBGroupMemberRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBGroupMemberRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBGroupMemberRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMDBGroupMemberRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberRsp.group_id)
  return group_id_;
}
inline void IMDBGroupMemberRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberRsp.group_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBGroupMemberRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBGroupMemberRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBGroupMemberRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBGroupMemberRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBGroupMemberRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBGroupMemberRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBGroupMemberRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDBGroupMemberRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDBGroupMemberRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDBGroupMemberRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBGroupMemberRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberRsp.opt_id)
  return opt_id_;
}
inline void IMDBGroupMemberRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBGroupMemberRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBGroupMemberRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBGroupMemberRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBGroupMemberRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBGroupMemberRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBGroupMemberRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
}
inline void IMDBGroupMemberRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
}
inline ::std::string* IMDBGroupMemberRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBGroupMemberRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
}
inline void IMDBGroupMemberRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
}
inline void IMDBGroupMemberRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBGroupMemberRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBGroupMemberRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBGroupMemberRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBOrgTreeReq

// required uint32 company_id = 1;
inline bool IMDBOrgTreeReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBOrgTreeReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBOrgTreeReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBOrgTreeReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBOrgTreeReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBOrgTreeReq.company_id)
  return company_id_;
}
inline void IMDBOrgTreeReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBOrgTreeReq.company_id)
}

// repeated bytes attach_data = 20;
inline int IMDBOrgTreeReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBOrgTreeReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBOrgTreeReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBOrgTreeReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBOrgTreeReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBOrgTreeReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBOrgTreeReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBOrgTreeReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBOrgTreeReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBOrgTreeReq.attach_data)
}
inline void IMDBOrgTreeReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBOrgTreeReq.attach_data)
}
inline ::std::string* IMDBOrgTreeReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBOrgTreeReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBOrgTreeReq.attach_data)
}
inline void IMDBOrgTreeReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBOrgTreeReq.attach_data)
}
inline void IMDBOrgTreeReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBOrgTreeReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBOrgTreeReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBOrgTreeReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBOrgTreeReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBOrgTreeReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBOrgTreeRsp

// required uint32 company_id = 1;
inline bool IMDBOrgTreeRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBOrgTreeRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBOrgTreeRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBOrgTreeRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBOrgTreeRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBOrgTreeRsp.company_id)
  return company_id_;
}
inline void IMDBOrgTreeRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBOrgTreeRsp.company_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBOrgTreeRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBOrgTreeRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBOrgTreeRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBOrgTreeRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBOrgTreeRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBOrgTreeRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBOrgTreeRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBOrgTreeRsp.update_ret)
}

// repeated bytes attach_data = 20;
inline int IMDBOrgTreeRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBOrgTreeRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBOrgTreeRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBOrgTreeRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBOrgTreeRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBOrgTreeRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
}
inline void IMDBOrgTreeRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
}
inline ::std::string* IMDBOrgTreeRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBOrgTreeRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
}
inline void IMDBOrgTreeRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
}
inline void IMDBOrgTreeRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBOrgTreeRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBOrgTreeRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBOrgTreeRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBCompanyUserListReq

// required uint32 company_id = 1;
inline bool IMDBCompanyUserListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBCompanyUserListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBCompanyUserListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBCompanyUserListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBCompanyUserListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListReq.company_id)
  return company_id_;
}
inline void IMDBCompanyUserListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListReq.company_id)
}

// required uint32 opt_id = 19;
inline bool IMDBCompanyUserListReq::has_opt_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBCompanyUserListReq::set_has_opt_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBCompanyUserListReq::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBCompanyUserListReq::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBCompanyUserListReq::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListReq.opt_id)
  return opt_id_;
}
inline void IMDBCompanyUserListReq::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListReq.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBCompanyUserListReq::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBCompanyUserListReq::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBCompanyUserListReq::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBCompanyUserListReq::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBCompanyUserListReq::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBCompanyUserListReq::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
}
inline void IMDBCompanyUserListReq::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
}
inline ::std::string* IMDBCompanyUserListReq::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBCompanyUserListReq::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
}
inline void IMDBCompanyUserListReq::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
}
inline void IMDBCompanyUserListReq::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBCompanyUserListReq::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBCompanyUserListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBCompanyUserListReq.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBCompanyUserListRsp

// required uint32 company_id = 1;
inline bool IMDBCompanyUserListRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBCompanyUserListRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBCompanyUserListRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBCompanyUserListRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBCompanyUserListRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListRsp.company_id)
  return company_id_;
}
inline void IMDBCompanyUserListRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListRsp.company_id)
}

// required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
inline bool IMDBCompanyUserListRsp::has_update_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBCompanyUserListRsp::set_has_update_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBCompanyUserListRsp::clear_has_update_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBCompanyUserListRsp::clear_update_ret() {
  update_ret_ = 1;
  clear_has_update_ret();
}
inline ::IM::DBProxy::DBUpdateInfoResultDef IMDBCompanyUserListRsp::update_ret() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListRsp.update_ret)
  return static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(update_ret_);
}
inline void IMDBCompanyUserListRsp::set_update_ret(::IM::DBProxy::DBUpdateInfoResultDef value) {
  assert(::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value));
  set_has_update_ret();
  update_ret_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListRsp.update_ret)
}

// required uint32 opt_id = 19;
inline bool IMDBCompanyUserListRsp::has_opt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDBCompanyUserListRsp::set_has_opt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDBCompanyUserListRsp::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDBCompanyUserListRsp::clear_opt_id() {
  opt_id_ = 0u;
  clear_has_opt_id();
}
inline ::google::protobuf::uint32 IMDBCompanyUserListRsp::opt_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListRsp.opt_id)
  return opt_id_;
}
inline void IMDBCompanyUserListRsp::set_opt_id(::google::protobuf::uint32 value) {
  set_has_opt_id();
  opt_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListRsp.opt_id)
}

// repeated bytes attach_data = 20;
inline int IMDBCompanyUserListRsp::attach_data_size() const {
  return attach_data_.size();
}
inline void IMDBCompanyUserListRsp::clear_attach_data() {
  attach_data_.Clear();
}
inline const ::std::string& IMDBCompanyUserListRsp::attach_data(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
  return attach_data_.Get(index);
}
inline ::std::string* IMDBCompanyUserListRsp::mutable_attach_data(int index) {
  // @@protoc_insertion_point(field_mutable:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
  return attach_data_.Mutable(index);
}
inline void IMDBCompanyUserListRsp::set_attach_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
  attach_data_.Mutable(index)->assign(value);
}
inline void IMDBCompanyUserListRsp::set_attach_data(int index, const char* value) {
  attach_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
}
inline void IMDBCompanyUserListRsp::set_attach_data(int index, const void* value, size_t size) {
  attach_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
}
inline ::std::string* IMDBCompanyUserListRsp::add_attach_data() {
  return attach_data_.Add();
}
inline void IMDBCompanyUserListRsp::add_attach_data(const ::std::string& value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
}
inline void IMDBCompanyUserListRsp::add_attach_data(const char* value) {
  attach_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
}
inline void IMDBCompanyUserListRsp::add_attach_data(const void* value, size_t size) {
  attach_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMDBCompanyUserListRsp::attach_data() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
  return attach_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMDBCompanyUserListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBCompanyUserListRsp.attach_data)
  return &attach_data_;
}

// -------------------------------------------------------------------

// IMDBCompanyOrgUpdateReq

// required uint32 company_id = 1;
inline bool IMDBCompanyOrgUpdateReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDBCompanyOrgUpdateReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDBCompanyOrgUpdateReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDBCompanyOrgUpdateReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMDBCompanyOrgUpdateReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyOrgUpdateReq.company_id)
  return company_id_;
}
inline void IMDBCompanyOrgUpdateReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyOrgUpdateReq.company_id)
}

// required uint32 user_opt_type = 2;
inline bool IMDBCompanyOrgUpdateReq::has_user_opt_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDBCompanyOrgUpdateReq::set_has_user_opt_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDBCompanyOrgUpdateReq::clear_has_user_opt_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDBCompanyOrgUpdateReq::clear_user_opt_type() {
  user_opt_type_ = 0u;
  clear_has_user_opt_type();
}
inline ::google::protobuf::uint32 IMDBCompanyOrgUpdateReq::user_opt_type() const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_opt_type)
  return user_opt_type_;
}
inline void IMDBCompanyOrgUpdateReq::set_user_opt_type(::google::protobuf::uint32 value) {
  set_has_user_opt_type();
  user_opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_opt_type)
}

// repeated uint32 user_list = 3;
inline int IMDBCompanyOrgUpdateReq::user_list_size() const {
  return user_list_.size();
}
inline void IMDBCompanyOrgUpdateReq::clear_user_list() {
  user_list_.Clear();
}
inline ::google::protobuf::uint32 IMDBCompanyOrgUpdateReq::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_list)
  return user_list_.Get(index);
}
inline void IMDBCompanyOrgUpdateReq::set_user_list(int index, ::google::protobuf::uint32 value) {
  user_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_list)
}
inline void IMDBCompanyOrgUpdateReq::add_user_list(::google::protobuf::uint32 value) {
  user_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMDBCompanyOrgUpdateReq::user_list() const {
  // @@protoc_insertion_point(field_list:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_list)
  return user_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMDBCompanyOrgUpdateReq::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.DBProxy.IMDBCompanyOrgUpdateReq.user_list)
  return &user_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBProxy
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eDBProxy_2eproto__INCLUDED
