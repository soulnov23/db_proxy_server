// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.DBProxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.DBProxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace DBProxy {

void protobuf_ShutdownFile_IM_2eDBProxy_2eproto() {
  delete IMDBCompanyInfoReq::default_instance_;
  delete IMDBCompanyInfoRsp::default_instance_;
  delete IMDBUserInfoReq::default_instance_;
  delete IMDBUserInfoRsp::default_instance_;
  delete IMDBUserFriendListReq::default_instance_;
  delete IMDBUserFriendListRsp::default_instance_;
  delete IMDBUserFriendVerReq::default_instance_;
  delete IMDBUserFriendVerRsp::default_instance_;
  delete IMDBUserGroupListReq::default_instance_;
  delete IMDBUserGroupListRsp::default_instance_;
  delete IMDBGroupMemberReq::default_instance_;
  delete IMDBGroupMemberRsp::default_instance_;
  delete IMDBOrgTreeReq::default_instance_;
  delete IMDBOrgTreeRsp::default_instance_;
  delete IMDBCompanyUserListReq::default_instance_;
  delete IMDBCompanyUserListRsp::default_instance_;
  delete IMDBCompanyOrgUpdateReq::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eDBProxy_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eDBProxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  IMDBCompanyInfoReq::default_instance_ = new IMDBCompanyInfoReq();
  IMDBCompanyInfoRsp::default_instance_ = new IMDBCompanyInfoRsp();
  IMDBUserInfoReq::default_instance_ = new IMDBUserInfoReq();
  IMDBUserInfoRsp::default_instance_ = new IMDBUserInfoRsp();
  IMDBUserFriendListReq::default_instance_ = new IMDBUserFriendListReq();
  IMDBUserFriendListRsp::default_instance_ = new IMDBUserFriendListRsp();
  IMDBUserFriendVerReq::default_instance_ = new IMDBUserFriendVerReq();
  IMDBUserFriendVerRsp::default_instance_ = new IMDBUserFriendVerRsp();
  IMDBUserGroupListReq::default_instance_ = new IMDBUserGroupListReq();
  IMDBUserGroupListRsp::default_instance_ = new IMDBUserGroupListRsp();
  IMDBGroupMemberReq::default_instance_ = new IMDBGroupMemberReq();
  IMDBGroupMemberRsp::default_instance_ = new IMDBGroupMemberRsp();
  IMDBOrgTreeReq::default_instance_ = new IMDBOrgTreeReq();
  IMDBOrgTreeRsp::default_instance_ = new IMDBOrgTreeRsp();
  IMDBCompanyUserListReq::default_instance_ = new IMDBCompanyUserListReq();
  IMDBCompanyUserListRsp::default_instance_ = new IMDBCompanyUserListRsp();
  IMDBCompanyOrgUpdateReq::default_instance_ = new IMDBCompanyOrgUpdateReq();
  IMDBCompanyInfoReq::default_instance_->InitAsDefaultInstance();
  IMDBCompanyInfoRsp::default_instance_->InitAsDefaultInstance();
  IMDBUserInfoReq::default_instance_->InitAsDefaultInstance();
  IMDBUserInfoRsp::default_instance_->InitAsDefaultInstance();
  IMDBUserFriendListReq::default_instance_->InitAsDefaultInstance();
  IMDBUserFriendListRsp::default_instance_->InitAsDefaultInstance();
  IMDBUserFriendVerReq::default_instance_->InitAsDefaultInstance();
  IMDBUserFriendVerRsp::default_instance_->InitAsDefaultInstance();
  IMDBUserGroupListReq::default_instance_->InitAsDefaultInstance();
  IMDBUserGroupListRsp::default_instance_->InitAsDefaultInstance();
  IMDBGroupMemberReq::default_instance_->InitAsDefaultInstance();
  IMDBGroupMemberRsp::default_instance_->InitAsDefaultInstance();
  IMDBOrgTreeReq::default_instance_->InitAsDefaultInstance();
  IMDBOrgTreeRsp::default_instance_->InitAsDefaultInstance();
  IMDBCompanyUserListReq::default_instance_->InitAsDefaultInstance();
  IMDBCompanyUserListRsp::default_instance_->InitAsDefaultInstance();
  IMDBCompanyOrgUpdateReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eDBProxy_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eDBProxy_2eproto_once_);
void protobuf_AddDesc_IM_2eDBProxy_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eDBProxy_2eproto_once_,
                 &protobuf_AddDesc_IM_2eDBProxy_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eDBProxy_2eproto {
  StaticDescriptorInitializer_IM_2eDBProxy_2eproto() {
    protobuf_AddDesc_IM_2eDBProxy_2eproto();
  }
} static_descriptor_initializer_IM_2eDBProxy_2eproto_;
#endif
bool DBUpdateInfoResultDef_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBCompanyInfoReq::kCompanyIdFieldNumber;
const int IMDBCompanyInfoReq::kOptIdFieldNumber;
const int IMDBCompanyInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBCompanyInfoReq::IMDBCompanyInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBCompanyInfoReq)
}

void IMDBCompanyInfoReq::InitAsDefaultInstance() {
}

IMDBCompanyInfoReq::IMDBCompanyInfoReq(const IMDBCompanyInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBCompanyInfoReq)
}

void IMDBCompanyInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBCompanyInfoReq::~IMDBCompanyInfoReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBCompanyInfoReq)
  SharedDtor();
}

void IMDBCompanyInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBCompanyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBCompanyInfoReq& IMDBCompanyInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBCompanyInfoReq* IMDBCompanyInfoReq::default_instance_ = NULL;

IMDBCompanyInfoReq* IMDBCompanyInfoReq::New() const {
  return new IMDBCompanyInfoReq;
}

void IMDBCompanyInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBCompanyInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, opt_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBCompanyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBCompanyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBCompanyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBCompanyInfoReq)
  return false;
#undef DO_
}

void IMDBCompanyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBCompanyInfoReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBCompanyInfoReq)
}

int IMDBCompanyInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBCompanyInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBCompanyInfoReq*>(&from));
}

void IMDBCompanyInfoReq::MergeFrom(const IMDBCompanyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBCompanyInfoReq::CopyFrom(const IMDBCompanyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBCompanyInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDBCompanyInfoReq::Swap(IMDBCompanyInfoReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBCompanyInfoReq::GetTypeName() const {
  return "IM.DBProxy.IMDBCompanyInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBCompanyInfoRsp::kCompanyIdFieldNumber;
const int IMDBCompanyInfoRsp::kUpdateRetFieldNumber;
const int IMDBCompanyInfoRsp::kOptIdFieldNumber;
const int IMDBCompanyInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBCompanyInfoRsp::IMDBCompanyInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBCompanyInfoRsp)
}

void IMDBCompanyInfoRsp::InitAsDefaultInstance() {
}

IMDBCompanyInfoRsp::IMDBCompanyInfoRsp(const IMDBCompanyInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBCompanyInfoRsp)
}

void IMDBCompanyInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBCompanyInfoRsp::~IMDBCompanyInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBCompanyInfoRsp)
  SharedDtor();
}

void IMDBCompanyInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBCompanyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBCompanyInfoRsp& IMDBCompanyInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBCompanyInfoRsp* IMDBCompanyInfoRsp::default_instance_ = NULL;

IMDBCompanyInfoRsp* IMDBCompanyInfoRsp::New() const {
  return new IMDBCompanyInfoRsp;
}

void IMDBCompanyInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    company_id_ = 0u;
    update_ret_ = 1;
    opt_id_ = 0u;
  }
  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBCompanyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBCompanyInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBCompanyInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBCompanyInfoRsp)
  return false;
#undef DO_
}

void IMDBCompanyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBCompanyInfoRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBCompanyInfoRsp)
}

int IMDBCompanyInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBCompanyInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBCompanyInfoRsp*>(&from));
}

void IMDBCompanyInfoRsp::MergeFrom(const IMDBCompanyInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBCompanyInfoRsp::CopyFrom(const IMDBCompanyInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBCompanyInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBCompanyInfoRsp::Swap(IMDBCompanyInfoRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBCompanyInfoRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBCompanyInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserInfoReq::kCompanyIdFieldNumber;
const int IMDBUserInfoReq::kUserIdFieldNumber;
const int IMDBUserInfoReq::kOptIdFieldNumber;
const int IMDBUserInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserInfoReq::IMDBUserInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserInfoReq)
}

void IMDBUserInfoReq::InitAsDefaultInstance() {
}

IMDBUserInfoReq::IMDBUserInfoReq(const IMDBUserInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserInfoReq)
}

void IMDBUserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserInfoReq::~IMDBUserInfoReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserInfoReq)
  SharedDtor();
}

void IMDBUserInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserInfoReq& IMDBUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserInfoReq* IMDBUserInfoReq::default_instance_ = NULL;

IMDBUserInfoReq* IMDBUserInfoReq::New() const {
  return new IMDBUserInfoReq;
}

void IMDBUserInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserInfoReq)
  return false;
#undef DO_
}

void IMDBUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserInfoReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserInfoReq)
}

int IMDBUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserInfoReq*>(&from));
}

void IMDBUserInfoReq::MergeFrom(const IMDBUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserInfoReq::CopyFrom(const IMDBUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBUserInfoReq::Swap(IMDBUserInfoReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserInfoReq::GetTypeName() const {
  return "IM.DBProxy.IMDBUserInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserInfoRsp::kCompanyIdFieldNumber;
const int IMDBUserInfoRsp::kUserIdFieldNumber;
const int IMDBUserInfoRsp::kUpdateRetFieldNumber;
const int IMDBUserInfoRsp::kOptIdFieldNumber;
const int IMDBUserInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserInfoRsp::IMDBUserInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserInfoRsp)
}

void IMDBUserInfoRsp::InitAsDefaultInstance() {
}

IMDBUserInfoRsp::IMDBUserInfoRsp(const IMDBUserInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserInfoRsp)
}

void IMDBUserInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserInfoRsp::~IMDBUserInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserInfoRsp)
  SharedDtor();
}

void IMDBUserInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserInfoRsp& IMDBUserInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserInfoRsp* IMDBUserInfoRsp::default_instance_ = NULL;

IMDBUserInfoRsp* IMDBUserInfoRsp::New() const {
  return new IMDBUserInfoRsp;
}

void IMDBUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    update_ret_ = 1;
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserInfoRsp)
  return false;
#undef DO_
}

void IMDBUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserInfoRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserInfoRsp)
}

int IMDBUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserInfoRsp*>(&from));
}

void IMDBUserInfoRsp::MergeFrom(const IMDBUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserInfoRsp::CopyFrom(const IMDBUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMDBUserInfoRsp::Swap(IMDBUserInfoRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserInfoRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBUserInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserFriendListReq::kCompanyIdFieldNumber;
const int IMDBUserFriendListReq::kUserIdFieldNumber;
const int IMDBUserFriendListReq::kOptIdFieldNumber;
const int IMDBUserFriendListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserFriendListReq::IMDBUserFriendListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserFriendListReq)
}

void IMDBUserFriendListReq::InitAsDefaultInstance() {
}

IMDBUserFriendListReq::IMDBUserFriendListReq(const IMDBUserFriendListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserFriendListReq)
}

void IMDBUserFriendListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserFriendListReq::~IMDBUserFriendListReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserFriendListReq)
  SharedDtor();
}

void IMDBUserFriendListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserFriendListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserFriendListReq& IMDBUserFriendListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserFriendListReq* IMDBUserFriendListReq::default_instance_ = NULL;

IMDBUserFriendListReq* IMDBUserFriendListReq::New() const {
  return new IMDBUserFriendListReq;
}

void IMDBUserFriendListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserFriendListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserFriendListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserFriendListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserFriendListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserFriendListReq)
  return false;
#undef DO_
}

void IMDBUserFriendListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserFriendListReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserFriendListReq)
}

int IMDBUserFriendListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserFriendListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserFriendListReq*>(&from));
}

void IMDBUserFriendListReq::MergeFrom(const IMDBUserFriendListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserFriendListReq::CopyFrom(const IMDBUserFriendListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserFriendListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBUserFriendListReq::Swap(IMDBUserFriendListReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserFriendListReq::GetTypeName() const {
  return "IM.DBProxy.IMDBUserFriendListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserFriendListRsp::kCompanyIdFieldNumber;
const int IMDBUserFriendListRsp::kUserIdFieldNumber;
const int IMDBUserFriendListRsp::kUpdateRetFieldNumber;
const int IMDBUserFriendListRsp::kOptIdFieldNumber;
const int IMDBUserFriendListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserFriendListRsp::IMDBUserFriendListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserFriendListRsp)
}

void IMDBUserFriendListRsp::InitAsDefaultInstance() {
}

IMDBUserFriendListRsp::IMDBUserFriendListRsp(const IMDBUserFriendListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserFriendListRsp)
}

void IMDBUserFriendListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserFriendListRsp::~IMDBUserFriendListRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserFriendListRsp)
  SharedDtor();
}

void IMDBUserFriendListRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserFriendListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserFriendListRsp& IMDBUserFriendListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserFriendListRsp* IMDBUserFriendListRsp::default_instance_ = NULL;

IMDBUserFriendListRsp* IMDBUserFriendListRsp::New() const {
  return new IMDBUserFriendListRsp;
}

void IMDBUserFriendListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserFriendListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    update_ret_ = 1;
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserFriendListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserFriendListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserFriendListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserFriendListRsp)
  return false;
#undef DO_
}

void IMDBUserFriendListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserFriendListRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserFriendListRsp)
}

int IMDBUserFriendListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserFriendListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserFriendListRsp*>(&from));
}

void IMDBUserFriendListRsp::MergeFrom(const IMDBUserFriendListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserFriendListRsp::CopyFrom(const IMDBUserFriendListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserFriendListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMDBUserFriendListRsp::Swap(IMDBUserFriendListRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserFriendListRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBUserFriendListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserFriendVerReq::kCompanyIdFieldNumber;
const int IMDBUserFriendVerReq::kUserIdFieldNumber;
const int IMDBUserFriendVerReq::kOptIdFieldNumber;
const int IMDBUserFriendVerReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserFriendVerReq::IMDBUserFriendVerReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserFriendVerReq)
}

void IMDBUserFriendVerReq::InitAsDefaultInstance() {
}

IMDBUserFriendVerReq::IMDBUserFriendVerReq(const IMDBUserFriendVerReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserFriendVerReq)
}

void IMDBUserFriendVerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserFriendVerReq::~IMDBUserFriendVerReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserFriendVerReq)
  SharedDtor();
}

void IMDBUserFriendVerReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserFriendVerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserFriendVerReq& IMDBUserFriendVerReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserFriendVerReq* IMDBUserFriendVerReq::default_instance_ = NULL;

IMDBUserFriendVerReq* IMDBUserFriendVerReq::New() const {
  return new IMDBUserFriendVerReq;
}

void IMDBUserFriendVerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserFriendVerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserFriendVerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserFriendVerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserFriendVerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserFriendVerReq)
  return false;
#undef DO_
}

void IMDBUserFriendVerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserFriendVerReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserFriendVerReq)
}

int IMDBUserFriendVerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserFriendVerReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserFriendVerReq*>(&from));
}

void IMDBUserFriendVerReq::MergeFrom(const IMDBUserFriendVerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserFriendVerReq::CopyFrom(const IMDBUserFriendVerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserFriendVerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBUserFriendVerReq::Swap(IMDBUserFriendVerReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserFriendVerReq::GetTypeName() const {
  return "IM.DBProxy.IMDBUserFriendVerReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserFriendVerRsp::kCompanyIdFieldNumber;
const int IMDBUserFriendVerRsp::kUserIdFieldNumber;
const int IMDBUserFriendVerRsp::kUpdateRetFieldNumber;
const int IMDBUserFriendVerRsp::kOptIdFieldNumber;
const int IMDBUserFriendVerRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserFriendVerRsp::IMDBUserFriendVerRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserFriendVerRsp)
}

void IMDBUserFriendVerRsp::InitAsDefaultInstance() {
}

IMDBUserFriendVerRsp::IMDBUserFriendVerRsp(const IMDBUserFriendVerRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserFriendVerRsp)
}

void IMDBUserFriendVerRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserFriendVerRsp::~IMDBUserFriendVerRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserFriendVerRsp)
  SharedDtor();
}

void IMDBUserFriendVerRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserFriendVerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserFriendVerRsp& IMDBUserFriendVerRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserFriendVerRsp* IMDBUserFriendVerRsp::default_instance_ = NULL;

IMDBUserFriendVerRsp* IMDBUserFriendVerRsp::New() const {
  return new IMDBUserFriendVerRsp;
}

void IMDBUserFriendVerRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserFriendVerRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    update_ret_ = 1;
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserFriendVerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserFriendVerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserFriendVerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserFriendVerRsp)
  return false;
#undef DO_
}

void IMDBUserFriendVerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserFriendVerRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserFriendVerRsp)
}

int IMDBUserFriendVerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserFriendVerRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserFriendVerRsp*>(&from));
}

void IMDBUserFriendVerRsp::MergeFrom(const IMDBUserFriendVerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserFriendVerRsp::CopyFrom(const IMDBUserFriendVerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserFriendVerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMDBUserFriendVerRsp::Swap(IMDBUserFriendVerRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserFriendVerRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBUserFriendVerRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserGroupListReq::kCompanyIdFieldNumber;
const int IMDBUserGroupListReq::kUserIdFieldNumber;
const int IMDBUserGroupListReq::kOptIdFieldNumber;
const int IMDBUserGroupListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserGroupListReq::IMDBUserGroupListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserGroupListReq)
}

void IMDBUserGroupListReq::InitAsDefaultInstance() {
}

IMDBUserGroupListReq::IMDBUserGroupListReq(const IMDBUserGroupListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserGroupListReq)
}

void IMDBUserGroupListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserGroupListReq::~IMDBUserGroupListReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserGroupListReq)
  SharedDtor();
}

void IMDBUserGroupListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserGroupListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserGroupListReq& IMDBUserGroupListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserGroupListReq* IMDBUserGroupListReq::default_instance_ = NULL;

IMDBUserGroupListReq* IMDBUserGroupListReq::New() const {
  return new IMDBUserGroupListReq;
}

void IMDBUserGroupListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserGroupListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserGroupListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserGroupListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserGroupListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserGroupListReq)
  return false;
#undef DO_
}

void IMDBUserGroupListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserGroupListReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserGroupListReq)
}

int IMDBUserGroupListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserGroupListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserGroupListReq*>(&from));
}

void IMDBUserGroupListReq::MergeFrom(const IMDBUserGroupListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserGroupListReq::CopyFrom(const IMDBUserGroupListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserGroupListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBUserGroupListReq::Swap(IMDBUserGroupListReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserGroupListReq::GetTypeName() const {
  return "IM.DBProxy.IMDBUserGroupListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBUserGroupListRsp::kCompanyIdFieldNumber;
const int IMDBUserGroupListRsp::kUserIdFieldNumber;
const int IMDBUserGroupListRsp::kUpdateRetFieldNumber;
const int IMDBUserGroupListRsp::kOptIdFieldNumber;
const int IMDBUserGroupListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBUserGroupListRsp::IMDBUserGroupListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBUserGroupListRsp)
}

void IMDBUserGroupListRsp::InitAsDefaultInstance() {
}

IMDBUserGroupListRsp::IMDBUserGroupListRsp(const IMDBUserGroupListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBUserGroupListRsp)
}

void IMDBUserGroupListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBUserGroupListRsp::~IMDBUserGroupListRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBUserGroupListRsp)
  SharedDtor();
}

void IMDBUserGroupListRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBUserGroupListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBUserGroupListRsp& IMDBUserGroupListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBUserGroupListRsp* IMDBUserGroupListRsp::default_instance_ = NULL;

IMDBUserGroupListRsp* IMDBUserGroupListRsp::New() const {
  return new IMDBUserGroupListRsp;
}

void IMDBUserGroupListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBUserGroupListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    update_ret_ = 1;
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBUserGroupListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBUserGroupListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBUserGroupListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBUserGroupListRsp)
  return false;
#undef DO_
}

void IMDBUserGroupListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBUserGroupListRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBUserGroupListRsp)
}

int IMDBUserGroupListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBUserGroupListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBUserGroupListRsp*>(&from));
}

void IMDBUserGroupListRsp::MergeFrom(const IMDBUserGroupListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBUserGroupListRsp::CopyFrom(const IMDBUserGroupListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBUserGroupListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMDBUserGroupListRsp::Swap(IMDBUserGroupListRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBUserGroupListRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBUserGroupListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBGroupMemberReq::kCompanyIdFieldNumber;
const int IMDBGroupMemberReq::kGroupIdFieldNumber;
const int IMDBGroupMemberReq::kOptIdFieldNumber;
const int IMDBGroupMemberReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBGroupMemberReq::IMDBGroupMemberReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBGroupMemberReq)
}

void IMDBGroupMemberReq::InitAsDefaultInstance() {
}

IMDBGroupMemberReq::IMDBGroupMemberReq(const IMDBGroupMemberReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBGroupMemberReq)
}

void IMDBGroupMemberReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  group_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBGroupMemberReq::~IMDBGroupMemberReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBGroupMemberReq)
  SharedDtor();
}

void IMDBGroupMemberReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBGroupMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBGroupMemberReq& IMDBGroupMemberReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBGroupMemberReq* IMDBGroupMemberReq::default_instance_ = NULL;

IMDBGroupMemberReq* IMDBGroupMemberReq::New() const {
  return new IMDBGroupMemberReq;
}

void IMDBGroupMemberReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBGroupMemberReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, group_id_);
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBGroupMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBGroupMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBGroupMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBGroupMemberReq)
  return false;
#undef DO_
}

void IMDBGroupMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBGroupMemberReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBGroupMemberReq)
}

int IMDBGroupMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBGroupMemberReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBGroupMemberReq*>(&from));
}

void IMDBGroupMemberReq::MergeFrom(const IMDBGroupMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBGroupMemberReq::CopyFrom(const IMDBGroupMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBGroupMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBGroupMemberReq::Swap(IMDBGroupMemberReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBGroupMemberReq::GetTypeName() const {
  return "IM.DBProxy.IMDBGroupMemberReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBGroupMemberRsp::kCompanyIdFieldNumber;
const int IMDBGroupMemberRsp::kGroupIdFieldNumber;
const int IMDBGroupMemberRsp::kUpdateRetFieldNumber;
const int IMDBGroupMemberRsp::kOptIdFieldNumber;
const int IMDBGroupMemberRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBGroupMemberRsp::IMDBGroupMemberRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBGroupMemberRsp)
}

void IMDBGroupMemberRsp::InitAsDefaultInstance() {
}

IMDBGroupMemberRsp::IMDBGroupMemberRsp(const IMDBGroupMemberRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBGroupMemberRsp)
}

void IMDBGroupMemberRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  group_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBGroupMemberRsp::~IMDBGroupMemberRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBGroupMemberRsp)
  SharedDtor();
}

void IMDBGroupMemberRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBGroupMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBGroupMemberRsp& IMDBGroupMemberRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBGroupMemberRsp* IMDBGroupMemberRsp::default_instance_ = NULL;

IMDBGroupMemberRsp* IMDBGroupMemberRsp::New() const {
  return new IMDBGroupMemberRsp;
}

void IMDBGroupMemberRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBGroupMemberRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, group_id_);
    update_ret_ = 1;
    opt_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBGroupMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBGroupMemberRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBGroupMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBGroupMemberRsp)
  return false;
#undef DO_
}

void IMDBGroupMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBGroupMemberRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBGroupMemberRsp)
}

int IMDBGroupMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBGroupMemberRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBGroupMemberRsp*>(&from));
}

void IMDBGroupMemberRsp::MergeFrom(const IMDBGroupMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBGroupMemberRsp::CopyFrom(const IMDBGroupMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBGroupMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMDBGroupMemberRsp::Swap(IMDBGroupMemberRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBGroupMemberRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBGroupMemberRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBOrgTreeReq::kCompanyIdFieldNumber;
const int IMDBOrgTreeReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBOrgTreeReq::IMDBOrgTreeReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBOrgTreeReq)
}

void IMDBOrgTreeReq::InitAsDefaultInstance() {
}

IMDBOrgTreeReq::IMDBOrgTreeReq(const IMDBOrgTreeReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBOrgTreeReq)
}

void IMDBOrgTreeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBOrgTreeReq::~IMDBOrgTreeReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBOrgTreeReq)
  SharedDtor();
}

void IMDBOrgTreeReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBOrgTreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBOrgTreeReq& IMDBOrgTreeReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBOrgTreeReq* IMDBOrgTreeReq::default_instance_ = NULL;

IMDBOrgTreeReq* IMDBOrgTreeReq::New() const {
  return new IMDBOrgTreeReq;
}

void IMDBOrgTreeReq::Clear() {
  company_id_ = 0u;
  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBOrgTreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBOrgTreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBOrgTreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBOrgTreeReq)
  return false;
#undef DO_
}

void IMDBOrgTreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBOrgTreeReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBOrgTreeReq)
}

int IMDBOrgTreeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBOrgTreeReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBOrgTreeReq*>(&from));
}

void IMDBOrgTreeReq::MergeFrom(const IMDBOrgTreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBOrgTreeReq::CopyFrom(const IMDBOrgTreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBOrgTreeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMDBOrgTreeReq::Swap(IMDBOrgTreeReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBOrgTreeReq::GetTypeName() const {
  return "IM.DBProxy.IMDBOrgTreeReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBOrgTreeRsp::kCompanyIdFieldNumber;
const int IMDBOrgTreeRsp::kUpdateRetFieldNumber;
const int IMDBOrgTreeRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBOrgTreeRsp::IMDBOrgTreeRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBOrgTreeRsp)
}

void IMDBOrgTreeRsp::InitAsDefaultInstance() {
}

IMDBOrgTreeRsp::IMDBOrgTreeRsp(const IMDBOrgTreeRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBOrgTreeRsp)
}

void IMDBOrgTreeRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  update_ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBOrgTreeRsp::~IMDBOrgTreeRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBOrgTreeRsp)
  SharedDtor();
}

void IMDBOrgTreeRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBOrgTreeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBOrgTreeRsp& IMDBOrgTreeRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBOrgTreeRsp* IMDBOrgTreeRsp::default_instance_ = NULL;

IMDBOrgTreeRsp* IMDBOrgTreeRsp::New() const {
  return new IMDBOrgTreeRsp;
}

void IMDBOrgTreeRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    company_id_ = 0u;
    update_ret_ = 1;
  }
  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBOrgTreeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBOrgTreeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBOrgTreeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBOrgTreeRsp)
  return false;
#undef DO_
}

void IMDBOrgTreeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBOrgTreeRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBOrgTreeRsp)
}

int IMDBOrgTreeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBOrgTreeRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBOrgTreeRsp*>(&from));
}

void IMDBOrgTreeRsp::MergeFrom(const IMDBOrgTreeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBOrgTreeRsp::CopyFrom(const IMDBOrgTreeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBOrgTreeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDBOrgTreeRsp::Swap(IMDBOrgTreeRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(update_ret_, other->update_ret_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBOrgTreeRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBOrgTreeRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBCompanyUserListReq::kCompanyIdFieldNumber;
const int IMDBCompanyUserListReq::kOptIdFieldNumber;
const int IMDBCompanyUserListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBCompanyUserListReq::IMDBCompanyUserListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBCompanyUserListReq)
}

void IMDBCompanyUserListReq::InitAsDefaultInstance() {
}

IMDBCompanyUserListReq::IMDBCompanyUserListReq(const IMDBCompanyUserListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBCompanyUserListReq)
}

void IMDBCompanyUserListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBCompanyUserListReq::~IMDBCompanyUserListReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBCompanyUserListReq)
  SharedDtor();
}

void IMDBCompanyUserListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBCompanyUserListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBCompanyUserListReq& IMDBCompanyUserListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBCompanyUserListReq* IMDBCompanyUserListReq::default_instance_ = NULL;

IMDBCompanyUserListReq* IMDBCompanyUserListReq::New() const {
  return new IMDBCompanyUserListReq;
}

void IMDBCompanyUserListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBCompanyUserListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, opt_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBCompanyUserListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBCompanyUserListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBCompanyUserListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBCompanyUserListReq)
  return false;
#undef DO_
}

void IMDBCompanyUserListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBCompanyUserListReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBCompanyUserListReq)
}

int IMDBCompanyUserListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBCompanyUserListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBCompanyUserListReq*>(&from));
}

void IMDBCompanyUserListReq::MergeFrom(const IMDBCompanyUserListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBCompanyUserListReq::CopyFrom(const IMDBCompanyUserListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBCompanyUserListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDBCompanyUserListReq::Swap(IMDBCompanyUserListReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBCompanyUserListReq::GetTypeName() const {
  return "IM.DBProxy.IMDBCompanyUserListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBCompanyUserListRsp::kCompanyIdFieldNumber;
const int IMDBCompanyUserListRsp::kUpdateRetFieldNumber;
const int IMDBCompanyUserListRsp::kOptIdFieldNumber;
const int IMDBCompanyUserListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDBCompanyUserListRsp::IMDBCompanyUserListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBCompanyUserListRsp)
}

void IMDBCompanyUserListRsp::InitAsDefaultInstance() {
}

IMDBCompanyUserListRsp::IMDBCompanyUserListRsp(const IMDBCompanyUserListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBCompanyUserListRsp)
}

void IMDBCompanyUserListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  update_ret_ = 1;
  opt_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBCompanyUserListRsp::~IMDBCompanyUserListRsp() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBCompanyUserListRsp)
  SharedDtor();
}

void IMDBCompanyUserListRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBCompanyUserListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBCompanyUserListRsp& IMDBCompanyUserListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBCompanyUserListRsp* IMDBCompanyUserListRsp::default_instance_ = NULL;

IMDBCompanyUserListRsp* IMDBCompanyUserListRsp::New() const {
  return new IMDBCompanyUserListRsp;
}

void IMDBCompanyUserListRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    company_id_ = 0u;
    update_ret_ = 1;
    opt_id_ = 0u;
  }
  attach_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBCompanyUserListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBCompanyUserListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_update_ret;
        break;
      }

      // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
      case 18: {
        if (tag == 144) {
         parse_update_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::DBProxy::DBUpdateInfoResultDef_IsValid(value)) {
            set_update_ret(static_cast< ::IM::DBProxy::DBUpdateInfoResultDef >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opt_id;
        break;
      }

      // required uint32 opt_id = 19;
      case 19: {
        if (tag == 152) {
         parse_opt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // repeated bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBCompanyUserListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBCompanyUserListRsp)
  return false;
#undef DO_
}

void IMDBCompanyUserListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBCompanyUserListRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
  if (has_update_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->update_ret(), output);
  }

  // required uint32 opt_id = 19;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->opt_id(), output);
  }

  // repeated bytes attach_data = 20;
  for (int i = 0; i < this->attach_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->attach_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBCompanyUserListRsp)
}

int IMDBCompanyUserListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required .IM.DBProxy.DBUpdateInfoResultDef update_ret = 18;
    if (has_update_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_ret());
    }

    // required uint32 opt_id = 19;
    if (has_opt_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_id());
    }

  }
  // repeated bytes attach_data = 20;
  total_size += 2 * this->attach_data_size();
  for (int i = 0; i < this->attach_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attach_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBCompanyUserListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBCompanyUserListRsp*>(&from));
}

void IMDBCompanyUserListRsp::MergeFrom(const IMDBCompanyUserListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_data_.MergeFrom(from.attach_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_update_ret()) {
      set_update_ret(from.update_ret());
    }
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBCompanyUserListRsp::CopyFrom(const IMDBCompanyUserListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBCompanyUserListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMDBCompanyUserListRsp::Swap(IMDBCompanyUserListRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(update_ret_, other->update_ret_);
    std::swap(opt_id_, other->opt_id_);
    attach_data_.Swap(&other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBCompanyUserListRsp::GetTypeName() const {
  return "IM.DBProxy.IMDBCompanyUserListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDBCompanyOrgUpdateReq::kCompanyIdFieldNumber;
const int IMDBCompanyOrgUpdateReq::kUserOptTypeFieldNumber;
const int IMDBCompanyOrgUpdateReq::kUserListFieldNumber;
#endif  // !_MSC_VER

IMDBCompanyOrgUpdateReq::IMDBCompanyOrgUpdateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.DBProxy.IMDBCompanyOrgUpdateReq)
}

void IMDBCompanyOrgUpdateReq::InitAsDefaultInstance() {
}

IMDBCompanyOrgUpdateReq::IMDBCompanyOrgUpdateReq(const IMDBCompanyOrgUpdateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.DBProxy.IMDBCompanyOrgUpdateReq)
}

void IMDBCompanyOrgUpdateReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_opt_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDBCompanyOrgUpdateReq::~IMDBCompanyOrgUpdateReq() {
  // @@protoc_insertion_point(destructor:IM.DBProxy.IMDBCompanyOrgUpdateReq)
  SharedDtor();
}

void IMDBCompanyOrgUpdateReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDBCompanyOrgUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDBCompanyOrgUpdateReq& IMDBCompanyOrgUpdateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eDBProxy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eDBProxy_2eproto();
#endif
  return *default_instance_;
}

IMDBCompanyOrgUpdateReq* IMDBCompanyOrgUpdateReq::default_instance_ = NULL;

IMDBCompanyOrgUpdateReq* IMDBCompanyOrgUpdateReq::New() const {
  return new IMDBCompanyOrgUpdateReq;
}

void IMDBCompanyOrgUpdateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDBCompanyOrgUpdateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, user_opt_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDBCompanyOrgUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.DBProxy.IMDBCompanyOrgUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_opt_type;
        break;
      }

      // required uint32 user_opt_type = 2;
      case 2: {
        if (tag == 16) {
         parse_user_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_opt_type_)));
          set_has_user_opt_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_list;
        break;
      }

      // repeated uint32 user_list = 3;
      case 3: {
        if (tag == 24) {
         parse_user_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_user_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.DBProxy.IMDBCompanyOrgUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.DBProxy.IMDBCompanyOrgUpdateReq)
  return false;
#undef DO_
}

void IMDBCompanyOrgUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.DBProxy.IMDBCompanyOrgUpdateReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_opt_type = 2;
  if (has_user_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_opt_type(), output);
  }

  // repeated uint32 user_list = 3;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->user_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.DBProxy.IMDBCompanyOrgUpdateReq)
}

int IMDBCompanyOrgUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_opt_type = 2;
    if (has_user_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_opt_type());
    }

  }
  // repeated uint32 user_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_list(i));
    }
    total_size += 1 * this->user_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDBCompanyOrgUpdateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDBCompanyOrgUpdateReq*>(&from));
}

void IMDBCompanyOrgUpdateReq::MergeFrom(const IMDBCompanyOrgUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_opt_type()) {
      set_user_opt_type(from.user_opt_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDBCompanyOrgUpdateReq::CopyFrom(const IMDBCompanyOrgUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDBCompanyOrgUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDBCompanyOrgUpdateReq::Swap(IMDBCompanyOrgUpdateReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_opt_type_, other->user_opt_type_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDBCompanyOrgUpdateReq::GetTypeName() const {
  return "IM.DBProxy.IMDBCompanyOrgUpdateReq";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBProxy
}  // namespace IM

// @@protoc_insertion_point(global_scope)
