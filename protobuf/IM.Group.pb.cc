// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Group {

void protobuf_ShutdownFile_IM_2eGroup_2eproto() {
  delete IMGroupListReq::default_instance_;
  delete IMGroupListRsp::default_instance_;
  delete IMGroupInfoReq::default_instance_;
  delete IMGroupInfoRsp::default_instance_;
  delete IMGroupMemberListReq::default_instance_;
  delete IMGroupMemberListRsp::default_instance_;
  delete IMGroupCreateReq::default_instance_;
  delete IMGroupCreateRsp::default_instance_;
  delete IMGroupDissolveReq::default_instance_;
  delete IMGroupDissolveRsp::default_instance_;
  delete IMGroupOptNotify::default_instance_;
  delete IMGroupInfoModifyReq::default_instance_;
  delete IMGroupInfoModifyRsp::default_instance_;
  delete IMGroupInfoModifyNotify::default_instance_;
  delete IMGroupChangeMemberReq::default_instance_;
  delete IMGroupChangeMemberRsp::default_instance_;
  delete IMGroupChangeMemberNotify::default_instance_;
  delete IMGroupSetOwnerReq::default_instance_;
  delete IMGroupSetOwnerRsp::default_instance_;
  delete IMGroupSetOwnerNotify::default_instance_;
  delete IMGroupDisturbOptReq::default_instance_;
  delete IMGroupDisturbOptRsp::default_instance_;
  delete IMUsersStat_Group_Subs_Req::default_instance_;
  delete IMUsersStat_Group_UnSubs_Req::default_instance_;
  delete IMUsersStat_OrgNode_Subs_Req::default_instance_;
  delete IMUsersStat_OrgNode_UnSubs_Req::default_instance_;
  delete TerminalState::default_instance_;
  delete IMUsersStat_Changed_User::default_instance_;
  delete IMUsersStat_Changed_User_Notify::default_instance_;
  delete OrgNode_Online::default_instance_;
  delete IMUsersStat_OrgTree_Subs_Req::default_instance_;
  delete IMUsersStat_OrgTree_UnSubs_Req::default_instance_;
  delete IMUsersStat_OrgTree_Notify::default_instance_;
  delete GTCGroupOptNotify::default_instance_;
  delete GTCGroupInfoModifyNotify::default_instance_;
  delete GTCGroupChangeMemberNotify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eGroup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMGroupListReq::default_instance_ = new IMGroupListReq();
  IMGroupListRsp::default_instance_ = new IMGroupListRsp();
  IMGroupInfoReq::default_instance_ = new IMGroupInfoReq();
  IMGroupInfoRsp::default_instance_ = new IMGroupInfoRsp();
  IMGroupMemberListReq::default_instance_ = new IMGroupMemberListReq();
  IMGroupMemberListRsp::default_instance_ = new IMGroupMemberListRsp();
  IMGroupCreateReq::default_instance_ = new IMGroupCreateReq();
  IMGroupCreateRsp::default_instance_ = new IMGroupCreateRsp();
  IMGroupDissolveReq::default_instance_ = new IMGroupDissolveReq();
  IMGroupDissolveRsp::default_instance_ = new IMGroupDissolveRsp();
  IMGroupOptNotify::default_instance_ = new IMGroupOptNotify();
  IMGroupInfoModifyReq::default_instance_ = new IMGroupInfoModifyReq();
  IMGroupInfoModifyRsp::default_instance_ = new IMGroupInfoModifyRsp();
  IMGroupInfoModifyNotify::default_instance_ = new IMGroupInfoModifyNotify();
  IMGroupChangeMemberReq::default_instance_ = new IMGroupChangeMemberReq();
  IMGroupChangeMemberRsp::default_instance_ = new IMGroupChangeMemberRsp();
  IMGroupChangeMemberNotify::default_instance_ = new IMGroupChangeMemberNotify();
  IMGroupSetOwnerReq::default_instance_ = new IMGroupSetOwnerReq();
  IMGroupSetOwnerRsp::default_instance_ = new IMGroupSetOwnerRsp();
  IMGroupSetOwnerNotify::default_instance_ = new IMGroupSetOwnerNotify();
  IMGroupDisturbOptReq::default_instance_ = new IMGroupDisturbOptReq();
  IMGroupDisturbOptRsp::default_instance_ = new IMGroupDisturbOptRsp();
  IMUsersStat_Group_Subs_Req::default_instance_ = new IMUsersStat_Group_Subs_Req();
  IMUsersStat_Group_UnSubs_Req::default_instance_ = new IMUsersStat_Group_UnSubs_Req();
  IMUsersStat_OrgNode_Subs_Req::default_instance_ = new IMUsersStat_OrgNode_Subs_Req();
  IMUsersStat_OrgNode_UnSubs_Req::default_instance_ = new IMUsersStat_OrgNode_UnSubs_Req();
  TerminalState::default_instance_ = new TerminalState();
  IMUsersStat_Changed_User::default_instance_ = new IMUsersStat_Changed_User();
  IMUsersStat_Changed_User_Notify::default_instance_ = new IMUsersStat_Changed_User_Notify();
  OrgNode_Online::default_instance_ = new OrgNode_Online();
  IMUsersStat_OrgTree_Subs_Req::default_instance_ = new IMUsersStat_OrgTree_Subs_Req();
  IMUsersStat_OrgTree_UnSubs_Req::default_instance_ = new IMUsersStat_OrgTree_UnSubs_Req();
  IMUsersStat_OrgTree_Notify::default_instance_ = new IMUsersStat_OrgTree_Notify();
  GTCGroupOptNotify::default_instance_ = new GTCGroupOptNotify();
  GTCGroupInfoModifyNotify::default_instance_ = new GTCGroupInfoModifyNotify();
  GTCGroupChangeMemberNotify::default_instance_ = new GTCGroupChangeMemberNotify();
  IMGroupListReq::default_instance_->InitAsDefaultInstance();
  IMGroupListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupInfoReq::default_instance_->InitAsDefaultInstance();
  IMGroupInfoRsp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberListReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupCreateReq::default_instance_->InitAsDefaultInstance();
  IMGroupCreateRsp::default_instance_->InitAsDefaultInstance();
  IMGroupDissolveReq::default_instance_->InitAsDefaultInstance();
  IMGroupDissolveRsp::default_instance_->InitAsDefaultInstance();
  IMGroupOptNotify::default_instance_->InitAsDefaultInstance();
  IMGroupInfoModifyReq::default_instance_->InitAsDefaultInstance();
  IMGroupInfoModifyRsp::default_instance_->InitAsDefaultInstance();
  IMGroupInfoModifyNotify::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberReq::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberRsp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberNotify::default_instance_->InitAsDefaultInstance();
  IMGroupSetOwnerReq::default_instance_->InitAsDefaultInstance();
  IMGroupSetOwnerRsp::default_instance_->InitAsDefaultInstance();
  IMGroupSetOwnerNotify::default_instance_->InitAsDefaultInstance();
  IMGroupDisturbOptReq::default_instance_->InitAsDefaultInstance();
  IMGroupDisturbOptRsp::default_instance_->InitAsDefaultInstance();
  IMUsersStat_Group_Subs_Req::default_instance_->InitAsDefaultInstance();
  IMUsersStat_Group_UnSubs_Req::default_instance_->InitAsDefaultInstance();
  IMUsersStat_OrgNode_Subs_Req::default_instance_->InitAsDefaultInstance();
  IMUsersStat_OrgNode_UnSubs_Req::default_instance_->InitAsDefaultInstance();
  TerminalState::default_instance_->InitAsDefaultInstance();
  IMUsersStat_Changed_User::default_instance_->InitAsDefaultInstance();
  IMUsersStat_Changed_User_Notify::default_instance_->InitAsDefaultInstance();
  OrgNode_Online::default_instance_->InitAsDefaultInstance();
  IMUsersStat_OrgTree_Subs_Req::default_instance_->InitAsDefaultInstance();
  IMUsersStat_OrgTree_UnSubs_Req::default_instance_->InitAsDefaultInstance();
  IMUsersStat_OrgTree_Notify::default_instance_->InitAsDefaultInstance();
  GTCGroupOptNotify::default_instance_->InitAsDefaultInstance();
  GTCGroupInfoModifyNotify::default_instance_->InitAsDefaultInstance();
  GTCGroupChangeMemberNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eGroup_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eGroup_2eproto_once_);
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eGroup_2eproto_once_,
                 &protobuf_AddDesc_IM_2eGroup_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eGroup_2eproto {
  StaticDescriptorInitializer_IM_2eGroup_2eproto() {
    protobuf_AddDesc_IM_2eGroup_2eproto();
  }
} static_descriptor_initializer_IM_2eGroup_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMGroupListReq::kCompanyIdFieldNumber;
const int IMGroupListReq::kUserIdFieldNumber;
const int IMGroupListReq::kUpdateTimeFieldNumber;
const int IMGroupListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupListReq::IMGroupListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupListReq)
}

void IMGroupListReq::InitAsDefaultInstance() {
}

IMGroupListReq::IMGroupListReq(const IMGroupListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupListReq)
}

void IMGroupListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupListReq::~IMGroupListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupListReq)
  SharedDtor();
}

void IMGroupListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupListReq& IMGroupListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupListReq* IMGroupListReq::default_instance_ = NULL;

IMGroupListReq* IMGroupListReq::New() const {
  return new IMGroupListReq;
}

void IMGroupListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupListReq)
  return false;
#undef DO_
}

void IMGroupListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupListReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupListReq)
}

int IMGroupListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupListReq*>(&from));
}

void IMGroupListReq::MergeFrom(const IMGroupListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupListReq::CopyFrom(const IMGroupListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupListReq::Swap(IMGroupListReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupListReq::GetTypeName() const {
  return "IM.Group.IMGroupListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupListRsp::kUpdateTimeFieldNumber;
const int IMGroupListRsp::kIsMoreDataFieldNumber;
const int IMGroupListRsp::kGroupInfoListFieldNumber;
const int IMGroupListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupListRsp::IMGroupListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupListRsp)
}

void IMGroupListRsp::InitAsDefaultInstance() {
}

IMGroupListRsp::IMGroupListRsp(const IMGroupListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupListRsp)
}

void IMGroupListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  update_time_ = GOOGLE_ULONGLONG(0);
  is_more_data_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupListRsp::~IMGroupListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupListRsp)
  SharedDtor();
}

void IMGroupListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupListRsp& IMGroupListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupListRsp* IMGroupListRsp::default_instance_ = NULL;

IMGroupListRsp* IMGroupListRsp::New() const {
  return new IMGroupListRsp;
}

void IMGroupListRsp::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    update_time_ = GOOGLE_ULONGLONG(0);
    is_more_data_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_more_data;
        break;
      }

      // required uint32 is_more_data = 2;
      case 2: {
        if (tag == 16) {
         parse_is_more_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_more_data_)));
          set_has_is_more_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_info_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupInfo group_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_group_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupListRsp)
  return false;
#undef DO_
}

void IMGroupListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupListRsp)
  // required uint64 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_time(), output);
  }

  // required uint32 is_more_data = 2;
  if (has_is_more_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_more_data(), output);
  }

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 3;
  for (int i = 0; i < this->group_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->group_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupListRsp)
}

int IMGroupListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required uint32 is_more_data = 2;
    if (has_is_more_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_more_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupInfo group_info_list = 3;
  total_size += 1 * this->group_info_list_size();
  for (int i = 0; i < this->group_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupListRsp*>(&from));
}

void IMGroupListRsp::MergeFrom(const IMGroupListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_info_list_.MergeFrom(from.group_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_more_data()) {
      set_is_more_data(from.is_more_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupListRsp::CopyFrom(const IMGroupListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_info_list())) return false;
  return true;
}

void IMGroupListRsp::Swap(IMGroupListRsp* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(is_more_data_, other->is_more_data_);
    group_info_list_.Swap(&other->group_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupListRsp::GetTypeName() const {
  return "IM.Group.IMGroupListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoReq::kCompanyIdFieldNumber;
const int IMGroupInfoReq::kUserIdFieldNumber;
const int IMGroupInfoReq::kGroupItemListFieldNumber;
const int IMGroupInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoReq::IMGroupInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoReq)
}

void IMGroupInfoReq::InitAsDefaultInstance() {
}

IMGroupInfoReq::IMGroupInfoReq(const IMGroupInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoReq)
}

void IMGroupInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoReq::~IMGroupInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoReq)
  SharedDtor();
}

void IMGroupInfoReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoReq& IMGroupInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoReq* IMGroupInfoReq::default_instance_ = NULL;

IMGroupInfoReq* IMGroupInfoReq::New() const {
  return new IMGroupInfoReq;
}

void IMGroupInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  group_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_item_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupListItem group_item_list = 3;
      case 3: {
        if (tag == 26) {
         parse_group_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_item_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoReq)
  return false;
#undef DO_
}

void IMGroupInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupListItem group_item_list = 3;
  for (int i = 0; i < this->group_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->group_item_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoReq)
}

int IMGroupInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupListItem group_item_list = 3;
  total_size += 1 * this->group_item_list_size();
  for (int i = 0; i < this->group_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_item_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoReq*>(&from));
}

void IMGroupInfoReq::MergeFrom(const IMGroupInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_item_list_.MergeFrom(from.group_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoReq::CopyFrom(const IMGroupInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_item_list())) return false;
  return true;
}

void IMGroupInfoReq::Swap(IMGroupInfoReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    group_item_list_.Swap(&other->group_item_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoRsp::kGroupInfoListFieldNumber;
const int IMGroupInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoRsp::IMGroupInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoRsp)
}

void IMGroupInfoRsp::InitAsDefaultInstance() {
}

IMGroupInfoRsp::IMGroupInfoRsp(const IMGroupInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoRsp)
}

void IMGroupInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoRsp::~IMGroupInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoRsp)
  SharedDtor();
}

void IMGroupInfoRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoRsp& IMGroupInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoRsp* IMGroupInfoRsp::default_instance_ = NULL;

IMGroupInfoRsp* IMGroupInfoRsp::New() const {
  return new IMGroupInfoRsp;
}

void IMGroupInfoRsp::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  group_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.GroupInfo group_info_list = 1;
      case 1: {
        if (tag == 10) {
         parse_group_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoRsp)
  return false;
#undef DO_
}

void IMGroupInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoRsp)
  // repeated .IM.BaseDefine.GroupInfo group_info_list = 1;
  for (int i = 0; i < this->group_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->group_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoRsp)
}

int IMGroupInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupInfo group_info_list = 1;
  total_size += 1 * this->group_info_list_size();
  for (int i = 0; i < this->group_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoRsp*>(&from));
}

void IMGroupInfoRsp::MergeFrom(const IMGroupInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_info_list_.MergeFrom(from.group_info_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoRsp::CopyFrom(const IMGroupInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->group_info_list())) return false;
  return true;
}

void IMGroupInfoRsp::Swap(IMGroupInfoRsp* other) {
  if (other != this) {
    group_info_list_.Swap(&other->group_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoRsp::GetTypeName() const {
  return "IM.Group.IMGroupInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberListReq::kCompanyIdFieldNumber;
const int IMGroupMemberListReq::kUserIdFieldNumber;
const int IMGroupMemberListReq::kDestCompanyIdFieldNumber;
const int IMGroupMemberListReq::kDestGroupIdFieldNumber;
const int IMGroupMemberListReq::kGroupTypeFieldNumber;
const int IMGroupMemberListReq::kUpdateTimeFieldNumber;
const int IMGroupMemberListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberListReq::IMGroupMemberListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberListReq)
}

void IMGroupMemberListReq::InitAsDefaultInstance() {
}

IMGroupMemberListReq::IMGroupMemberListReq(const IMGroupMemberListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberListReq)
}

void IMGroupMemberListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  dest_company_id_ = 0u;
  dest_group_id_ = 0u;
  group_type_ = 1;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberListReq::~IMGroupMemberListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberListReq)
  SharedDtor();
}

void IMGroupMemberListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberListReq& IMGroupMemberListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberListReq* IMGroupMemberListReq::default_instance_ = NULL;

IMGroupMemberListReq* IMGroupMemberListReq::New() const {
  return new IMGroupMemberListReq;
}

void IMGroupMemberListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, update_time_);
    group_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_company_id;
        break;
      }

      // required uint32 dest_company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_company_id_)));
          set_has_dest_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dest_group_id;
        break;
      }

      // required uint32 dest_group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_group_id_)));
          set_has_dest_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (tag == 40) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberListReq)
  return false;
#undef DO_
}

void IMGroupMemberListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberListReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 dest_company_id = 3;
  if (has_dest_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_company_id(), output);
  }

  // required uint32 dest_group_id = 4;
  if (has_dest_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // required uint64 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberListReq)
}

int IMGroupMemberListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 dest_company_id = 3;
    if (has_dest_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_company_id());
    }

    // required uint32 dest_group_id = 4;
    if (has_dest_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint64 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberListReq*>(&from));
}

void IMGroupMemberListReq::MergeFrom(const IMGroupMemberListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dest_company_id()) {
      set_dest_company_id(from.dest_company_id());
    }
    if (from.has_dest_group_id()) {
      set_dest_group_id(from.dest_group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberListReq::CopyFrom(const IMGroupMemberListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMGroupMemberListReq::Swap(IMGroupMemberListReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(dest_company_id_, other->dest_company_id_);
    std::swap(dest_group_id_, other->dest_group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberListReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberListRsp::kCompanyIdFieldNumber;
const int IMGroupMemberListRsp::kGroupIdFieldNumber;
const int IMGroupMemberListRsp::kIsMoreDataFieldNumber;
const int IMGroupMemberListRsp::kUpdateTimeFieldNumber;
const int IMGroupMemberListRsp::kGroupMemberListFieldNumber;
const int IMGroupMemberListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberListRsp::IMGroupMemberListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberListRsp)
}

void IMGroupMemberListRsp::InitAsDefaultInstance() {
}

IMGroupMemberListRsp::IMGroupMemberListRsp(const IMGroupMemberListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberListRsp)
}

void IMGroupMemberListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  group_id_ = 0u;
  is_more_data_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberListRsp::~IMGroupMemberListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberListRsp)
  SharedDtor();
}

void IMGroupMemberListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberListRsp& IMGroupMemberListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberListRsp* IMGroupMemberListRsp::default_instance_ = NULL;

IMGroupMemberListRsp* IMGroupMemberListRsp::New() const {
  return new IMGroupMemberListRsp;
}

void IMGroupMemberListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(company_id_, update_time_);
    is_more_data_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  group_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_more_data;
        break;
      }

      // required uint32 is_more_data = 3;
      case 3: {
        if (tag == 24) {
         parse_is_more_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_more_data_)));
          set_has_is_more_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_member_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupMemberItem group_member_list = 5;
      case 5: {
        if (tag == 42) {
         parse_group_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_member_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_member_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberListRsp)
  return false;
#undef DO_
}

void IMGroupMemberListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberListRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 is_more_data = 3;
  if (has_is_more_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_more_data(), output);
  }

  // required uint64 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->update_time(), output);
  }

  // repeated .IM.BaseDefine.GroupMemberItem group_member_list = 5;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->group_member_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberListRsp)
}

int IMGroupMemberListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 is_more_data = 3;
    if (has_is_more_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_more_data());
    }

    // required uint64 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupMemberItem group_member_list = 5;
  total_size += 1 * this->group_member_list_size();
  for (int i = 0; i < this->group_member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_member_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberListRsp*>(&from));
}

void IMGroupMemberListRsp::MergeFrom(const IMGroupMemberListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_member_list_.MergeFrom(from.group_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_more_data()) {
      set_is_more_data(from.is_more_data());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberListRsp::CopyFrom(const IMGroupMemberListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_member_list())) return false;
  return true;
}

void IMGroupMemberListRsp::Swap(IMGroupMemberListRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(is_more_data_, other->is_more_data_);
    std::swap(update_time_, other->update_time_);
    group_member_list_.Swap(&other->group_member_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberListRsp::GetTypeName() const {
  return "IM.Group.IMGroupMemberListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupCreateReq::kCompanyIdFieldNumber;
const int IMGroupCreateReq::kUserIdFieldNumber;
const int IMGroupCreateReq::kGroupTypeFieldNumber;
const int IMGroupCreateReq::kGroupNameFieldNumber;
const int IMGroupCreateReq::kGroupAvatarFieldNumber;
const int IMGroupCreateReq::kMemberIdListFieldNumber;
const int IMGroupCreateReq::kTopicFieldNumber;
const int IMGroupCreateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupCreateReq::IMGroupCreateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::InitAsDefaultInstance() {
}

IMGroupCreateReq::IMGroupCreateReq(const IMGroupCreateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_type_ = 1;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateReq::~IMGroupCreateReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateReq)
  SharedDtor();
}

void IMGroupCreateReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateReq& IMGroupCreateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateReq* IMGroupCreateReq::default_instance_ = NULL;

IMGroupCreateReq* IMGroupCreateReq::New() const {
  return new IMGroupCreateReq;
}

void IMGroupCreateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupCreateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(company_id_, user_id_);
    group_type_ = 1;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_avatar_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_member_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem member_id_list = 6;
      case 6: {
        if (tag == 50) {
         parse_member_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_member_id_list;
        if (input->ExpectTag(58)) goto parse_topic;
        break;
      }

      // optional string topic = 7;
      case 7: {
        if (tag == 58) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateReq)
  return false;
#undef DO_
}

void IMGroupCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // required string group_avatar = 5;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_avatar(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 6;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->member_id_list(i), output);
  }

  // optional string topic = 7;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->topic(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateReq)
}

int IMGroupCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 5;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // optional string topic = 7;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem member_id_list = 6;
  total_size += 1 * this->member_id_list_size();
  for (int i = 0; i < this->member_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateReq*>(&from));
}

void IMGroupCreateReq::MergeFrom(const IMGroupCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupCreateReq::CopyFrom(const IMGroupCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->member_id_list())) return false;
  return true;
}

void IMGroupCreateReq::Swap(IMGroupCreateReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(topic_, other->topic_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupCreateReq::GetTypeName() const {
  return "IM.Group.IMGroupCreateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupCreateRsp::kResultCodeFieldNumber;
const int IMGroupCreateRsp::kGroupTypeFieldNumber;
const int IMGroupCreateRsp::kCompanyIdFieldNumber;
const int IMGroupCreateRsp::kGroupIdFieldNumber;
const int IMGroupCreateRsp::kMemberIdListFieldNumber;
const int IMGroupCreateRsp::kMemberlistUpdateTimeFieldNumber;
const int IMGroupCreateRsp::kUserIdFieldNumber;
const int IMGroupCreateRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupCreateRsp::IMGroupCreateRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::InitAsDefaultInstance() {
}

IMGroupCreateRsp::IMGroupCreateRsp(const IMGroupCreateRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 1;
  group_type_ = 1;
  company_id_ = 0u;
  group_id_ = 0u;
  memberlist_update_time_ = GOOGLE_ULONGLONG(0);
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateRsp::~IMGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateRsp)
  SharedDtor();
}

void IMGroupCreateRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateRsp& IMGroupCreateRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateRsp* IMGroupCreateRsp::default_instance_ = NULL;

IMGroupCreateRsp* IMGroupCreateRsp::New() const {
  return new IMGroupCreateRsp;
}

void IMGroupCreateRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupCreateRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(company_id_, group_id_);
    result_code_ = 1;
    group_type_ = 1;
    memberlist_update_time_ = GOOGLE_ULONGLONG(0);
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.OptResultCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 2;
      case 2: {
        if (tag == 16) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
      case 5: {
        if (tag == 42) {
         parse_member_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_id_list;
        if (input->ExpectTag(48)) goto parse_memberlist_update_time;
        break;
      }

      // required uint64 memberlist_update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_memberlist_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberlist_update_time_)));
          set_has_memberlist_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateRsp)
  return false;
#undef DO_
}

void IMGroupCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateRsp)
  // required .IM.BaseDefine.OptResultCode result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required uint32 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->company_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->member_id_list(i), output);
  }

  // required uint64 memberlist_update_time = 6;
  if (has_memberlist_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->memberlist_update_time(), output);
  }

  // required uint32 user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateRsp)
}

int IMGroupCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.OptResultCode result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required .IM.BaseDefine.GroupType group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint64 memberlist_update_time = 6;
    if (has_memberlist_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberlist_update_time());
    }

    // required uint32 user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
  total_size += 1 * this->member_id_list_size();
  for (int i = 0; i < this->member_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateRsp*>(&from));
}

void IMGroupCreateRsp::MergeFrom(const IMGroupCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_memberlist_update_time()) {
      set_memberlist_update_time(from.memberlist_update_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupCreateRsp::CopyFrom(const IMGroupCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->member_id_list())) return false;
  return true;
}

void IMGroupCreateRsp::Swap(IMGroupCreateRsp* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(group_type_, other->group_type_);
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(memberlist_update_time_, other->memberlist_update_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupCreateRsp::GetTypeName() const {
  return "IM.Group.IMGroupCreateRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupDissolveReq::kCompanyIdFieldNumber;
const int IMGroupDissolveReq::kGroupIdFieldNumber;
const int IMGroupDissolveReq::kGroupTypeFieldNumber;
#endif  // !_MSC_VER

IMGroupDissolveReq::IMGroupDissolveReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupDissolveReq)
}

void IMGroupDissolveReq::InitAsDefaultInstance() {
}

IMGroupDissolveReq::IMGroupDissolveReq(const IMGroupDissolveReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupDissolveReq)
}

void IMGroupDissolveReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupDissolveReq::~IMGroupDissolveReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupDissolveReq)
  SharedDtor();
}

void IMGroupDissolveReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupDissolveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupDissolveReq& IMGroupDissolveReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupDissolveReq* IMGroupDissolveReq::default_instance_ = NULL;

IMGroupDissolveReq* IMGroupDissolveReq::New() const {
  return new IMGroupDissolveReq;
}

void IMGroupDissolveReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupDissolveReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupDissolveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupDissolveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupDissolveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupDissolveReq)
  return false;
#undef DO_
}

void IMGroupDissolveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupDissolveReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupDissolveReq)
}

int IMGroupDissolveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupDissolveReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupDissolveReq*>(&from));
}

void IMGroupDissolveReq::MergeFrom(const IMGroupDissolveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupDissolveReq::CopyFrom(const IMGroupDissolveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupDissolveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupDissolveReq::Swap(IMGroupDissolveReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupDissolveReq::GetTypeName() const {
  return "IM.Group.IMGroupDissolveReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupDissolveRsp::kCompanyIdFieldNumber;
const int IMGroupDissolveRsp::kGroupIdFieldNumber;
const int IMGroupDissolveRsp::kGroupTypeFieldNumber;
const int IMGroupDissolveRsp::kResultCodeFieldNumber;
#endif  // !_MSC_VER

IMGroupDissolveRsp::IMGroupDissolveRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupDissolveRsp)
}

void IMGroupDissolveRsp::InitAsDefaultInstance() {
}

IMGroupDissolveRsp::IMGroupDissolveRsp(const IMGroupDissolveRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupDissolveRsp)
}

void IMGroupDissolveRsp::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupDissolveRsp::~IMGroupDissolveRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupDissolveRsp)
  SharedDtor();
}

void IMGroupDissolveRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupDissolveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupDissolveRsp& IMGroupDissolveRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupDissolveRsp* IMGroupDissolveRsp::default_instance_ = NULL;

IMGroupDissolveRsp* IMGroupDissolveRsp::New() const {
  return new IMGroupDissolveRsp;
}

void IMGroupDissolveRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupDissolveRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
    result_code_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupDissolveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupDissolveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupDissolveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupDissolveRsp)
  return false;
#undef DO_
}

void IMGroupDissolveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupDissolveRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupDissolveRsp)
}

int IMGroupDissolveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupDissolveRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupDissolveRsp*>(&from));
}

void IMGroupDissolveRsp::MergeFrom(const IMGroupDissolveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupDissolveRsp::CopyFrom(const IMGroupDissolveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupDissolveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupDissolveRsp::Swap(IMGroupDissolveRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupDissolveRsp::GetTypeName() const {
  return "IM.Group.IMGroupDissolveRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupOptNotify::kOptTypeFieldNumber;
const int IMGroupOptNotify::kGroupItemInfoFieldNumber;
#endif  // !_MSC_VER

IMGroupOptNotify::IMGroupOptNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupOptNotify)
}

void IMGroupOptNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(
      ::IM::BaseDefine::GroupListItem::internal_default_instance());
#else
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(&::IM::BaseDefine::GroupListItem::default_instance());
#endif
}

IMGroupOptNotify::IMGroupOptNotify(const IMGroupOptNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupOptNotify)
}

void IMGroupOptNotify::SharedCtor() {
  _cached_size_ = 0;
  opt_type_ = 0u;
  group_item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupOptNotify::~IMGroupOptNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupOptNotify)
  SharedDtor();
}

void IMGroupOptNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_item_info_;
  }
}

void IMGroupOptNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupOptNotify& IMGroupOptNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupOptNotify* IMGroupOptNotify::default_instance_ = NULL;

IMGroupOptNotify* IMGroupOptNotify::New() const {
  return new IMGroupOptNotify;
}

void IMGroupOptNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    opt_type_ = 0u;
    if (has_group_item_info()) {
      if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupOptNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupOptNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 opt_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_item_info;
        break;
      }

      // required .IM.BaseDefine.GroupListItem group_item_info = 2;
      case 2: {
        if (tag == 18) {
         parse_group_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupOptNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupOptNotify)
  return false;
#undef DO_
}

void IMGroupOptNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupOptNotify)
  // required uint32 opt_type = 1;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opt_type(), output);
  }

  // required .IM.BaseDefine.GroupListItem group_item_info = 2;
  if (has_group_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_item_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupOptNotify)
}

int IMGroupOptNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 opt_type = 1;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_type());
    }

    // required .IM.BaseDefine.GroupListItem group_item_info = 2;
    if (has_group_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_item_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupOptNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupOptNotify*>(&from));
}

void IMGroupOptNotify::MergeFrom(const IMGroupOptNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_group_item_info()) {
      mutable_group_item_info()->::IM::BaseDefine::GroupListItem::MergeFrom(from.group_item_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupOptNotify::CopyFrom(const IMGroupOptNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupOptNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_group_item_info()) {
    if (!this->group_item_info().IsInitialized()) return false;
  }
  return true;
}

void IMGroupOptNotify::Swap(IMGroupOptNotify* other) {
  if (other != this) {
    std::swap(opt_type_, other->opt_type_);
    std::swap(group_item_info_, other->group_item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupOptNotify::GetTypeName() const {
  return "IM.Group.IMGroupOptNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoModifyReq::kCompanyIdFieldNumber;
const int IMGroupInfoModifyReq::kUserIdFieldNumber;
const int IMGroupInfoModifyReq::kGroupTypeFieldNumber;
const int IMGroupInfoModifyReq::kGroupCompanyIdFieldNumber;
const int IMGroupInfoModifyReq::kGroupIdFieldNumber;
const int IMGroupInfoModifyReq::kGroupNameFieldNumber;
const int IMGroupInfoModifyReq::kGroupAvatarFieldNumber;
const int IMGroupInfoModifyReq::kTopicFieldNumber;
const int IMGroupInfoModifyReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoModifyReq::IMGroupInfoModifyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoModifyReq)
}

void IMGroupInfoModifyReq::InitAsDefaultInstance() {
}

IMGroupInfoModifyReq::IMGroupInfoModifyReq(const IMGroupInfoModifyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoModifyReq)
}

void IMGroupInfoModifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_type_ = 1;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoModifyReq::~IMGroupInfoModifyReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoModifyReq)
  SharedDtor();
}

void IMGroupInfoModifyReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoModifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoModifyReq& IMGroupInfoModifyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoModifyReq* IMGroupInfoModifyReq::default_instance_ = NULL;

IMGroupInfoModifyReq* IMGroupInfoModifyReq::New() const {
  return new IMGroupInfoModifyReq;
}

void IMGroupInfoModifyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupInfoModifyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(company_id_, user_id_);
    group_type_ = 1;
    group_company_id_ = 0u;
    group_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_avatar_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoModifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoModifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_company_id;
        break;
      }

      // required uint32 group_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 5;
      case 5: {
        if (tag == 40) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_name;
        break;
      }

      // required string group_name = 6;
      case 6: {
        if (tag == 50) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_topic;
        break;
      }

      // optional string topic = 8;
      case 8: {
        if (tag == 66) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoModifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoModifyReq)
  return false;
#undef DO_
}

void IMGroupInfoModifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoModifyReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required uint32 group_company_id = 4;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_company_id(), output);
  }

  // required uint32 group_id = 5;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_id(), output);
  }

  // required string group_name = 6;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_name(), output);
  }

  // required string group_avatar = 7;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_avatar(), output);
  }

  // optional string topic = 8;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoModifyReq)
}

int IMGroupInfoModifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 group_company_id = 4;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 5;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_name = 6;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 7;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // optional string topic = 8;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoModifyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoModifyReq*>(&from));
}

void IMGroupInfoModifyReq::MergeFrom(const IMGroupInfoModifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoModifyReq::CopyFrom(const IMGroupInfoModifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoModifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMGroupInfoModifyReq::Swap(IMGroupInfoModifyReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    std::swap(topic_, other->topic_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoModifyReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoModifyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoModifyRsp::kResultCodeFieldNumber;
const int IMGroupInfoModifyRsp::kGroupTypeFieldNumber;
const int IMGroupInfoModifyRsp::kCompanyIdFieldNumber;
const int IMGroupInfoModifyRsp::kUserIdFieldNumber;
const int IMGroupInfoModifyRsp::kGroupCompanyIdFieldNumber;
const int IMGroupInfoModifyRsp::kGroupIdFieldNumber;
const int IMGroupInfoModifyRsp::kUpdateTimeFieldNumber;
const int IMGroupInfoModifyRsp::kGroupInfoFieldNumber;
const int IMGroupInfoModifyRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoModifyRsp::IMGroupInfoModifyRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoModifyRsp)
}

void IMGroupInfoModifyRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_info_ = const_cast< ::IM::BaseDefine::GroupInfo*>(
      ::IM::BaseDefine::GroupInfo::internal_default_instance());
#else
  group_info_ = const_cast< ::IM::BaseDefine::GroupInfo*>(&::IM::BaseDefine::GroupInfo::default_instance());
#endif
}

IMGroupInfoModifyRsp::IMGroupInfoModifyRsp(const IMGroupInfoModifyRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoModifyRsp)
}

void IMGroupInfoModifyRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 1;
  group_type_ = 1;
  company_id_ = 0u;
  user_id_ = 0u;
  group_company_id_ = 0u;
  group_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  group_info_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoModifyRsp::~IMGroupInfoModifyRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoModifyRsp)
  SharedDtor();
}

void IMGroupInfoModifyRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_info_;
  }
}

void IMGroupInfoModifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoModifyRsp& IMGroupInfoModifyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoModifyRsp* IMGroupInfoModifyRsp::default_instance_ = NULL;

IMGroupInfoModifyRsp* IMGroupInfoModifyRsp::New() const {
  return new IMGroupInfoModifyRsp;
}

void IMGroupInfoModifyRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupInfoModifyRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(company_id_, update_time_);
    result_code_ = 1;
    group_type_ = 1;
    if (has_group_info()) {
      if (group_info_ != NULL) group_info_->::IM::BaseDefine::GroupInfo::Clear();
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoModifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoModifyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.OptResultCode result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 2;
      case 2: {
        if (tag == 16) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_company_id;
        break;
      }

      // required uint32 group_company_id = 5;
      case 5: {
        if (tag == 40) {
         parse_group_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 6;
      case 6: {
        if (tag == 48) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 7;
      case 7: {
        if (tag == 56) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_group_info;
        break;
      }

      // optional .IM.BaseDefine.GroupInfo group_info = 8;
      case 8: {
        if (tag == 66) {
         parse_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoModifyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoModifyRsp)
  return false;
#undef DO_
}

void IMGroupInfoModifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoModifyRsp)
  // required .IM.BaseDefine.OptResultCode result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required uint32 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->company_id(), output);
  }

  // required uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // required uint32 group_company_id = 5;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_company_id(), output);
  }

  // required uint32 group_id = 6;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_id(), output);
  }

  // required uint64 update_time = 7;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->update_time(), output);
  }

  // optional .IM.BaseDefine.GroupInfo group_info = 8;
  if (has_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->group_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoModifyRsp)
}

int IMGroupInfoModifyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.OptResultCode result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required .IM.BaseDefine.GroupType group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_company_id = 5;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 6;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint64 update_time = 7;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional .IM.BaseDefine.GroupInfo group_info = 8;
    if (has_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoModifyRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoModifyRsp*>(&from));
}

void IMGroupInfoModifyRsp::MergeFrom(const IMGroupInfoModifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_group_info()) {
      mutable_group_info()->::IM::BaseDefine::GroupInfo::MergeFrom(from.group_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoModifyRsp::CopyFrom(const IMGroupInfoModifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoModifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_group_info()) {
    if (!this->group_info().IsInitialized()) return false;
  }
  return true;
}

void IMGroupInfoModifyRsp::Swap(IMGroupInfoModifyRsp* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(group_type_, other->group_type_);
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(group_info_, other->group_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoModifyRsp::GetTypeName() const {
  return "IM.Group.IMGroupInfoModifyRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoModifyNotify::kGroupTypeFieldNumber;
const int IMGroupInfoModifyNotify::kCompanyIdFieldNumber;
const int IMGroupInfoModifyNotify::kGroupIdFieldNumber;
const int IMGroupInfoModifyNotify::kUpdateTimeFieldNumber;
const int IMGroupInfoModifyNotify::kGroupInfoFieldNumber;
const int IMGroupInfoModifyNotify::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoModifyNotify::IMGroupInfoModifyNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoModifyNotify)
}

void IMGroupInfoModifyNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_info_ = const_cast< ::IM::BaseDefine::GroupInfo*>(
      ::IM::BaseDefine::GroupInfo::internal_default_instance());
#else
  group_info_ = const_cast< ::IM::BaseDefine::GroupInfo*>(&::IM::BaseDefine::GroupInfo::default_instance());
#endif
}

IMGroupInfoModifyNotify::IMGroupInfoModifyNotify(const IMGroupInfoModifyNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoModifyNotify)
}

void IMGroupInfoModifyNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_type_ = 1;
  company_id_ = 0u;
  group_id_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  group_info_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoModifyNotify::~IMGroupInfoModifyNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoModifyNotify)
  SharedDtor();
}

void IMGroupInfoModifyNotify::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_info_;
  }
}

void IMGroupInfoModifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoModifyNotify& IMGroupInfoModifyNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoModifyNotify* IMGroupInfoModifyNotify::default_instance_ = NULL;

IMGroupInfoModifyNotify* IMGroupInfoModifyNotify::New() const {
  return new IMGroupInfoModifyNotify;
}

void IMGroupInfoModifyNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupInfoModifyNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(company_id_, update_time_);
    group_type_ = 1;
    group_id_ = 0u;
    if (has_group_info()) {
      if (group_info_ != NULL) group_info_->::IM::BaseDefine::GroupInfo::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoModifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoModifyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.GroupType group_type = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_company_id;
        break;
      }

      // required uint32 company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 5;
      case 5: {
        if (tag == 40) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_info;
        break;
      }

      // required .IM.BaseDefine.GroupInfo group_info = 6;
      case 6: {
        if (tag == 50) {
         parse_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoModifyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoModifyNotify)
  return false;
#undef DO_
}

void IMGroupInfoModifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoModifyNotify)
  // required .IM.BaseDefine.GroupType group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required uint32 company_id = 3;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->company_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // required uint64 update_time = 5;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->update_time(), output);
  }

  // required .IM.BaseDefine.GroupInfo group_info = 6;
  if (has_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->group_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoModifyNotify)
}

int IMGroupInfoModifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.GroupType group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 company_id = 3;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint64 update_time = 5;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // required .IM.BaseDefine.GroupInfo group_info = 6;
    if (has_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoModifyNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoModifyNotify*>(&from));
}

void IMGroupInfoModifyNotify::MergeFrom(const IMGroupInfoModifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_group_info()) {
      mutable_group_info()->::IM::BaseDefine::GroupInfo::MergeFrom(from.group_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoModifyNotify::CopyFrom(const IMGroupInfoModifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoModifyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_group_info()) {
    if (!this->group_info().IsInitialized()) return false;
  }
  return true;
}

void IMGroupInfoModifyNotify::Swap(IMGroupInfoModifyNotify* other) {
  if (other != this) {
    std::swap(group_type_, other->group_type_);
    std::swap(company_id_, other->company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(group_info_, other->group_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoModifyNotify::GetTypeName() const {
  return "IM.Group.IMGroupInfoModifyNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberReq::kCompanyIdFieldNumber;
const int IMGroupChangeMemberReq::kUserIdFieldNumber;
const int IMGroupChangeMemberReq::kChangeTypeFieldNumber;
const int IMGroupChangeMemberReq::kGroupItemInfoFieldNumber;
const int IMGroupChangeMemberReq::kMemberIdListFieldNumber;
const int IMGroupChangeMemberReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberReq::IMGroupChangeMemberReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(
      ::IM::BaseDefine::GroupListItem::internal_default_instance());
#else
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(&::IM::BaseDefine::GroupListItem::default_instance());
#endif
}

IMGroupChangeMemberReq::IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  change_type_ = 1;
  group_item_info_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberReq::~IMGroupChangeMemberReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberReq)
  SharedDtor();
}

void IMGroupChangeMemberReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_item_info_;
  }
}

void IMGroupChangeMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberReq& IMGroupChangeMemberReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberReq* IMGroupChangeMemberReq::default_instance_ = NULL;

IMGroupChangeMemberReq* IMGroupChangeMemberReq::New() const {
  return new IMGroupChangeMemberReq;
}

void IMGroupChangeMemberReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupChangeMemberReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(company_id_, user_id_);
    change_type_ = 1;
    if (has_group_item_info()) {
      if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupMemberOptType change_type = 3;
      case 3: {
        if (tag == 24) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupMemberOptType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupMemberOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_item_info;
        break;
      }

      // required .IM.BaseDefine.GroupListItem group_item_info = 4;
      case 4: {
        if (tag == 34) {
         parse_group_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
      case 5: {
        if (tag == 42) {
         parse_member_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberReq)
  return false;
#undef DO_
}

void IMGroupChangeMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupMemberOptType change_type = 3;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_type(), output);
  }

  // required .IM.BaseDefine.GroupListItem group_item_info = 4;
  if (has_group_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->group_item_info(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberReq)
}

int IMGroupChangeMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupMemberOptType change_type = 3;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required .IM.BaseDefine.GroupListItem group_item_info = 4;
    if (has_group_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_item_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
  total_size += 1 * this->member_id_list_size();
  for (int i = 0; i < this->member_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberReq*>(&from));
}

void IMGroupChangeMemberReq::MergeFrom(const IMGroupChangeMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_item_info()) {
      mutable_group_item_info()->::IM::BaseDefine::GroupListItem::MergeFrom(from.group_item_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberReq::CopyFrom(const IMGroupChangeMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_group_item_info()) {
    if (!this->group_item_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->member_id_list())) return false;
  return true;
}

void IMGroupChangeMemberReq::Swap(IMGroupChangeMemberReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(group_item_info_, other->group_item_info_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberReq::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberRsp::kUserIdFieldNumber;
const int IMGroupChangeMemberRsp::kChangeTypeFieldNumber;
const int IMGroupChangeMemberRsp::kResultCodeFieldNumber;
const int IMGroupChangeMemberRsp::kGroupItemInfoFieldNumber;
const int IMGroupChangeMemberRsp::kChgUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(
      ::IM::BaseDefine::GroupListItem::internal_default_instance());
#else
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(&::IM::BaseDefine::GroupListItem::default_instance());
#endif
}

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  result_code_ = 1;
  group_item_info_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberRsp::~IMGroupChangeMemberRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberRsp)
  SharedDtor();
}

void IMGroupChangeMemberRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_item_info_;
  }
}

void IMGroupChangeMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberRsp& IMGroupChangeMemberRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::default_instance_ = NULL;

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::New() const {
  return new IMGroupChangeMemberRsp;
}

void IMGroupChangeMemberRsp::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    user_id_ = 0u;
    change_type_ = 1;
    result_code_ = 1;
    if (has_group_item_info()) {
      if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupMemberOptType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupMemberOptType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupMemberOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_item_info;
        break;
      }

      // required .IM.BaseDefine.GroupListItem group_item_info = 4;
      case 4: {
        if (tag == 34) {
         parse_group_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chg_user_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 5;
      case 5: {
        if (tag == 42) {
         parse_chg_user_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chg_user_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chg_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberRsp)
  return false;
#undef DO_
}

void IMGroupChangeMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupMemberOptType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_code(), output);
  }

  // required .IM.BaseDefine.GroupListItem group_item_info = 4;
  if (has_group_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->group_item_info(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 5;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->chg_user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberRsp)
}

int IMGroupChangeMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupMemberOptType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required .IM.BaseDefine.GroupListItem group_item_info = 4;
    if (has_group_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_item_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 5;
  total_size += 1 * this->chg_user_id_list_size();
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chg_user_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberRsp*>(&from));
}

void IMGroupChangeMemberRsp::MergeFrom(const IMGroupChangeMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_item_info()) {
      mutable_group_item_info()->::IM::BaseDefine::GroupListItem::MergeFrom(from.group_item_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberRsp::CopyFrom(const IMGroupChangeMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_group_item_info()) {
    if (!this->group_item_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->chg_user_id_list())) return false;
  return true;
}

void IMGroupChangeMemberRsp::Swap(IMGroupChangeMemberRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(result_code_, other->result_code_);
    std::swap(group_item_info_, other->group_item_info_);
    chg_user_id_list_.Swap(&other->chg_user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberRsp::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberNotify::kChangeTypeFieldNumber;
const int IMGroupChangeMemberNotify::kGroupItemInfoFieldNumber;
const int IMGroupChangeMemberNotify::kChgUserIdListFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(
      ::IM::BaseDefine::GroupListItem::internal_default_instance());
#else
  group_item_info_ = const_cast< ::IM::BaseDefine::GroupListItem*>(&::IM::BaseDefine::GroupListItem::default_instance());
#endif
}

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 1;
  group_item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberNotify::~IMGroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberNotify)
  SharedDtor();
}

void IMGroupChangeMemberNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_item_info_;
  }
}

void IMGroupChangeMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberNotify& IMGroupChangeMemberNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::default_instance_ = NULL;

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::New() const {
  return new IMGroupChangeMemberNotify;
}

void IMGroupChangeMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    change_type_ = 1;
    if (has_group_item_info()) {
      if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
    }
  }
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.GroupMemberOptType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupMemberOptType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupMemberOptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_item_info;
        break;
      }

      // required .IM.BaseDefine.GroupListItem group_item_info = 2;
      case 2: {
        if (tag == 18) {
         parse_group_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chg_user_id_list;
        break;
      }

      // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 3;
      case 3: {
        if (tag == 26) {
         parse_chg_user_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chg_user_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chg_user_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberNotify)
  return false;
#undef DO_
}

void IMGroupChangeMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberNotify)
  // required .IM.BaseDefine.GroupMemberOptType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // required .IM.BaseDefine.GroupListItem group_item_info = 2;
  if (has_group_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_item_info(), output);
  }

  // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 3;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->chg_user_id_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberNotify)
}

int IMGroupChangeMemberNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.GroupMemberOptType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required .IM.BaseDefine.GroupListItem group_item_info = 2;
    if (has_group_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_item_info());
    }

  }
  // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 3;
  total_size += 1 * this->chg_user_id_list_size();
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chg_user_id_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberNotify*>(&from));
}

void IMGroupChangeMemberNotify::MergeFrom(const IMGroupChangeMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_item_info()) {
      mutable_group_item_info()->::IM::BaseDefine::GroupListItem::MergeFrom(from.group_item_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberNotify::CopyFrom(const IMGroupChangeMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_group_item_info()) {
    if (!this->group_item_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->chg_user_id_list())) return false;
  return true;
}

void IMGroupChangeMemberNotify::Swap(IMGroupChangeMemberNotify* other) {
  if (other != this) {
    std::swap(change_type_, other->change_type_);
    std::swap(group_item_info_, other->group_item_info_);
    chg_user_id_list_.Swap(&other->chg_user_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberNotify::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetOwnerReq::kGroupCompanyIdFieldNumber;
const int IMGroupSetOwnerReq::kGroupIdFieldNumber;
const int IMGroupSetOwnerReq::kGroupTypeFieldNumber;
const int IMGroupSetOwnerReq::kFromCompanyIdFieldNumber;
const int IMGroupSetOwnerReq::kFromUserIdFieldNumber;
const int IMGroupSetOwnerReq::kToCompanyIdFieldNumber;
const int IMGroupSetOwnerReq::kToUserIdFieldNumber;
#endif  // !_MSC_VER

IMGroupSetOwnerReq::IMGroupSetOwnerReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetOwnerReq)
}

void IMGroupSetOwnerReq::InitAsDefaultInstance() {
}

IMGroupSetOwnerReq::IMGroupSetOwnerReq(const IMGroupSetOwnerReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetOwnerReq)
}

void IMGroupSetOwnerReq::SharedCtor() {
  _cached_size_ = 0;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  from_company_id_ = 0u;
  from_user_id_ = 0u;
  to_company_id_ = 0u;
  to_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetOwnerReq::~IMGroupSetOwnerReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetOwnerReq)
  SharedDtor();
}

void IMGroupSetOwnerReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetOwnerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetOwnerReq& IMGroupSetOwnerReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetOwnerReq* IMGroupSetOwnerReq::default_instance_ = NULL;

IMGroupSetOwnerReq* IMGroupSetOwnerReq::New() const {
  return new IMGroupSetOwnerReq;
}

void IMGroupSetOwnerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetOwnerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(group_company_id_, group_id_);
    ZR_(from_company_id_, to_user_id_);
    group_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetOwnerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetOwnerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_from_company_id;
        break;
      }

      // required uint32 from_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_from_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_company_id_)));
          set_has_from_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_to_company_id;
        break;
      }

      // required uint32 to_company_id = 6;
      case 6: {
        if (tag == 48) {
         parse_to_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_company_id_)));
          set_has_to_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetOwnerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetOwnerReq)
  return false;
#undef DO_
}

void IMGroupSetOwnerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetOwnerReq)
  // required uint32 group_company_id = 1;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required uint32 from_company_id = 4;
  if (has_from_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_company_id(), output);
  }

  // required uint32 from_user_id = 5;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_user_id(), output);
  }

  // required uint32 to_company_id = 6;
  if (has_to_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->to_company_id(), output);
  }

  // required uint32 to_user_id = 7;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->to_user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetOwnerReq)
}

int IMGroupSetOwnerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_company_id = 1;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 from_company_id = 4;
    if (has_from_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_company_id());
    }

    // required uint32 from_user_id = 5;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_company_id = 6;
    if (has_to_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_company_id());
    }

    // required uint32 to_user_id = 7;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetOwnerReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetOwnerReq*>(&from));
}

void IMGroupSetOwnerReq::MergeFrom(const IMGroupSetOwnerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_from_company_id()) {
      set_from_company_id(from.from_company_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_company_id()) {
      set_to_company_id(from.to_company_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetOwnerReq::CopyFrom(const IMGroupSetOwnerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetOwnerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMGroupSetOwnerReq::Swap(IMGroupSetOwnerReq* other) {
  if (other != this) {
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(from_company_id_, other->from_company_id_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_company_id_, other->to_company_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetOwnerReq::GetTypeName() const {
  return "IM.Group.IMGroupSetOwnerReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetOwnerRsp::kGroupCompanyIdFieldNumber;
const int IMGroupSetOwnerRsp::kGroupIdFieldNumber;
const int IMGroupSetOwnerRsp::kGroupTypeFieldNumber;
const int IMGroupSetOwnerRsp::kFromCompanyIdFieldNumber;
const int IMGroupSetOwnerRsp::kFromUserIdFieldNumber;
const int IMGroupSetOwnerRsp::kToCompanyIdFieldNumber;
const int IMGroupSetOwnerRsp::kToUserIdFieldNumber;
const int IMGroupSetOwnerRsp::kResultCodeFieldNumber;
#endif  // !_MSC_VER

IMGroupSetOwnerRsp::IMGroupSetOwnerRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetOwnerRsp)
}

void IMGroupSetOwnerRsp::InitAsDefaultInstance() {
}

IMGroupSetOwnerRsp::IMGroupSetOwnerRsp(const IMGroupSetOwnerRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetOwnerRsp)
}

void IMGroupSetOwnerRsp::SharedCtor() {
  _cached_size_ = 0;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  from_company_id_ = 0u;
  from_user_id_ = 0u;
  to_company_id_ = 0u;
  to_user_id_ = 0u;
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetOwnerRsp::~IMGroupSetOwnerRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetOwnerRsp)
  SharedDtor();
}

void IMGroupSetOwnerRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetOwnerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetOwnerRsp& IMGroupSetOwnerRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetOwnerRsp* IMGroupSetOwnerRsp::default_instance_ = NULL;

IMGroupSetOwnerRsp* IMGroupSetOwnerRsp::New() const {
  return new IMGroupSetOwnerRsp;
}

void IMGroupSetOwnerRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetOwnerRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(group_company_id_, group_id_);
    ZR_(from_company_id_, to_user_id_);
    group_type_ = 1;
    result_code_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetOwnerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetOwnerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_from_company_id;
        break;
      }

      // required uint32 from_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_from_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_company_id_)));
          set_has_from_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_to_company_id;
        break;
      }

      // required uint32 to_company_id = 6;
      case 6: {
        if (tag == 48) {
         parse_to_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_company_id_)));
          set_has_to_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 8;
      case 8: {
        if (tag == 64) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetOwnerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetOwnerRsp)
  return false;
#undef DO_
}

void IMGroupSetOwnerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetOwnerRsp)
  // required uint32 group_company_id = 1;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required uint32 from_company_id = 4;
  if (has_from_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_company_id(), output);
  }

  // required uint32 from_user_id = 5;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_user_id(), output);
  }

  // required uint32 to_company_id = 6;
  if (has_to_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->to_company_id(), output);
  }

  // required uint32 to_user_id = 7;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->to_user_id(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 8;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetOwnerRsp)
}

int IMGroupSetOwnerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_company_id = 1;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 from_company_id = 4;
    if (has_from_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_company_id());
    }

    // required uint32 from_user_id = 5;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_company_id = 6;
    if (has_to_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_company_id());
    }

    // required uint32 to_user_id = 7;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 8;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetOwnerRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetOwnerRsp*>(&from));
}

void IMGroupSetOwnerRsp::MergeFrom(const IMGroupSetOwnerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_from_company_id()) {
      set_from_company_id(from.from_company_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_company_id()) {
      set_to_company_id(from.to_company_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetOwnerRsp::CopyFrom(const IMGroupSetOwnerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetOwnerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void IMGroupSetOwnerRsp::Swap(IMGroupSetOwnerRsp* other) {
  if (other != this) {
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(from_company_id_, other->from_company_id_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_company_id_, other->to_company_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetOwnerRsp::GetTypeName() const {
  return "IM.Group.IMGroupSetOwnerRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetOwnerNotify::kGroupCompanyIdFieldNumber;
const int IMGroupSetOwnerNotify::kGroupIdFieldNumber;
const int IMGroupSetOwnerNotify::kGroupTypeFieldNumber;
const int IMGroupSetOwnerNotify::kFromCompanyIdFieldNumber;
const int IMGroupSetOwnerNotify::kFromUserIdFieldNumber;
const int IMGroupSetOwnerNotify::kToCompanyIdFieldNumber;
const int IMGroupSetOwnerNotify::kToUserIdFieldNumber;
#endif  // !_MSC_VER

IMGroupSetOwnerNotify::IMGroupSetOwnerNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetOwnerNotify)
}

void IMGroupSetOwnerNotify::InitAsDefaultInstance() {
}

IMGroupSetOwnerNotify::IMGroupSetOwnerNotify(const IMGroupSetOwnerNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetOwnerNotify)
}

void IMGroupSetOwnerNotify::SharedCtor() {
  _cached_size_ = 0;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  from_company_id_ = 0u;
  from_user_id_ = 0u;
  to_company_id_ = 0u;
  to_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetOwnerNotify::~IMGroupSetOwnerNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetOwnerNotify)
  SharedDtor();
}

void IMGroupSetOwnerNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetOwnerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetOwnerNotify& IMGroupSetOwnerNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetOwnerNotify* IMGroupSetOwnerNotify::default_instance_ = NULL;

IMGroupSetOwnerNotify* IMGroupSetOwnerNotify::New() const {
  return new IMGroupSetOwnerNotify;
}

void IMGroupSetOwnerNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetOwnerNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(group_company_id_, group_id_);
    ZR_(from_company_id_, to_user_id_);
    group_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetOwnerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetOwnerNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_from_company_id;
        break;
      }

      // required uint32 from_company_id = 4;
      case 4: {
        if (tag == 32) {
         parse_from_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_company_id_)));
          set_has_from_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_to_company_id;
        break;
      }

      // required uint32 to_company_id = 6;
      case 6: {
        if (tag == 48) {
         parse_to_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_company_id_)));
          set_has_to_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetOwnerNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetOwnerNotify)
  return false;
#undef DO_
}

void IMGroupSetOwnerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetOwnerNotify)
  // required uint32 group_company_id = 1;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_company_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_type(), output);
  }

  // required uint32 from_company_id = 4;
  if (has_from_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_company_id(), output);
  }

  // required uint32 from_user_id = 5;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_user_id(), output);
  }

  // required uint32 to_company_id = 6;
  if (has_to_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->to_company_id(), output);
  }

  // required uint32 to_user_id = 7;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->to_user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetOwnerNotify)
}

int IMGroupSetOwnerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_company_id = 1;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 from_company_id = 4;
    if (has_from_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_company_id());
    }

    // required uint32 from_user_id = 5;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_company_id = 6;
    if (has_to_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_company_id());
    }

    // required uint32 to_user_id = 7;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetOwnerNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetOwnerNotify*>(&from));
}

void IMGroupSetOwnerNotify::MergeFrom(const IMGroupSetOwnerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_from_company_id()) {
      set_from_company_id(from.from_company_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_company_id()) {
      set_to_company_id(from.to_company_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetOwnerNotify::CopyFrom(const IMGroupSetOwnerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetOwnerNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMGroupSetOwnerNotify::Swap(IMGroupSetOwnerNotify* other) {
  if (other != this) {
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(from_company_id_, other->from_company_id_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_company_id_, other->to_company_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetOwnerNotify::GetTypeName() const {
  return "IM.Group.IMGroupSetOwnerNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupDisturbOptReq::kCompanyIdFieldNumber;
const int IMGroupDisturbOptReq::kUserIdFieldNumber;
const int IMGroupDisturbOptReq::kGroupCompanyIdFieldNumber;
const int IMGroupDisturbOptReq::kGroupIdFieldNumber;
const int IMGroupDisturbOptReq::kGroupTypeFieldNumber;
const int IMGroupDisturbOptReq::kNotDisturbFieldNumber;
#endif  // !_MSC_VER

IMGroupDisturbOptReq::IMGroupDisturbOptReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupDisturbOptReq)
}

void IMGroupDisturbOptReq::InitAsDefaultInstance() {
}

IMGroupDisturbOptReq::IMGroupDisturbOptReq(const IMGroupDisturbOptReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupDisturbOptReq)
}

void IMGroupDisturbOptReq::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  not_disturb_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupDisturbOptReq::~IMGroupDisturbOptReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupDisturbOptReq)
  SharedDtor();
}

void IMGroupDisturbOptReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupDisturbOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupDisturbOptReq& IMGroupDisturbOptReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupDisturbOptReq* IMGroupDisturbOptReq::default_instance_ = NULL;

IMGroupDisturbOptReq* IMGroupDisturbOptReq::New() const {
  return new IMGroupDisturbOptReq;
}

void IMGroupDisturbOptReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupDisturbOptReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
    not_disturb_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupDisturbOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupDisturbOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_company_id;
        break;
      }

      // required uint32 group_company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (tag == 40) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_not_disturb;
        break;
      }

      // required uint32 not_disturb = 6;
      case 6: {
        if (tag == 48) {
         parse_not_disturb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &not_disturb_)));
          set_has_not_disturb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupDisturbOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupDisturbOptReq)
  return false;
#undef DO_
}

void IMGroupDisturbOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupDisturbOptReq)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_company_id = 3;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_company_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // required uint32 not_disturb = 6;
  if (has_not_disturb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->not_disturb(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupDisturbOptReq)
}

int IMGroupDisturbOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_company_id = 3;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 not_disturb = 6;
    if (has_not_disturb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->not_disturb());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupDisturbOptReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupDisturbOptReq*>(&from));
}

void IMGroupDisturbOptReq::MergeFrom(const IMGroupDisturbOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_not_disturb()) {
      set_not_disturb(from.not_disturb());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupDisturbOptReq::CopyFrom(const IMGroupDisturbOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupDisturbOptReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMGroupDisturbOptReq::Swap(IMGroupDisturbOptReq* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(not_disturb_, other->not_disturb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupDisturbOptReq::GetTypeName() const {
  return "IM.Group.IMGroupDisturbOptReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupDisturbOptRsp::kCompanyIdFieldNumber;
const int IMGroupDisturbOptRsp::kUserIdFieldNumber;
const int IMGroupDisturbOptRsp::kGroupCompanyIdFieldNumber;
const int IMGroupDisturbOptRsp::kGroupIdFieldNumber;
const int IMGroupDisturbOptRsp::kGroupTypeFieldNumber;
const int IMGroupDisturbOptRsp::kNotDisturbFieldNumber;
const int IMGroupDisturbOptRsp::kResultCodeFieldNumber;
#endif  // !_MSC_VER

IMGroupDisturbOptRsp::IMGroupDisturbOptRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupDisturbOptRsp)
}

void IMGroupDisturbOptRsp::InitAsDefaultInstance() {
}

IMGroupDisturbOptRsp::IMGroupDisturbOptRsp(const IMGroupDisturbOptRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupDisturbOptRsp)
}

void IMGroupDisturbOptRsp::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  not_disturb_ = 0u;
  result_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupDisturbOptRsp::~IMGroupDisturbOptRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupDisturbOptRsp)
  SharedDtor();
}

void IMGroupDisturbOptRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupDisturbOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupDisturbOptRsp& IMGroupDisturbOptRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupDisturbOptRsp* IMGroupDisturbOptRsp::default_instance_ = NULL;

IMGroupDisturbOptRsp* IMGroupDisturbOptRsp::New() const {
  return new IMGroupDisturbOptRsp;
}

void IMGroupDisturbOptRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupDisturbOptRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
    not_disturb_ = 0u;
    result_code_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupDisturbOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupDisturbOptRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_company_id;
        break;
      }

      // required uint32 group_company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (tag == 40) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_not_disturb;
        break;
      }

      // required uint32 not_disturb = 6;
      case 6: {
        if (tag == 48) {
         parse_not_disturb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &not_disturb_)));
          set_has_not_disturb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result_code;
        break;
      }

      // required .IM.BaseDefine.OptResultCode result_code = 7;
      case 7: {
        if (tag == 56) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::OptResultCode_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::OptResultCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupDisturbOptRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupDisturbOptRsp)
  return false;
#undef DO_
}

void IMGroupDisturbOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupDisturbOptRsp)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_company_id = 3;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_company_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // required uint32 not_disturb = 6;
  if (has_not_disturb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->not_disturb(), output);
  }

  // required .IM.BaseDefine.OptResultCode result_code = 7;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupDisturbOptRsp)
}

int IMGroupDisturbOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_company_id = 3;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 not_disturb = 6;
    if (has_not_disturb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->not_disturb());
    }

    // required .IM.BaseDefine.OptResultCode result_code = 7;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupDisturbOptRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupDisturbOptRsp*>(&from));
}

void IMGroupDisturbOptRsp::MergeFrom(const IMGroupDisturbOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_not_disturb()) {
      set_not_disturb(from.not_disturb());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupDisturbOptRsp::CopyFrom(const IMGroupDisturbOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupDisturbOptRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMGroupDisturbOptRsp::Swap(IMGroupDisturbOptRsp* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(not_disturb_, other->not_disturb_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupDisturbOptRsp::GetTypeName() const {
  return "IM.Group.IMGroupDisturbOptRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_Group_Subs_Req::kCompanyIdFieldNumber;
const int IMUsersStat_Group_Subs_Req::kUserIdFieldNumber;
const int IMUsersStat_Group_Subs_Req::kGroupCompanyIdFieldNumber;
const int IMUsersStat_Group_Subs_Req::kGroupIdFieldNumber;
const int IMUsersStat_Group_Subs_Req::kGroupTypeFieldNumber;
const int IMUsersStat_Group_Subs_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_Group_Subs_Req::IMUsersStat_Group_Subs_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_Group_Subs_Req)
}

void IMUsersStat_Group_Subs_Req::InitAsDefaultInstance() {
}

IMUsersStat_Group_Subs_Req::IMUsersStat_Group_Subs_Req(const IMUsersStat_Group_Subs_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_Group_Subs_Req)
}

void IMUsersStat_Group_Subs_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_Group_Subs_Req::~IMUsersStat_Group_Subs_Req() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_Group_Subs_Req)
  SharedDtor();
}

void IMUsersStat_Group_Subs_Req::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_Group_Subs_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_Group_Subs_Req& IMUsersStat_Group_Subs_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_Group_Subs_Req* IMUsersStat_Group_Subs_Req::default_instance_ = NULL;

IMUsersStat_Group_Subs_Req* IMUsersStat_Group_Subs_Req::New() const {
  return new IMUsersStat_Group_Subs_Req;
}

void IMUsersStat_Group_Subs_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_Group_Subs_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_Group_Subs_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_Group_Subs_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_company_id;
        break;
      }

      // required uint32 group_company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (tag == 40) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_Group_Subs_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_Group_Subs_Req)
  return false;
#undef DO_
}

void IMUsersStat_Group_Subs_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_Group_Subs_Req)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_company_id = 3;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_company_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_Group_Subs_Req)
}

int IMUsersStat_Group_Subs_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_company_id = 3;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_Group_Subs_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_Group_Subs_Req*>(&from));
}

void IMUsersStat_Group_Subs_Req::MergeFrom(const IMUsersStat_Group_Subs_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_Group_Subs_Req::CopyFrom(const IMUsersStat_Group_Subs_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_Group_Subs_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMUsersStat_Group_Subs_Req::Swap(IMUsersStat_Group_Subs_Req* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_Group_Subs_Req::GetTypeName() const {
  return "IM.Group.IMUsersStat_Group_Subs_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_Group_UnSubs_Req::kCompanyIdFieldNumber;
const int IMUsersStat_Group_UnSubs_Req::kUserIdFieldNumber;
const int IMUsersStat_Group_UnSubs_Req::kGroupCompanyIdFieldNumber;
const int IMUsersStat_Group_UnSubs_Req::kGroupIdFieldNumber;
const int IMUsersStat_Group_UnSubs_Req::kGroupTypeFieldNumber;
const int IMUsersStat_Group_UnSubs_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_Group_UnSubs_Req::IMUsersStat_Group_UnSubs_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_Group_UnSubs_Req)
}

void IMUsersStat_Group_UnSubs_Req::InitAsDefaultInstance() {
}

IMUsersStat_Group_UnSubs_Req::IMUsersStat_Group_UnSubs_Req(const IMUsersStat_Group_UnSubs_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_Group_UnSubs_Req)
}

void IMUsersStat_Group_UnSubs_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_company_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_Group_UnSubs_Req::~IMUsersStat_Group_UnSubs_Req() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_Group_UnSubs_Req)
  SharedDtor();
}

void IMUsersStat_Group_UnSubs_Req::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_Group_UnSubs_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_Group_UnSubs_Req& IMUsersStat_Group_UnSubs_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_Group_UnSubs_Req* IMUsersStat_Group_UnSubs_Req::default_instance_ = NULL;

IMUsersStat_Group_UnSubs_Req* IMUsersStat_Group_UnSubs_Req::New() const {
  return new IMUsersStat_Group_UnSubs_Req;
}

void IMUsersStat_Group_UnSubs_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_Group_UnSubs_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(company_id_, group_id_);
    group_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_Group_UnSubs_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_Group_UnSubs_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_company_id;
        break;
      }

      // required uint32 group_company_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_company_id_)));
          set_has_group_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (tag == 40) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_Group_UnSubs_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_Group_UnSubs_Req)
  return false;
#undef DO_
}

void IMUsersStat_Group_UnSubs_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_Group_UnSubs_Req)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_company_id = 3;
  if (has_group_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_company_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_Group_UnSubs_Req)
}

int IMUsersStat_Group_UnSubs_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_company_id = 3;
    if (has_group_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_company_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_Group_UnSubs_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_Group_UnSubs_Req*>(&from));
}

void IMUsersStat_Group_UnSubs_Req::MergeFrom(const IMUsersStat_Group_UnSubs_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_company_id()) {
      set_group_company_id(from.group_company_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_Group_UnSubs_Req::CopyFrom(const IMUsersStat_Group_UnSubs_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_Group_UnSubs_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMUsersStat_Group_UnSubs_Req::Swap(IMUsersStat_Group_UnSubs_Req* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_company_id_, other->group_company_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_Group_UnSubs_Req::GetTypeName() const {
  return "IM.Group.IMUsersStat_Group_UnSubs_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_OrgNode_Subs_Req::kCompanyIdFieldNumber;
const int IMUsersStat_OrgNode_Subs_Req::kUserIdFieldNumber;
const int IMUsersStat_OrgNode_Subs_Req::kGroupIdFieldNumber;
const int IMUsersStat_OrgNode_Subs_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_OrgNode_Subs_Req::IMUsersStat_OrgNode_Subs_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_OrgNode_Subs_Req)
}

void IMUsersStat_OrgNode_Subs_Req::InitAsDefaultInstance() {
}

IMUsersStat_OrgNode_Subs_Req::IMUsersStat_OrgNode_Subs_Req(const IMUsersStat_OrgNode_Subs_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_OrgNode_Subs_Req)
}

void IMUsersStat_OrgNode_Subs_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_OrgNode_Subs_Req::~IMUsersStat_OrgNode_Subs_Req() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_OrgNode_Subs_Req)
  SharedDtor();
}

void IMUsersStat_OrgNode_Subs_Req::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_OrgNode_Subs_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_OrgNode_Subs_Req& IMUsersStat_OrgNode_Subs_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_OrgNode_Subs_Req* IMUsersStat_OrgNode_Subs_Req::default_instance_ = NULL;

IMUsersStat_OrgNode_Subs_Req* IMUsersStat_OrgNode_Subs_Req::New() const {
  return new IMUsersStat_OrgNode_Subs_Req;
}

void IMUsersStat_OrgNode_Subs_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_OrgNode_Subs_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    group_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_OrgNode_Subs_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_OrgNode_Subs_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_OrgNode_Subs_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_OrgNode_Subs_Req)
  return false;
#undef DO_
}

void IMUsersStat_OrgNode_Subs_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_OrgNode_Subs_Req)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_OrgNode_Subs_Req)
}

int IMUsersStat_OrgNode_Subs_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_OrgNode_Subs_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_OrgNode_Subs_Req*>(&from));
}

void IMUsersStat_OrgNode_Subs_Req::MergeFrom(const IMUsersStat_OrgNode_Subs_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_OrgNode_Subs_Req::CopyFrom(const IMUsersStat_OrgNode_Subs_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_OrgNode_Subs_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMUsersStat_OrgNode_Subs_Req::Swap(IMUsersStat_OrgNode_Subs_Req* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_OrgNode_Subs_Req::GetTypeName() const {
  return "IM.Group.IMUsersStat_OrgNode_Subs_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_OrgNode_UnSubs_Req::kCompanyIdFieldNumber;
const int IMUsersStat_OrgNode_UnSubs_Req::kUserIdFieldNumber;
const int IMUsersStat_OrgNode_UnSubs_Req::kGroupIdFieldNumber;
const int IMUsersStat_OrgNode_UnSubs_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_OrgNode_UnSubs_Req::IMUsersStat_OrgNode_UnSubs_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
}

void IMUsersStat_OrgNode_UnSubs_Req::InitAsDefaultInstance() {
}

IMUsersStat_OrgNode_UnSubs_Req::IMUsersStat_OrgNode_UnSubs_Req(const IMUsersStat_OrgNode_UnSubs_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
}

void IMUsersStat_OrgNode_UnSubs_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_OrgNode_UnSubs_Req::~IMUsersStat_OrgNode_UnSubs_Req() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
  SharedDtor();
}

void IMUsersStat_OrgNode_UnSubs_Req::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_OrgNode_UnSubs_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_OrgNode_UnSubs_Req& IMUsersStat_OrgNode_UnSubs_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_OrgNode_UnSubs_Req* IMUsersStat_OrgNode_UnSubs_Req::default_instance_ = NULL;

IMUsersStat_OrgNode_UnSubs_Req* IMUsersStat_OrgNode_UnSubs_Req::New() const {
  return new IMUsersStat_OrgNode_UnSubs_Req;
}

void IMUsersStat_OrgNode_UnSubs_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_OrgNode_UnSubs_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(company_id_, user_id_);
    group_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_OrgNode_UnSubs_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
  return false;
#undef DO_
}

void IMUsersStat_OrgNode_UnSubs_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
}

int IMUsersStat_OrgNode_UnSubs_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_OrgNode_UnSubs_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_OrgNode_UnSubs_Req*>(&from));
}

void IMUsersStat_OrgNode_UnSubs_Req::MergeFrom(const IMUsersStat_OrgNode_UnSubs_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_OrgNode_UnSubs_Req::CopyFrom(const IMUsersStat_OrgNode_UnSubs_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_OrgNode_UnSubs_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMUsersStat_OrgNode_UnSubs_Req::Swap(IMUsersStat_OrgNode_UnSubs_Req* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_OrgNode_UnSubs_Req::GetTypeName() const {
  return "IM.Group.IMUsersStat_OrgNode_UnSubs_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int TerminalState::kTypeFieldNumber;
const int TerminalState::kStateFieldNumber;
#endif  // !_MSC_VER

TerminalState::TerminalState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.TerminalState)
}

void TerminalState::InitAsDefaultInstance() {
}

TerminalState::TerminalState(const TerminalState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.TerminalState)
}

void TerminalState::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminalState::~TerminalState() {
  // @@protoc_insertion_point(destructor:IM.Group.TerminalState)
  SharedDtor();
}

void TerminalState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TerminalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TerminalState& TerminalState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

TerminalState* TerminalState::default_instance_ = NULL;

TerminalState* TerminalState::New() const {
  return new TerminalState;
}

void TerminalState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TerminalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.TerminalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.ClientType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .IM.BaseDefine.UserStatType state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_state(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.TerminalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.TerminalState)
  return false;
#undef DO_
}

void TerminalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.TerminalState)
  // required .IM.BaseDefine.ClientType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .IM.BaseDefine.UserStatType state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.TerminalState)
}

int TerminalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.ClientType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .IM.BaseDefine.UserStatType state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminalState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TerminalState*>(&from));
}

void TerminalState::MergeFrom(const TerminalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TerminalState::CopyFrom(const TerminalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminalState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TerminalState::Swap(TerminalState* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TerminalState::GetTypeName() const {
  return "IM.Group.TerminalState";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_Changed_User::kCompanyIdFieldNumber;
const int IMUsersStat_Changed_User::kUserIdFieldNumber;
const int IMUsersStat_Changed_User::kTerminalStateListFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_Changed_User::IMUsersStat_Changed_User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_Changed_User)
}

void IMUsersStat_Changed_User::InitAsDefaultInstance() {
}

IMUsersStat_Changed_User::IMUsersStat_Changed_User(const IMUsersStat_Changed_User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_Changed_User)
}

void IMUsersStat_Changed_User::SharedCtor() {
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_Changed_User::~IMUsersStat_Changed_User() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_Changed_User)
  SharedDtor();
}

void IMUsersStat_Changed_User::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_Changed_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_Changed_User& IMUsersStat_Changed_User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_Changed_User* IMUsersStat_Changed_User::default_instance_ = NULL;

IMUsersStat_Changed_User* IMUsersStat_Changed_User::New() const {
  return new IMUsersStat_Changed_User;
}

void IMUsersStat_Changed_User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_Changed_User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(company_id_, user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  terminal_state_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_Changed_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_Changed_User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terminal_state_list;
        break;
      }

      // repeated .IM.Group.TerminalState terminal_state_list = 3;
      case 3: {
        if (tag == 26) {
         parse_terminal_state_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_terminal_state_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terminal_state_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_Changed_User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_Changed_User)
  return false;
#undef DO_
}

void IMUsersStat_Changed_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_Changed_User)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // repeated .IM.Group.TerminalState terminal_state_list = 3;
  for (int i = 0; i < this->terminal_state_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->terminal_state_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_Changed_User)
}

int IMUsersStat_Changed_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  // repeated .IM.Group.TerminalState terminal_state_list = 3;
  total_size += 1 * this->terminal_state_list_size();
  for (int i = 0; i < this->terminal_state_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terminal_state_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_Changed_User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_Changed_User*>(&from));
}

void IMUsersStat_Changed_User::MergeFrom(const IMUsersStat_Changed_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  terminal_state_list_.MergeFrom(from.terminal_state_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_Changed_User::CopyFrom(const IMUsersStat_Changed_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_Changed_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->terminal_state_list())) return false;
  return true;
}

void IMUsersStat_Changed_User::Swap(IMUsersStat_Changed_User* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    terminal_state_list_.Swap(&other->terminal_state_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_Changed_User::GetTypeName() const {
  return "IM.Group.IMUsersStat_Changed_User";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_Changed_User_Notify::kUserListFieldNumber;
const int IMUsersStat_Changed_User_Notify::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_Changed_User_Notify::IMUsersStat_Changed_User_Notify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_Changed_User_Notify)
}

void IMUsersStat_Changed_User_Notify::InitAsDefaultInstance() {
}

IMUsersStat_Changed_User_Notify::IMUsersStat_Changed_User_Notify(const IMUsersStat_Changed_User_Notify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_Changed_User_Notify)
}

void IMUsersStat_Changed_User_Notify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_Changed_User_Notify::~IMUsersStat_Changed_User_Notify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_Changed_User_Notify)
  SharedDtor();
}

void IMUsersStat_Changed_User_Notify::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_Changed_User_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_Changed_User_Notify& IMUsersStat_Changed_User_Notify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_Changed_User_Notify* IMUsersStat_Changed_User_Notify::default_instance_ = NULL;

IMUsersStat_Changed_User_Notify* IMUsersStat_Changed_User_Notify::New() const {
  return new IMUsersStat_Changed_User_Notify;
}

void IMUsersStat_Changed_User_Notify::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_Changed_User_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_Changed_User_Notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.Group.IMUsersStat_Changed_User user_list = 1;
      case 1: {
        if (tag == 10) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_Changed_User_Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_Changed_User_Notify)
  return false;
#undef DO_
}

void IMUsersStat_Changed_User_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_Changed_User_Notify)
  // repeated .IM.Group.IMUsersStat_Changed_User user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_Changed_User_Notify)
}

int IMUsersStat_Changed_User_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Group.IMUsersStat_Changed_User user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_Changed_User_Notify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_Changed_User_Notify*>(&from));
}

void IMUsersStat_Changed_User_Notify::MergeFrom(const IMUsersStat_Changed_User_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_Changed_User_Notify::CopyFrom(const IMUsersStat_Changed_User_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_Changed_User_Notify::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void IMUsersStat_Changed_User_Notify::Swap(IMUsersStat_Changed_User_Notify* other) {
  if (other != this) {
    user_list_.Swap(&other->user_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_Changed_User_Notify::GetTypeName() const {
  return "IM.Group.IMUsersStat_Changed_User_Notify";
}


// ===================================================================

#ifndef _MSC_VER
const int OrgNode_Online::kGroupIdFieldNumber;
const int OrgNode_Online::kOnlinesFieldNumber;
#endif  // !_MSC_VER

OrgNode_Online::OrgNode_Online()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.OrgNode_Online)
}

void OrgNode_Online::InitAsDefaultInstance() {
}

OrgNode_Online::OrgNode_Online(const OrgNode_Online& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.OrgNode_Online)
}

void OrgNode_Online::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  onlines_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrgNode_Online::~OrgNode_Online() {
  // @@protoc_insertion_point(destructor:IM.Group.OrgNode_Online)
  SharedDtor();
}

void OrgNode_Online::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OrgNode_Online::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OrgNode_Online& OrgNode_Online::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

OrgNode_Online* OrgNode_Online::default_instance_ = NULL;

OrgNode_Online* OrgNode_Online::New() const {
  return new OrgNode_Online;
}

void OrgNode_Online::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrgNode_Online*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(group_id_, onlines_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OrgNode_Online::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.OrgNode_Online)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_onlines;
        break;
      }

      // required uint32 onlines = 2;
      case 2: {
        if (tag == 16) {
         parse_onlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlines_)));
          set_has_onlines();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.OrgNode_Online)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.OrgNode_Online)
  return false;
#undef DO_
}

void OrgNode_Online::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.OrgNode_Online)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 onlines = 2;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onlines(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.OrgNode_Online)
}

int OrgNode_Online::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 onlines = 2;
    if (has_onlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlines());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrgNode_Online::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OrgNode_Online*>(&from));
}

void OrgNode_Online::MergeFrom(const OrgNode_Online& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OrgNode_Online::CopyFrom(const OrgNode_Online& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrgNode_Online::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OrgNode_Online::Swap(OrgNode_Online* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(onlines_, other->onlines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OrgNode_Online::GetTypeName() const {
  return "IM.Group.OrgNode_Online";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_OrgTree_Subs_Req::kCompanyIdFieldNumber;
const int IMUsersStat_OrgTree_Subs_Req::kUserIdFieldNumber;
const int IMUsersStat_OrgTree_Subs_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_OrgTree_Subs_Req::IMUsersStat_OrgTree_Subs_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_OrgTree_Subs_Req)
}

void IMUsersStat_OrgTree_Subs_Req::InitAsDefaultInstance() {
}

IMUsersStat_OrgTree_Subs_Req::IMUsersStat_OrgTree_Subs_Req(const IMUsersStat_OrgTree_Subs_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_OrgTree_Subs_Req)
}

void IMUsersStat_OrgTree_Subs_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_OrgTree_Subs_Req::~IMUsersStat_OrgTree_Subs_Req() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_OrgTree_Subs_Req)
  SharedDtor();
}

void IMUsersStat_OrgTree_Subs_Req::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_OrgTree_Subs_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_OrgTree_Subs_Req& IMUsersStat_OrgTree_Subs_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_OrgTree_Subs_Req* IMUsersStat_OrgTree_Subs_Req::default_instance_ = NULL;

IMUsersStat_OrgTree_Subs_Req* IMUsersStat_OrgTree_Subs_Req::New() const {
  return new IMUsersStat_OrgTree_Subs_Req;
}

void IMUsersStat_OrgTree_Subs_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_OrgTree_Subs_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_OrgTree_Subs_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_OrgTree_Subs_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_OrgTree_Subs_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_OrgTree_Subs_Req)
  return false;
#undef DO_
}

void IMUsersStat_OrgTree_Subs_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_OrgTree_Subs_Req)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_OrgTree_Subs_Req)
}

int IMUsersStat_OrgTree_Subs_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_OrgTree_Subs_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_OrgTree_Subs_Req*>(&from));
}

void IMUsersStat_OrgTree_Subs_Req::MergeFrom(const IMUsersStat_OrgTree_Subs_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_OrgTree_Subs_Req::CopyFrom(const IMUsersStat_OrgTree_Subs_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_OrgTree_Subs_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMUsersStat_OrgTree_Subs_Req::Swap(IMUsersStat_OrgTree_Subs_Req* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_OrgTree_Subs_Req::GetTypeName() const {
  return "IM.Group.IMUsersStat_OrgTree_Subs_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_OrgTree_UnSubs_Req::kCompanyIdFieldNumber;
const int IMUsersStat_OrgTree_UnSubs_Req::kUserIdFieldNumber;
const int IMUsersStat_OrgTree_UnSubs_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_OrgTree_UnSubs_Req::IMUsersStat_OrgTree_UnSubs_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
}

void IMUsersStat_OrgTree_UnSubs_Req::InitAsDefaultInstance() {
}

IMUsersStat_OrgTree_UnSubs_Req::IMUsersStat_OrgTree_UnSubs_Req(const IMUsersStat_OrgTree_UnSubs_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
}

void IMUsersStat_OrgTree_UnSubs_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_OrgTree_UnSubs_Req::~IMUsersStat_OrgTree_UnSubs_Req() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
  SharedDtor();
}

void IMUsersStat_OrgTree_UnSubs_Req::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_OrgTree_UnSubs_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_OrgTree_UnSubs_Req& IMUsersStat_OrgTree_UnSubs_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_OrgTree_UnSubs_Req* IMUsersStat_OrgTree_UnSubs_Req::default_instance_ = NULL;

IMUsersStat_OrgTree_UnSubs_Req* IMUsersStat_OrgTree_UnSubs_Req::New() const {
  return new IMUsersStat_OrgTree_UnSubs_Req;
}

void IMUsersStat_OrgTree_UnSubs_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUsersStat_OrgTree_UnSubs_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(company_id_, user_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_OrgTree_UnSubs_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
  return false;
#undef DO_
}

void IMUsersStat_OrgTree_UnSubs_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
}

int IMUsersStat_OrgTree_UnSubs_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_OrgTree_UnSubs_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_OrgTree_UnSubs_Req*>(&from));
}

void IMUsersStat_OrgTree_UnSubs_Req::MergeFrom(const IMUsersStat_OrgTree_UnSubs_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_OrgTree_UnSubs_Req::CopyFrom(const IMUsersStat_OrgTree_UnSubs_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_OrgTree_UnSubs_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMUsersStat_OrgTree_UnSubs_Req::Swap(IMUsersStat_OrgTree_UnSubs_Req* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_OrgTree_UnSubs_Req::GetTypeName() const {
  return "IM.Group.IMUsersStat_OrgTree_UnSubs_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStat_OrgTree_Notify::kCompanyIdFieldNumber;
const int IMUsersStat_OrgTree_Notify::kOrgNodeListFieldNumber;
const int IMUsersStat_OrgTree_Notify::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStat_OrgTree_Notify::IMUsersStat_OrgTree_Notify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMUsersStat_OrgTree_Notify)
}

void IMUsersStat_OrgTree_Notify::InitAsDefaultInstance() {
}

IMUsersStat_OrgTree_Notify::IMUsersStat_OrgTree_Notify(const IMUsersStat_OrgTree_Notify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMUsersStat_OrgTree_Notify)
}

void IMUsersStat_OrgTree_Notify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStat_OrgTree_Notify::~IMUsersStat_OrgTree_Notify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMUsersStat_OrgTree_Notify)
  SharedDtor();
}

void IMUsersStat_OrgTree_Notify::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStat_OrgTree_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStat_OrgTree_Notify& IMUsersStat_OrgTree_Notify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMUsersStat_OrgTree_Notify* IMUsersStat_OrgTree_Notify::default_instance_ = NULL;

IMUsersStat_OrgTree_Notify* IMUsersStat_OrgTree_Notify::New() const {
  return new IMUsersStat_OrgTree_Notify;
}

void IMUsersStat_OrgTree_Notify::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    company_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  org_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStat_OrgTree_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMUsersStat_OrgTree_Notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 company_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_org_node_list;
        break;
      }

      // repeated .IM.Group.OrgNode_Online org_node_list = 2;
      case 2: {
        if (tag == 18) {
         parse_org_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_org_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_org_node_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMUsersStat_OrgTree_Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMUsersStat_OrgTree_Notify)
  return false;
#undef DO_
}

void IMUsersStat_OrgTree_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMUsersStat_OrgTree_Notify)
  // required uint32 company_id = 1;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->company_id(), output);
  }

  // repeated .IM.Group.OrgNode_Online org_node_list = 2;
  for (int i = 0; i < this->org_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->org_node_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMUsersStat_OrgTree_Notify)
}

int IMUsersStat_OrgTree_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 company_id = 1;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->company_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Group.OrgNode_Online org_node_list = 2;
  total_size += 1 * this->org_node_list_size();
  for (int i = 0; i < this->org_node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->org_node_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStat_OrgTree_Notify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStat_OrgTree_Notify*>(&from));
}

void IMUsersStat_OrgTree_Notify::MergeFrom(const IMUsersStat_OrgTree_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  org_node_list_.MergeFrom(from.org_node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStat_OrgTree_Notify::CopyFrom(const IMUsersStat_OrgTree_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStat_OrgTree_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->org_node_list())) return false;
  return true;
}

void IMUsersStat_OrgTree_Notify::Swap(IMUsersStat_OrgTree_Notify* other) {
  if (other != this) {
    std::swap(company_id_, other->company_id_);
    org_node_list_.Swap(&other->org_node_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStat_OrgTree_Notify::GetTypeName() const {
  return "IM.Group.IMUsersStat_OrgTree_Notify";
}


// ===================================================================

#ifndef _MSC_VER
const int GTCGroupOptNotify::kNotifyFieldNumber;
const int GTCGroupOptNotify::kSocketIdFieldNumber;
#endif  // !_MSC_VER

GTCGroupOptNotify::GTCGroupOptNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.GTCGroupOptNotify)
}

void GTCGroupOptNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notify_ = const_cast< ::IM::Group::IMGroupOptNotify*>(
      ::IM::Group::IMGroupOptNotify::internal_default_instance());
#else
  notify_ = const_cast< ::IM::Group::IMGroupOptNotify*>(&::IM::Group::IMGroupOptNotify::default_instance());
#endif
}

GTCGroupOptNotify::GTCGroupOptNotify(const GTCGroupOptNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.GTCGroupOptNotify)
}

void GTCGroupOptNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTCGroupOptNotify::~GTCGroupOptNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.GTCGroupOptNotify)
  SharedDtor();
}

void GTCGroupOptNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete notify_;
  }
}

void GTCGroupOptNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GTCGroupOptNotify& GTCGroupOptNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

GTCGroupOptNotify* GTCGroupOptNotify::default_instance_ = NULL;

GTCGroupOptNotify* GTCGroupOptNotify::New() const {
  return new GTCGroupOptNotify;
}

void GTCGroupOptNotify::Clear() {
  if (has_notify()) {
    if (notify_ != NULL) notify_->::IM::Group::IMGroupOptNotify::Clear();
  }
  socket_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GTCGroupOptNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.GTCGroupOptNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Group.IMGroupOptNotify notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket_id;
        break;
      }

      // repeated uint32 socket_id = 2;
      case 2: {
        if (tag == 16) {
         parse_socket_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_socket_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_socket_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.GTCGroupOptNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.GTCGroupOptNotify)
  return false;
#undef DO_
}

void GTCGroupOptNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.GTCGroupOptNotify)
  // required .IM.Group.IMGroupOptNotify notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notify(), output);
  }

  // repeated uint32 socket_id = 2;
  for (int i = 0; i < this->socket_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->socket_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.GTCGroupOptNotify)
}

int GTCGroupOptNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Group.IMGroupOptNotify notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

  }
  // repeated uint32 socket_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->socket_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->socket_id(i));
    }
    total_size += 1 * this->socket_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTCGroupOptNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GTCGroupOptNotify*>(&from));
}

void GTCGroupOptNotify::MergeFrom(const GTCGroupOptNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  socket_id_.MergeFrom(from.socket_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::IM::Group::IMGroupOptNotify::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GTCGroupOptNotify::CopyFrom(const GTCGroupOptNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTCGroupOptNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void GTCGroupOptNotify::Swap(GTCGroupOptNotify* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    socket_id_.Swap(&other->socket_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GTCGroupOptNotify::GetTypeName() const {
  return "IM.Group.GTCGroupOptNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int GTCGroupInfoModifyNotify::kNotifyFieldNumber;
const int GTCGroupInfoModifyNotify::kSocketIdFieldNumber;
#endif  // !_MSC_VER

GTCGroupInfoModifyNotify::GTCGroupInfoModifyNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.GTCGroupInfoModifyNotify)
}

void GTCGroupInfoModifyNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notify_ = const_cast< ::IM::Group::IMGroupInfoModifyNotify*>(
      ::IM::Group::IMGroupInfoModifyNotify::internal_default_instance());
#else
  notify_ = const_cast< ::IM::Group::IMGroupInfoModifyNotify*>(&::IM::Group::IMGroupInfoModifyNotify::default_instance());
#endif
}

GTCGroupInfoModifyNotify::GTCGroupInfoModifyNotify(const GTCGroupInfoModifyNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.GTCGroupInfoModifyNotify)
}

void GTCGroupInfoModifyNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTCGroupInfoModifyNotify::~GTCGroupInfoModifyNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.GTCGroupInfoModifyNotify)
  SharedDtor();
}

void GTCGroupInfoModifyNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete notify_;
  }
}

void GTCGroupInfoModifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GTCGroupInfoModifyNotify& GTCGroupInfoModifyNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

GTCGroupInfoModifyNotify* GTCGroupInfoModifyNotify::default_instance_ = NULL;

GTCGroupInfoModifyNotify* GTCGroupInfoModifyNotify::New() const {
  return new GTCGroupInfoModifyNotify;
}

void GTCGroupInfoModifyNotify::Clear() {
  if (has_notify()) {
    if (notify_ != NULL) notify_->::IM::Group::IMGroupInfoModifyNotify::Clear();
  }
  socket_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GTCGroupInfoModifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.GTCGroupInfoModifyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Group.IMGroupInfoModifyNotify notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket_id;
        break;
      }

      // repeated uint32 socket_id = 2;
      case 2: {
        if (tag == 16) {
         parse_socket_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_socket_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_socket_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.GTCGroupInfoModifyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.GTCGroupInfoModifyNotify)
  return false;
#undef DO_
}

void GTCGroupInfoModifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.GTCGroupInfoModifyNotify)
  // required .IM.Group.IMGroupInfoModifyNotify notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notify(), output);
  }

  // repeated uint32 socket_id = 2;
  for (int i = 0; i < this->socket_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->socket_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.GTCGroupInfoModifyNotify)
}

int GTCGroupInfoModifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Group.IMGroupInfoModifyNotify notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

  }
  // repeated uint32 socket_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->socket_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->socket_id(i));
    }
    total_size += 1 * this->socket_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTCGroupInfoModifyNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GTCGroupInfoModifyNotify*>(&from));
}

void GTCGroupInfoModifyNotify::MergeFrom(const GTCGroupInfoModifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  socket_id_.MergeFrom(from.socket_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::IM::Group::IMGroupInfoModifyNotify::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GTCGroupInfoModifyNotify::CopyFrom(const GTCGroupInfoModifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTCGroupInfoModifyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void GTCGroupInfoModifyNotify::Swap(GTCGroupInfoModifyNotify* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    socket_id_.Swap(&other->socket_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GTCGroupInfoModifyNotify::GetTypeName() const {
  return "IM.Group.GTCGroupInfoModifyNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int GTCGroupChangeMemberNotify::kNotifyFieldNumber;
const int GTCGroupChangeMemberNotify::kSocketIdFieldNumber;
#endif  // !_MSC_VER

GTCGroupChangeMemberNotify::GTCGroupChangeMemberNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.GTCGroupChangeMemberNotify)
}

void GTCGroupChangeMemberNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notify_ = const_cast< ::IM::Group::IMGroupChangeMemberNotify*>(
      ::IM::Group::IMGroupChangeMemberNotify::internal_default_instance());
#else
  notify_ = const_cast< ::IM::Group::IMGroupChangeMemberNotify*>(&::IM::Group::IMGroupChangeMemberNotify::default_instance());
#endif
}

GTCGroupChangeMemberNotify::GTCGroupChangeMemberNotify(const GTCGroupChangeMemberNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.GTCGroupChangeMemberNotify)
}

void GTCGroupChangeMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTCGroupChangeMemberNotify::~GTCGroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.GTCGroupChangeMemberNotify)
  SharedDtor();
}

void GTCGroupChangeMemberNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete notify_;
  }
}

void GTCGroupChangeMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GTCGroupChangeMemberNotify& GTCGroupChangeMemberNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

GTCGroupChangeMemberNotify* GTCGroupChangeMemberNotify::default_instance_ = NULL;

GTCGroupChangeMemberNotify* GTCGroupChangeMemberNotify::New() const {
  return new GTCGroupChangeMemberNotify;
}

void GTCGroupChangeMemberNotify::Clear() {
  if (has_notify()) {
    if (notify_ != NULL) notify_->::IM::Group::IMGroupChangeMemberNotify::Clear();
  }
  socket_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GTCGroupChangeMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.GTCGroupChangeMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Group.IMGroupChangeMemberNotify notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket_id;
        break;
      }

      // repeated uint32 socket_id = 2;
      case 2: {
        if (tag == 16) {
         parse_socket_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_socket_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_socket_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.GTCGroupChangeMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.GTCGroupChangeMemberNotify)
  return false;
#undef DO_
}

void GTCGroupChangeMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.GTCGroupChangeMemberNotify)
  // required .IM.Group.IMGroupChangeMemberNotify notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notify(), output);
  }

  // repeated uint32 socket_id = 2;
  for (int i = 0; i < this->socket_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->socket_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.GTCGroupChangeMemberNotify)
}

int GTCGroupChangeMemberNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Group.IMGroupChangeMemberNotify notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

  }
  // repeated uint32 socket_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->socket_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->socket_id(i));
    }
    total_size += 1 * this->socket_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTCGroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GTCGroupChangeMemberNotify*>(&from));
}

void GTCGroupChangeMemberNotify::MergeFrom(const GTCGroupChangeMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  socket_id_.MergeFrom(from.socket_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::IM::Group::IMGroupChangeMemberNotify::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GTCGroupChangeMemberNotify::CopyFrom(const GTCGroupChangeMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTCGroupChangeMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void GTCGroupChangeMemberNotify::Swap(GTCGroupChangeMemberNotify* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    socket_id_.Swap(&other->socket_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GTCGroupChangeMemberNotify::GetTypeName() const {
  return "IM.Group.GTCGroupChangeMemberNotify";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)
