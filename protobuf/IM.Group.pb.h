// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#ifndef PROTOBUF_IM_2eGroup_2eproto__INCLUDED
#define PROTOBUF_IM_2eGroup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Group {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eGroup_2eproto();
void protobuf_AssignDesc_IM_2eGroup_2eproto();
void protobuf_ShutdownFile_IM_2eGroup_2eproto();

class IMGroupListReq;
class IMGroupListRsp;
class IMGroupInfoReq;
class IMGroupInfoRsp;
class IMGroupMemberListReq;
class IMGroupMemberListRsp;
class IMGroupCreateReq;
class IMGroupCreateRsp;
class IMGroupDissolveReq;
class IMGroupDissolveRsp;
class IMGroupOptNotify;
class IMGroupInfoModifyReq;
class IMGroupInfoModifyRsp;
class IMGroupInfoModifyNotify;
class IMGroupChangeMemberReq;
class IMGroupChangeMemberRsp;
class IMGroupChangeMemberNotify;
class IMGroupSetOwnerReq;
class IMGroupSetOwnerRsp;
class IMGroupSetOwnerNotify;
class IMGroupDisturbOptReq;
class IMGroupDisturbOptRsp;
class IMUsersStat_Group_Subs_Req;
class IMUsersStat_Group_UnSubs_Req;
class IMUsersStat_OrgNode_Subs_Req;
class IMUsersStat_OrgNode_UnSubs_Req;
class TerminalState;
class IMUsersStat_Changed_User;
class IMUsersStat_Changed_User_Notify;
class OrgNode_Online;
class IMUsersStat_OrgTree_Subs_Req;
class IMUsersStat_OrgTree_UnSubs_Req;
class IMUsersStat_OrgTree_Notify;
class GTCGroupOptNotify;
class GTCGroupInfoModifyNotify;
class GTCGroupChangeMemberNotify;

// ===================================================================

class IMGroupListReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupListReq();
  virtual ~IMGroupListReq();

  IMGroupListReq(const IMGroupListReq& from);

  inline IMGroupListReq& operator=(const IMGroupListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupListReq* other);

  // implements Message ----------------------------------------------

  IMGroupListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupListReq& from);
  void MergeFrom(const IMGroupListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupListReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupListRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupListRsp();
  virtual ~IMGroupListRsp();

  IMGroupListRsp(const IMGroupListRsp& from);

  inline IMGroupListRsp& operator=(const IMGroupListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupListRsp* other);

  // implements Message ----------------------------------------------

  IMGroupListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupListRsp& from);
  void MergeFrom(const IMGroupListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required uint32 is_more_data = 2;
  inline bool has_is_more_data() const;
  inline void clear_is_more_data();
  static const int kIsMoreDataFieldNumber = 2;
  inline ::google::protobuf::uint32 is_more_data() const;
  inline void set_is_more_data(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 3;
  inline int group_info_list_size() const;
  inline void clear_group_info_list();
  static const int kGroupInfoListFieldNumber = 3;
  inline const ::IM::BaseDefine::GroupInfo& group_info_list(int index) const;
  inline ::IM::BaseDefine::GroupInfo* mutable_group_info_list(int index);
  inline ::IM::BaseDefine::GroupInfo* add_group_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
      group_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
      mutable_group_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupListRsp)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_more_data();
  inline void clear_has_is_more_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo > group_info_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 is_more_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoReq();
  virtual ~IMGroupInfoReq();

  IMGroupInfoReq(const IMGroupInfoReq& from);

  inline IMGroupInfoReq& operator=(const IMGroupInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoReq* other);

  // implements Message ----------------------------------------------

  IMGroupInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoReq& from);
  void MergeFrom(const IMGroupInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.GroupListItem group_item_list = 3;
  inline int group_item_list_size() const;
  inline void clear_group_item_list();
  static const int kGroupItemListFieldNumber = 3;
  inline const ::IM::BaseDefine::GroupListItem& group_item_list(int index) const;
  inline ::IM::BaseDefine::GroupListItem* mutable_group_item_list(int index);
  inline ::IM::BaseDefine::GroupListItem* add_group_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupListItem >&
      group_item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupListItem >*
      mutable_group_item_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupListItem > group_item_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoRsp();
  virtual ~IMGroupInfoRsp();

  IMGroupInfoRsp(const IMGroupInfoRsp& from);

  inline IMGroupInfoRsp& operator=(const IMGroupInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoRsp* other);

  // implements Message ----------------------------------------------

  IMGroupInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoRsp& from);
  void MergeFrom(const IMGroupInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 1;
  inline int group_info_list_size() const;
  inline void clear_group_info_list();
  static const int kGroupInfoListFieldNumber = 1;
  inline const ::IM::BaseDefine::GroupInfo& group_info_list(int index) const;
  inline ::IM::BaseDefine::GroupInfo* mutable_group_info_list(int index);
  inline ::IM::BaseDefine::GroupInfo* add_group_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
      group_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
      mutable_group_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoRsp)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo > group_info_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberListReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberListReq();
  virtual ~IMGroupMemberListReq();

  IMGroupMemberListReq(const IMGroupMemberListReq& from);

  inline IMGroupMemberListReq& operator=(const IMGroupMemberListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberListReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberListReq& from);
  void MergeFrom(const IMGroupMemberListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 3;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_group_id = 4;
  inline bool has_dest_group_id() const;
  inline void clear_dest_group_id();
  static const int kDestGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_group_id() const;
  inline void set_dest_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberListReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_dest_group_id();
  inline void clear_has_dest_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint32 dest_group_id_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  int group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberListRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberListRsp();
  virtual ~IMGroupMemberListRsp();

  IMGroupMemberListRsp(const IMGroupMemberListRsp& from);

  inline IMGroupMemberListRsp& operator=(const IMGroupMemberListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberListRsp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberListRsp& from);
  void MergeFrom(const IMGroupMemberListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 is_more_data = 3;
  inline bool has_is_more_data() const;
  inline void clear_is_more_data();
  static const int kIsMoreDataFieldNumber = 3;
  inline ::google::protobuf::uint32 is_more_data() const;
  inline void set_is_more_data(::google::protobuf::uint32 value);

  // required uint64 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // repeated .IM.BaseDefine.GroupMemberItem group_member_list = 5;
  inline int group_member_list_size() const;
  inline void clear_group_member_list();
  static const int kGroupMemberListFieldNumber = 5;
  inline const ::IM::BaseDefine::GroupMemberItem& group_member_list(int index) const;
  inline ::IM::BaseDefine::GroupMemberItem* mutable_group_member_list(int index);
  inline ::IM::BaseDefine::GroupMemberItem* add_group_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupMemberItem >&
      group_member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupMemberItem >*
      mutable_group_member_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberListRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_more_data();
  inline void clear_has_is_more_data();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupMemberItem > group_member_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 is_more_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupCreateReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupCreateReq();
  virtual ~IMGroupCreateReq();

  IMGroupCreateReq(const IMGroupCreateReq& from);

  inline IMGroupCreateReq& operator=(const IMGroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupCreateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupCreateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupCreateReq* other);

  // implements Message ----------------------------------------------

  IMGroupCreateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupCreateReq& from);
  void MergeFrom(const IMGroupCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required string group_name = 4;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 4;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_avatar = 5;
  inline bool has_group_avatar() const;
  inline void clear_group_avatar();
  static const int kGroupAvatarFieldNumber = 5;
  inline const ::std::string& group_avatar() const;
  inline void set_group_avatar(const ::std::string& value);
  inline void set_group_avatar(const char* value);
  inline void set_group_avatar(const char* value, size_t size);
  inline ::std::string* mutable_group_avatar();
  inline ::std::string* release_group_avatar();
  inline void set_allocated_group_avatar(::std::string* group_avatar);

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 6;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 6;
  inline const ::IM::BaseDefine::UserIdItem& member_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_member_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_member_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_member_id_list();

  // optional string topic = 7;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 7;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupCreateReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_avatar();
  inline void clear_has_group_avatar();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* group_name_;
  ::std::string* group_avatar_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > member_id_list_;
  ::std::string* topic_;
  ::std::string* attach_data_;
  int group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupCreateRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupCreateRsp();
  virtual ~IMGroupCreateRsp();

  IMGroupCreateRsp(const IMGroupCreateRsp& from);

  inline IMGroupCreateRsp& operator=(const IMGroupCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupCreateRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupCreateRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupCreateRsp* other);

  // implements Message ----------------------------------------------

  IMGroupCreateRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupCreateRsp& from);
  void MergeFrom(const IMGroupCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.OptResultCode result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // required .IM.BaseDefine.GroupType group_type = 2;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 company_id = 3;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 5;
  inline const ::IM::BaseDefine::UserIdItem& member_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_member_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_member_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_member_id_list();

  // required uint64 memberlist_update_time = 6;
  inline bool has_memberlist_update_time() const;
  inline void clear_memberlist_update_time();
  static const int kMemberlistUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 memberlist_update_time() const;
  inline void set_memberlist_update_time(::google::protobuf::uint64 value);

  // required uint32 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupCreateRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_memberlist_update_time();
  inline void clear_has_memberlist_update_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_code_;
  int group_type_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > member_id_list_;
  ::google::protobuf::uint64 memberlist_update_time_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupDissolveReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupDissolveReq();
  virtual ~IMGroupDissolveReq();

  IMGroupDissolveReq(const IMGroupDissolveReq& from);

  inline IMGroupDissolveReq& operator=(const IMGroupDissolveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupDissolveReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupDissolveReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupDissolveReq* other);

  // implements Message ----------------------------------------------

  IMGroupDissolveReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupDissolveReq& from);
  void MergeFrom(const IMGroupDissolveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupDissolveReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupDissolveReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupDissolveRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupDissolveRsp();
  virtual ~IMGroupDissolveRsp();

  IMGroupDissolveRsp(const IMGroupDissolveRsp& from);

  inline IMGroupDissolveRsp& operator=(const IMGroupDissolveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupDissolveRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupDissolveRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupDissolveRsp* other);

  // implements Message ----------------------------------------------

  IMGroupDissolveRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupDissolveRsp& from);
  void MergeFrom(const IMGroupDissolveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required .IM.BaseDefine.OptResultCode result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupDissolveRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupDissolveRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupOptNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupOptNotify();
  virtual ~IMGroupOptNotify();

  IMGroupOptNotify(const IMGroupOptNotify& from);

  inline IMGroupOptNotify& operator=(const IMGroupOptNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupOptNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupOptNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupOptNotify* other);

  // implements Message ----------------------------------------------

  IMGroupOptNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupOptNotify& from);
  void MergeFrom(const IMGroupOptNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 opt_type = 1;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 opt_type() const;
  inline void set_opt_type(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupListItem group_item_info = 2;
  inline bool has_group_item_info() const;
  inline void clear_group_item_info();
  static const int kGroupItemInfoFieldNumber = 2;
  inline const ::IM::BaseDefine::GroupListItem& group_item_info() const;
  inline ::IM::BaseDefine::GroupListItem* mutable_group_item_info();
  inline ::IM::BaseDefine::GroupListItem* release_group_item_info();
  inline void set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupOptNotify)
 private:
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_group_item_info();
  inline void clear_has_group_item_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::BaseDefine::GroupListItem* group_item_info_;
  ::google::protobuf::uint32 opt_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupOptNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoModifyReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoModifyReq();
  virtual ~IMGroupInfoModifyReq();

  IMGroupInfoModifyReq(const IMGroupInfoModifyReq& from);

  inline IMGroupInfoModifyReq& operator=(const IMGroupInfoModifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoModifyReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoModifyReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoModifyReq* other);

  // implements Message ----------------------------------------------

  IMGroupInfoModifyReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoModifyReq& from);
  void MergeFrom(const IMGroupInfoModifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 group_company_id = 4;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 5;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 5;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_name = 6;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 6;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_avatar = 7;
  inline bool has_group_avatar() const;
  inline void clear_group_avatar();
  static const int kGroupAvatarFieldNumber = 7;
  inline const ::std::string& group_avatar() const;
  inline void set_group_avatar(const ::std::string& value);
  inline void set_group_avatar(const char* value);
  inline void set_group_avatar(const char* value, size_t size);
  inline ::std::string* mutable_group_avatar();
  inline ::std::string* release_group_avatar();
  inline void set_allocated_group_avatar(::std::string* group_avatar);

  // optional string topic = 8;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 8;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoModifyReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_avatar();
  inline void clear_has_group_avatar();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int group_type_;
  ::google::protobuf::uint32 group_company_id_;
  ::std::string* group_name_;
  ::std::string* group_avatar_;
  ::std::string* topic_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoModifyReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoModifyRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoModifyRsp();
  virtual ~IMGroupInfoModifyRsp();

  IMGroupInfoModifyRsp(const IMGroupInfoModifyRsp& from);

  inline IMGroupInfoModifyRsp& operator=(const IMGroupInfoModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoModifyRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoModifyRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoModifyRsp* other);

  // implements Message ----------------------------------------------

  IMGroupInfoModifyRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoModifyRsp& from);
  void MergeFrom(const IMGroupInfoModifyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.OptResultCode result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // required .IM.BaseDefine.GroupType group_type = 2;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 company_id = 3;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_company_id = 5;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 5;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 6;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 6;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional .IM.BaseDefine.GroupInfo group_info = 8;
  inline bool has_group_info() const;
  inline void clear_group_info();
  static const int kGroupInfoFieldNumber = 8;
  inline const ::IM::BaseDefine::GroupInfo& group_info() const;
  inline ::IM::BaseDefine::GroupInfo* mutable_group_info();
  inline ::IM::BaseDefine::GroupInfo* release_group_info();
  inline void set_allocated_group_info(::IM::BaseDefine::GroupInfo* group_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoModifyRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_group_info();
  inline void clear_has_group_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_code_;
  int group_type_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint64 update_time_;
  ::IM::BaseDefine::GroupInfo* group_info_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoModifyRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoModifyNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoModifyNotify();
  virtual ~IMGroupInfoModifyNotify();

  IMGroupInfoModifyNotify(const IMGroupInfoModifyNotify& from);

  inline IMGroupInfoModifyNotify& operator=(const IMGroupInfoModifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoModifyNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoModifyNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoModifyNotify* other);

  // implements Message ----------------------------------------------

  IMGroupInfoModifyNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoModifyNotify& from);
  void MergeFrom(const IMGroupInfoModifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.GroupType group_type = 2;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 company_id = 3;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 5;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.GroupInfo group_info = 6;
  inline bool has_group_info() const;
  inline void clear_group_info();
  static const int kGroupInfoFieldNumber = 6;
  inline const ::IM::BaseDefine::GroupInfo& group_info() const;
  inline ::IM::BaseDefine::GroupInfo* mutable_group_info();
  inline ::IM::BaseDefine::GroupInfo* release_group_info();
  inline void set_allocated_group_info(::IM::BaseDefine::GroupInfo* group_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoModifyNotify)
 private:
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_group_info();
  inline void clear_has_group_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int group_type_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint64 update_time_;
  ::IM::BaseDefine::GroupInfo* group_info_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoModifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupChangeMemberReq();
  virtual ~IMGroupChangeMemberReq();

  IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from);

  inline IMGroupChangeMemberReq& operator=(const IMGroupChangeMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupChangeMemberReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupChangeMemberReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupChangeMemberReq* other);

  // implements Message ----------------------------------------------

  IMGroupChangeMemberReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupChangeMemberReq& from);
  void MergeFrom(const IMGroupChangeMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupMemberOptType change_type = 3;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupMemberOptType change_type() const;
  inline void set_change_type(::IM::BaseDefine::GroupMemberOptType value);

  // required .IM.BaseDefine.GroupListItem group_item_info = 4;
  inline bool has_group_item_info() const;
  inline void clear_group_item_info();
  static const int kGroupItemInfoFieldNumber = 4;
  inline const ::IM::BaseDefine::GroupListItem& group_item_info() const;
  inline ::IM::BaseDefine::GroupListItem* mutable_group_item_info();
  inline ::IM::BaseDefine::GroupListItem* release_group_item_info();
  inline void set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info);

  // repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 5;
  inline const ::IM::BaseDefine::UserIdItem& member_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_member_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_member_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_member_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_group_item_info();
  inline void clear_has_group_item_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::IM::BaseDefine::GroupListItem* group_item_info_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > member_id_list_;
  ::std::string* attach_data_;
  int change_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupChangeMemberReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupChangeMemberRsp();
  virtual ~IMGroupChangeMemberRsp();

  IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from);

  inline IMGroupChangeMemberRsp& operator=(const IMGroupChangeMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupChangeMemberRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupChangeMemberRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupChangeMemberRsp* other);

  // implements Message ----------------------------------------------

  IMGroupChangeMemberRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupChangeMemberRsp& from);
  void MergeFrom(const IMGroupChangeMemberRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupMemberOptType change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupMemberOptType change_type() const;
  inline void set_change_type(::IM::BaseDefine::GroupMemberOptType value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // required .IM.BaseDefine.GroupListItem group_item_info = 4;
  inline bool has_group_item_info() const;
  inline void clear_group_item_info();
  static const int kGroupItemInfoFieldNumber = 4;
  inline const ::IM::BaseDefine::GroupListItem& group_item_info() const;
  inline ::IM::BaseDefine::GroupListItem* mutable_group_item_info();
  inline ::IM::BaseDefine::GroupListItem* release_group_item_info();
  inline void set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info);

  // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 5;
  inline int chg_user_id_list_size() const;
  inline void clear_chg_user_id_list();
  static const int kChgUserIdListFieldNumber = 5;
  inline const ::IM::BaseDefine::UserIdItem& chg_user_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_chg_user_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_chg_user_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      chg_user_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_chg_user_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_item_info();
  inline void clear_has_group_item_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int change_type_;
  ::IM::BaseDefine::GroupListItem* group_item_info_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > chg_user_id_list_;
  ::std::string* attach_data_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupChangeMemberRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupChangeMemberNotify();
  virtual ~IMGroupChangeMemberNotify();

  IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from);

  inline IMGroupChangeMemberNotify& operator=(const IMGroupChangeMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupChangeMemberNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupChangeMemberNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupChangeMemberNotify* other);

  // implements Message ----------------------------------------------

  IMGroupChangeMemberNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupChangeMemberNotify& from);
  void MergeFrom(const IMGroupChangeMemberNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.GroupMemberOptType change_type = 1;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  inline ::IM::BaseDefine::GroupMemberOptType change_type() const;
  inline void set_change_type(::IM::BaseDefine::GroupMemberOptType value);

  // required .IM.BaseDefine.GroupListItem group_item_info = 2;
  inline bool has_group_item_info() const;
  inline void clear_group_item_info();
  static const int kGroupItemInfoFieldNumber = 2;
  inline const ::IM::BaseDefine::GroupListItem& group_item_info() const;
  inline ::IM::BaseDefine::GroupListItem* mutable_group_item_info();
  inline ::IM::BaseDefine::GroupListItem* release_group_item_info();
  inline void set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info);

  // repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 3;
  inline int chg_user_id_list_size() const;
  inline void clear_chg_user_id_list();
  static const int kChgUserIdListFieldNumber = 3;
  inline const ::IM::BaseDefine::UserIdItem& chg_user_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_chg_user_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_chg_user_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      chg_user_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_chg_user_id_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberNotify)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_group_item_info();
  inline void clear_has_group_item_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::BaseDefine::GroupListItem* group_item_info_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > chg_user_id_list_;
  int change_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupChangeMemberNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetOwnerReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetOwnerReq();
  virtual ~IMGroupSetOwnerReq();

  IMGroupSetOwnerReq(const IMGroupSetOwnerReq& from);

  inline IMGroupSetOwnerReq& operator=(const IMGroupSetOwnerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetOwnerReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetOwnerReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetOwnerReq* other);

  // implements Message ----------------------------------------------

  IMGroupSetOwnerReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetOwnerReq& from);
  void MergeFrom(const IMGroupSetOwnerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_company_id = 1;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 from_company_id = 4;
  inline bool has_from_company_id() const;
  inline void clear_from_company_id();
  static const int kFromCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 from_company_id() const;
  inline void set_from_company_id(::google::protobuf::uint32 value);

  // required uint32 from_user_id = 5;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 5;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_company_id = 6;
  inline bool has_to_company_id() const;
  inline void clear_to_company_id();
  static const int kToCompanyIdFieldNumber = 6;
  inline ::google::protobuf::uint32 to_company_id() const;
  inline void set_to_company_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 7;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetOwnerReq)
 private:
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_from_company_id();
  inline void clear_has_from_company_id();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_company_id();
  inline void clear_has_to_company_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint32 from_company_id_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_company_id_;
  ::google::protobuf::uint32 to_user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetOwnerReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetOwnerRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetOwnerRsp();
  virtual ~IMGroupSetOwnerRsp();

  IMGroupSetOwnerRsp(const IMGroupSetOwnerRsp& from);

  inline IMGroupSetOwnerRsp& operator=(const IMGroupSetOwnerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetOwnerRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetOwnerRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetOwnerRsp* other);

  // implements Message ----------------------------------------------

  IMGroupSetOwnerRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetOwnerRsp& from);
  void MergeFrom(const IMGroupSetOwnerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_company_id = 1;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 from_company_id = 4;
  inline bool has_from_company_id() const;
  inline void clear_from_company_id();
  static const int kFromCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 from_company_id() const;
  inline void set_from_company_id(::google::protobuf::uint32 value);

  // required uint32 from_user_id = 5;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 5;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_company_id = 6;
  inline bool has_to_company_id() const;
  inline void clear_to_company_id();
  static const int kToCompanyIdFieldNumber = 6;
  inline ::google::protobuf::uint32 to_company_id() const;
  inline void set_to_company_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 7;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 8;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 8;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetOwnerRsp)
 private:
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_from_company_id();
  inline void clear_has_from_company_id();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_company_id();
  inline void clear_has_to_company_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint32 from_company_id_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_company_id_;
  ::google::protobuf::uint32 to_user_id_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetOwnerRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetOwnerNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetOwnerNotify();
  virtual ~IMGroupSetOwnerNotify();

  IMGroupSetOwnerNotify(const IMGroupSetOwnerNotify& from);

  inline IMGroupSetOwnerNotify& operator=(const IMGroupSetOwnerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetOwnerNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetOwnerNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetOwnerNotify* other);

  // implements Message ----------------------------------------------

  IMGroupSetOwnerNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetOwnerNotify& from);
  void MergeFrom(const IMGroupSetOwnerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_company_id = 1;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 from_company_id = 4;
  inline bool has_from_company_id() const;
  inline void clear_from_company_id();
  static const int kFromCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 from_company_id() const;
  inline void set_from_company_id(::google::protobuf::uint32 value);

  // required uint32 from_user_id = 5;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 5;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_company_id = 6;
  inline bool has_to_company_id() const;
  inline void clear_to_company_id();
  static const int kToCompanyIdFieldNumber = 6;
  inline ::google::protobuf::uint32 to_company_id() const;
  inline void set_to_company_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 7;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetOwnerNotify)
 private:
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_from_company_id();
  inline void clear_has_from_company_id();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_company_id();
  inline void clear_has_to_company_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint32 from_company_id_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_company_id_;
  ::google::protobuf::uint32 to_user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetOwnerNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupDisturbOptReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupDisturbOptReq();
  virtual ~IMGroupDisturbOptReq();

  IMGroupDisturbOptReq(const IMGroupDisturbOptReq& from);

  inline IMGroupDisturbOptReq& operator=(const IMGroupDisturbOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupDisturbOptReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupDisturbOptReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupDisturbOptReq* other);

  // implements Message ----------------------------------------------

  IMGroupDisturbOptReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupDisturbOptReq& from);
  void MergeFrom(const IMGroupDisturbOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_company_id = 3;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 not_disturb = 6;
  inline bool has_not_disturb() const;
  inline void clear_not_disturb();
  static const int kNotDisturbFieldNumber = 6;
  inline ::google::protobuf::uint32 not_disturb() const;
  inline void set_not_disturb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupDisturbOptReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_not_disturb();
  inline void clear_has_not_disturb();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint32 not_disturb_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupDisturbOptReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupDisturbOptRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupDisturbOptRsp();
  virtual ~IMGroupDisturbOptRsp();

  IMGroupDisturbOptRsp(const IMGroupDisturbOptRsp& from);

  inline IMGroupDisturbOptRsp& operator=(const IMGroupDisturbOptRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupDisturbOptRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupDisturbOptRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupDisturbOptRsp* other);

  // implements Message ----------------------------------------------

  IMGroupDisturbOptRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupDisturbOptRsp& from);
  void MergeFrom(const IMGroupDisturbOptRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_company_id = 3;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 not_disturb = 6;
  inline bool has_not_disturb() const;
  inline void clear_not_disturb();
  static const int kNotDisturbFieldNumber = 6;
  inline ::google::protobuf::uint32 not_disturb() const;
  inline void set_not_disturb(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 7;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 7;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupDisturbOptRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_not_disturb();
  inline void clear_has_not_disturb();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint32 not_disturb_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupDisturbOptRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_Group_Subs_Req : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_Group_Subs_Req();
  virtual ~IMUsersStat_Group_Subs_Req();

  IMUsersStat_Group_Subs_Req(const IMUsersStat_Group_Subs_Req& from);

  inline IMUsersStat_Group_Subs_Req& operator=(const IMUsersStat_Group_Subs_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_Group_Subs_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_Group_Subs_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_Group_Subs_Req* other);

  // implements Message ----------------------------------------------

  IMUsersStat_Group_Subs_Req* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_Group_Subs_Req& from);
  void MergeFrom(const IMUsersStat_Group_Subs_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_company_id = 3;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_Group_Subs_Req)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  int group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_Group_Subs_Req* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_Group_UnSubs_Req : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_Group_UnSubs_Req();
  virtual ~IMUsersStat_Group_UnSubs_Req();

  IMUsersStat_Group_UnSubs_Req(const IMUsersStat_Group_UnSubs_Req& from);

  inline IMUsersStat_Group_UnSubs_Req& operator=(const IMUsersStat_Group_UnSubs_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_Group_UnSubs_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_Group_UnSubs_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_Group_UnSubs_Req* other);

  // implements Message ----------------------------------------------

  IMUsersStat_Group_UnSubs_Req* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_Group_UnSubs_Req& from);
  void MergeFrom(const IMUsersStat_Group_UnSubs_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_company_id = 3;
  inline bool has_group_company_id() const;
  inline void clear_group_company_id();
  static const int kGroupCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_company_id() const;
  inline void set_group_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_Group_UnSubs_Req)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_company_id();
  inline void clear_has_group_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_company_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  int group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_Group_UnSubs_Req* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_OrgNode_Subs_Req : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_OrgNode_Subs_Req();
  virtual ~IMUsersStat_OrgNode_Subs_Req();

  IMUsersStat_OrgNode_Subs_Req(const IMUsersStat_OrgNode_Subs_Req& from);

  inline IMUsersStat_OrgNode_Subs_Req& operator=(const IMUsersStat_OrgNode_Subs_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_OrgNode_Subs_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_OrgNode_Subs_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_OrgNode_Subs_Req* other);

  // implements Message ----------------------------------------------

  IMUsersStat_OrgNode_Subs_Req* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_OrgNode_Subs_Req& from);
  void MergeFrom(const IMUsersStat_OrgNode_Subs_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_OrgNode_Subs_Req)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_OrgNode_Subs_Req* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_OrgNode_UnSubs_Req : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_OrgNode_UnSubs_Req();
  virtual ~IMUsersStat_OrgNode_UnSubs_Req();

  IMUsersStat_OrgNode_UnSubs_Req(const IMUsersStat_OrgNode_UnSubs_Req& from);

  inline IMUsersStat_OrgNode_UnSubs_Req& operator=(const IMUsersStat_OrgNode_UnSubs_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_OrgNode_UnSubs_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_OrgNode_UnSubs_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_OrgNode_UnSubs_Req* other);

  // implements Message ----------------------------------------------

  IMUsersStat_OrgNode_UnSubs_Req* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_OrgNode_UnSubs_Req& from);
  void MergeFrom(const IMUsersStat_OrgNode_UnSubs_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_OrgNode_UnSubs_Req)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_OrgNode_UnSubs_Req* default_instance_;
};
// -------------------------------------------------------------------

class TerminalState : public ::google::protobuf::MessageLite {
 public:
  TerminalState();
  virtual ~TerminalState();

  TerminalState(const TerminalState& from);

  inline TerminalState& operator=(const TerminalState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const TerminalState& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TerminalState* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TerminalState* other);

  // implements Message ----------------------------------------------

  TerminalState* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TerminalState& from);
  void MergeFrom(const TerminalState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ClientType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::IM::BaseDefine::ClientType type() const;
  inline void set_type(::IM::BaseDefine::ClientType value);

  // required .IM.BaseDefine.UserStatType state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::IM::BaseDefine::UserStatType state() const;
  inline void set_state(::IM::BaseDefine::UserStatType value);

  // @@protoc_insertion_point(class_scope:IM.Group.TerminalState)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static TerminalState* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_Changed_User : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_Changed_User();
  virtual ~IMUsersStat_Changed_User();

  IMUsersStat_Changed_User(const IMUsersStat_Changed_User& from);

  inline IMUsersStat_Changed_User& operator=(const IMUsersStat_Changed_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_Changed_User& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_Changed_User* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_Changed_User* other);

  // implements Message ----------------------------------------------

  IMUsersStat_Changed_User* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_Changed_User& from);
  void MergeFrom(const IMUsersStat_Changed_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.Group.TerminalState terminal_state_list = 3;
  inline int terminal_state_list_size() const;
  inline void clear_terminal_state_list();
  static const int kTerminalStateListFieldNumber = 3;
  inline const ::IM::Group::TerminalState& terminal_state_list(int index) const;
  inline ::IM::Group::TerminalState* mutable_terminal_state_list(int index);
  inline ::IM::Group::TerminalState* add_terminal_state_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Group::TerminalState >&
      terminal_state_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Group::TerminalState >*
      mutable_terminal_state_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_Changed_User)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::Group::TerminalState > terminal_state_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_Changed_User* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_Changed_User_Notify : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_Changed_User_Notify();
  virtual ~IMUsersStat_Changed_User_Notify();

  IMUsersStat_Changed_User_Notify(const IMUsersStat_Changed_User_Notify& from);

  inline IMUsersStat_Changed_User_Notify& operator=(const IMUsersStat_Changed_User_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_Changed_User_Notify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_Changed_User_Notify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_Changed_User_Notify* other);

  // implements Message ----------------------------------------------

  IMUsersStat_Changed_User_Notify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_Changed_User_Notify& from);
  void MergeFrom(const IMUsersStat_Changed_User_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.Group.IMUsersStat_Changed_User user_list = 1;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 1;
  inline const ::IM::Group::IMUsersStat_Changed_User& user_list(int index) const;
  inline ::IM::Group::IMUsersStat_Changed_User* mutable_user_list(int index);
  inline ::IM::Group::IMUsersStat_Changed_User* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Group::IMUsersStat_Changed_User >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Group::IMUsersStat_Changed_User >*
      mutable_user_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_Changed_User_Notify)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::Group::IMUsersStat_Changed_User > user_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_Changed_User_Notify* default_instance_;
};
// -------------------------------------------------------------------

class OrgNode_Online : public ::google::protobuf::MessageLite {
 public:
  OrgNode_Online();
  virtual ~OrgNode_Online();

  OrgNode_Online(const OrgNode_Online& from);

  inline OrgNode_Online& operator=(const OrgNode_Online& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const OrgNode_Online& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OrgNode_Online* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OrgNode_Online* other);

  // implements Message ----------------------------------------------

  OrgNode_Online* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OrgNode_Online& from);
  void MergeFrom(const OrgNode_Online& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 onlines = 2;
  inline bool has_onlines() const;
  inline void clear_onlines();
  static const int kOnlinesFieldNumber = 2;
  inline ::google::protobuf::uint32 onlines() const;
  inline void set_onlines(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Group.OrgNode_Online)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_onlines();
  inline void clear_has_onlines();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 onlines_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static OrgNode_Online* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_OrgTree_Subs_Req : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_OrgTree_Subs_Req();
  virtual ~IMUsersStat_OrgTree_Subs_Req();

  IMUsersStat_OrgTree_Subs_Req(const IMUsersStat_OrgTree_Subs_Req& from);

  inline IMUsersStat_OrgTree_Subs_Req& operator=(const IMUsersStat_OrgTree_Subs_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_OrgTree_Subs_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_OrgTree_Subs_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_OrgTree_Subs_Req* other);

  // implements Message ----------------------------------------------

  IMUsersStat_OrgTree_Subs_Req* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_OrgTree_Subs_Req& from);
  void MergeFrom(const IMUsersStat_OrgTree_Subs_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_OrgTree_Subs_Req)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_OrgTree_Subs_Req* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_OrgTree_UnSubs_Req : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_OrgTree_UnSubs_Req();
  virtual ~IMUsersStat_OrgTree_UnSubs_Req();

  IMUsersStat_OrgTree_UnSubs_Req(const IMUsersStat_OrgTree_UnSubs_Req& from);

  inline IMUsersStat_OrgTree_UnSubs_Req& operator=(const IMUsersStat_OrgTree_UnSubs_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_OrgTree_UnSubs_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_OrgTree_UnSubs_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_OrgTree_UnSubs_Req* other);

  // implements Message ----------------------------------------------

  IMUsersStat_OrgTree_UnSubs_Req* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_OrgTree_UnSubs_Req& from);
  void MergeFrom(const IMUsersStat_OrgTree_UnSubs_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_OrgTree_UnSubs_Req)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_OrgTree_UnSubs_Req* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStat_OrgTree_Notify : public ::google::protobuf::MessageLite {
 public:
  IMUsersStat_OrgTree_Notify();
  virtual ~IMUsersStat_OrgTree_Notify();

  IMUsersStat_OrgTree_Notify(const IMUsersStat_OrgTree_Notify& from);

  inline IMUsersStat_OrgTree_Notify& operator=(const IMUsersStat_OrgTree_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStat_OrgTree_Notify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStat_OrgTree_Notify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStat_OrgTree_Notify* other);

  // implements Message ----------------------------------------------

  IMUsersStat_OrgTree_Notify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStat_OrgTree_Notify& from);
  void MergeFrom(const IMUsersStat_OrgTree_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // repeated .IM.Group.OrgNode_Online org_node_list = 2;
  inline int org_node_list_size() const;
  inline void clear_org_node_list();
  static const int kOrgNodeListFieldNumber = 2;
  inline const ::IM::Group::OrgNode_Online& org_node_list(int index) const;
  inline ::IM::Group::OrgNode_Online* mutable_org_node_list(int index);
  inline ::IM::Group::OrgNode_Online* add_org_node_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Group::OrgNode_Online >&
      org_node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Group::OrgNode_Online >*
      mutable_org_node_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMUsersStat_OrgTree_Notify)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::Group::OrgNode_Online > org_node_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 company_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStat_OrgTree_Notify* default_instance_;
};
// -------------------------------------------------------------------

class GTCGroupOptNotify : public ::google::protobuf::MessageLite {
 public:
  GTCGroupOptNotify();
  virtual ~GTCGroupOptNotify();

  GTCGroupOptNotify(const GTCGroupOptNotify& from);

  inline GTCGroupOptNotify& operator=(const GTCGroupOptNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GTCGroupOptNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GTCGroupOptNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GTCGroupOptNotify* other);

  // implements Message ----------------------------------------------

  GTCGroupOptNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GTCGroupOptNotify& from);
  void MergeFrom(const GTCGroupOptNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.Group.IMGroupOptNotify notify = 1;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 1;
  inline const ::IM::Group::IMGroupOptNotify& notify() const;
  inline ::IM::Group::IMGroupOptNotify* mutable_notify();
  inline ::IM::Group::IMGroupOptNotify* release_notify();
  inline void set_allocated_notify(::IM::Group::IMGroupOptNotify* notify);

  // repeated uint32 socket_id = 2;
  inline int socket_id_size() const;
  inline void clear_socket_id();
  static const int kSocketIdFieldNumber = 2;
  inline ::google::protobuf::uint32 socket_id(int index) const;
  inline void set_socket_id(int index, ::google::protobuf::uint32 value);
  inline void add_socket_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      socket_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_socket_id();

  // @@protoc_insertion_point(class_scope:IM.Group.GTCGroupOptNotify)
 private:
  inline void set_has_notify();
  inline void clear_has_notify();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::Group::IMGroupOptNotify* notify_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > socket_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static GTCGroupOptNotify* default_instance_;
};
// -------------------------------------------------------------------

class GTCGroupInfoModifyNotify : public ::google::protobuf::MessageLite {
 public:
  GTCGroupInfoModifyNotify();
  virtual ~GTCGroupInfoModifyNotify();

  GTCGroupInfoModifyNotify(const GTCGroupInfoModifyNotify& from);

  inline GTCGroupInfoModifyNotify& operator=(const GTCGroupInfoModifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GTCGroupInfoModifyNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GTCGroupInfoModifyNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GTCGroupInfoModifyNotify* other);

  // implements Message ----------------------------------------------

  GTCGroupInfoModifyNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GTCGroupInfoModifyNotify& from);
  void MergeFrom(const GTCGroupInfoModifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.Group.IMGroupInfoModifyNotify notify = 1;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 1;
  inline const ::IM::Group::IMGroupInfoModifyNotify& notify() const;
  inline ::IM::Group::IMGroupInfoModifyNotify* mutable_notify();
  inline ::IM::Group::IMGroupInfoModifyNotify* release_notify();
  inline void set_allocated_notify(::IM::Group::IMGroupInfoModifyNotify* notify);

  // repeated uint32 socket_id = 2;
  inline int socket_id_size() const;
  inline void clear_socket_id();
  static const int kSocketIdFieldNumber = 2;
  inline ::google::protobuf::uint32 socket_id(int index) const;
  inline void set_socket_id(int index, ::google::protobuf::uint32 value);
  inline void add_socket_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      socket_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_socket_id();

  // @@protoc_insertion_point(class_scope:IM.Group.GTCGroupInfoModifyNotify)
 private:
  inline void set_has_notify();
  inline void clear_has_notify();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::Group::IMGroupInfoModifyNotify* notify_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > socket_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static GTCGroupInfoModifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class GTCGroupChangeMemberNotify : public ::google::protobuf::MessageLite {
 public:
  GTCGroupChangeMemberNotify();
  virtual ~GTCGroupChangeMemberNotify();

  GTCGroupChangeMemberNotify(const GTCGroupChangeMemberNotify& from);

  inline GTCGroupChangeMemberNotify& operator=(const GTCGroupChangeMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GTCGroupChangeMemberNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GTCGroupChangeMemberNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GTCGroupChangeMemberNotify* other);

  // implements Message ----------------------------------------------

  GTCGroupChangeMemberNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GTCGroupChangeMemberNotify& from);
  void MergeFrom(const GTCGroupChangeMemberNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.Group.IMGroupChangeMemberNotify notify = 1;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 1;
  inline const ::IM::Group::IMGroupChangeMemberNotify& notify() const;
  inline ::IM::Group::IMGroupChangeMemberNotify* mutable_notify();
  inline ::IM::Group::IMGroupChangeMemberNotify* release_notify();
  inline void set_allocated_notify(::IM::Group::IMGroupChangeMemberNotify* notify);

  // repeated uint32 socket_id = 2;
  inline int socket_id_size() const;
  inline void clear_socket_id();
  static const int kSocketIdFieldNumber = 2;
  inline ::google::protobuf::uint32 socket_id(int index) const;
  inline void set_socket_id(int index, ::google::protobuf::uint32 value);
  inline void add_socket_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      socket_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_socket_id();

  // @@protoc_insertion_point(class_scope:IM.Group.GTCGroupChangeMemberNotify)
 private:
  inline void set_has_notify();
  inline void clear_has_notify();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::Group::IMGroupChangeMemberNotify* notify_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > socket_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static GTCGroupChangeMemberNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// IMGroupListReq

// required uint32 company_id = 1;
inline bool IMGroupListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListReq.company_id)
  return company_id_;
}
inline void IMGroupListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListReq.user_id)
  return user_id_;
}
inline void IMGroupListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListReq.user_id)
}

// required uint64 update_time = 3;
inline bool IMGroupListReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupListReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupListReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupListReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGroupListReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListReq.update_time)
  return update_time_;
}
inline void IMGroupListReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListReq.update_time)
}

// optional bytes attach_data = 20;
inline bool IMGroupListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListReq.attach_data)
  return *attach_data_;
}
inline void IMGroupListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListReq.attach_data)
}
inline void IMGroupListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupListReq.attach_data)
}
inline void IMGroupListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupListReq.attach_data)
}
inline ::std::string* IMGroupListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupListReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupListRsp

// required uint64 update_time = 1;
inline bool IMGroupListRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupListRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupListRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupListRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGroupListRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListRsp.update_time)
  return update_time_;
}
inline void IMGroupListRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListRsp.update_time)
}

// required uint32 is_more_data = 2;
inline bool IMGroupListRsp::has_is_more_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupListRsp::set_has_is_more_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupListRsp::clear_has_is_more_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupListRsp::clear_is_more_data() {
  is_more_data_ = 0u;
  clear_has_is_more_data();
}
inline ::google::protobuf::uint32 IMGroupListRsp::is_more_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListRsp.is_more_data)
  return is_more_data_;
}
inline void IMGroupListRsp::set_is_more_data(::google::protobuf::uint32 value) {
  set_has_is_more_data();
  is_more_data_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListRsp.is_more_data)
}

// repeated .IM.BaseDefine.GroupInfo group_info_list = 3;
inline int IMGroupListRsp::group_info_list_size() const {
  return group_info_list_.size();
}
inline void IMGroupListRsp::clear_group_info_list() {
  group_info_list_.Clear();
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupListRsp::group_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListRsp.group_info_list)
  return group_info_list_.Get(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupListRsp::mutable_group_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupListRsp.group_info_list)
  return group_info_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupListRsp::add_group_info_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupListRsp.group_info_list)
  return group_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
IMGroupListRsp::group_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupListRsp.group_info_list)
  return group_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
IMGroupListRsp::mutable_group_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupListRsp.group_info_list)
  return &group_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupListRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupListRsp.attach_data)
}
inline void IMGroupListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupListRsp.attach_data)
}
inline void IMGroupListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupListRsp.attach_data)
}
inline ::std::string* IMGroupListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupListRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoReq

// required uint32 company_id = 1;
inline bool IMGroupInfoReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupInfoReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoReq.company_id)
  return company_id_;
}
inline void IMGroupInfoReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoReq.user_id)
  return user_id_;
}
inline void IMGroupInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoReq.user_id)
}

// repeated .IM.BaseDefine.GroupListItem group_item_list = 3;
inline int IMGroupInfoReq::group_item_list_size() const {
  return group_item_list_.size();
}
inline void IMGroupInfoReq::clear_group_item_list() {
  group_item_list_.Clear();
}
inline const ::IM::BaseDefine::GroupListItem& IMGroupInfoReq::group_item_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoReq.group_item_list)
  return group_item_list_.Get(index);
}
inline ::IM::BaseDefine::GroupListItem* IMGroupInfoReq::mutable_group_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoReq.group_item_list)
  return group_item_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupListItem* IMGroupInfoReq::add_group_item_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoReq.group_item_list)
  return group_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupListItem >&
IMGroupInfoReq::group_item_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoReq.group_item_list)
  return group_item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupListItem >*
IMGroupInfoReq::mutable_group_item_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoReq.group_item_list)
  return &group_item_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoReq.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoReq.attach_data)
}
inline void IMGroupInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoReq.attach_data)
}
inline void IMGroupInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoReq.attach_data)
}
inline ::std::string* IMGroupInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoRsp

// repeated .IM.BaseDefine.GroupInfo group_info_list = 1;
inline int IMGroupInfoRsp::group_info_list_size() const {
  return group_info_list_.size();
}
inline void IMGroupInfoRsp::clear_group_info_list() {
  group_info_list_.Clear();
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupInfoRsp::group_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoRsp.group_info_list)
  return group_info_list_.Get(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoRsp::mutable_group_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoRsp.group_info_list)
  return group_info_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoRsp::add_group_info_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoRsp.group_info_list)
  return group_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
IMGroupInfoRsp::group_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoRsp.group_info_list)
  return group_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
IMGroupInfoRsp::mutable_group_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoRsp.group_info_list)
  return &group_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoRsp.attach_data)
}
inline void IMGroupInfoRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoRsp.attach_data)
}
inline void IMGroupInfoRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoRsp.attach_data)
}
inline ::std::string* IMGroupInfoRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberListReq

// required uint32 company_id = 1;
inline bool IMGroupMemberListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.company_id)
  return company_id_;
}
inline void IMGroupMemberListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupMemberListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.user_id)
  return user_id_;
}
inline void IMGroupMemberListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.user_id)
}

// required uint32 dest_company_id = 3;
inline bool IMGroupMemberListReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberListReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberListReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberListReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.dest_company_id)
  return dest_company_id_;
}
inline void IMGroupMemberListReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.dest_company_id)
}

// required uint32 dest_group_id = 4;
inline bool IMGroupMemberListReq::has_dest_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberListReq::set_has_dest_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberListReq::clear_has_dest_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberListReq::clear_dest_group_id() {
  dest_group_id_ = 0u;
  clear_has_dest_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListReq::dest_group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.dest_group_id)
  return dest_group_id_;
}
inline void IMGroupMemberListReq::set_dest_group_id(::google::protobuf::uint32 value) {
  set_has_dest_group_id();
  dest_group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.dest_group_id)
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool IMGroupMemberListReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberListReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberListReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberListReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupMemberListReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupMemberListReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.group_type)
}

// required uint64 update_time = 6;
inline bool IMGroupMemberListReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberListReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberListReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberListReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGroupMemberListReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.update_time)
  return update_time_;
}
inline void IMGroupMemberListReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.update_time)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListReq.attach_data)
}
inline void IMGroupMemberListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberListReq.attach_data)
}
inline void IMGroupMemberListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberListReq.attach_data)
}
inline ::std::string* IMGroupMemberListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberListReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberListRsp

// required uint32 company_id = 1;
inline bool IMGroupMemberListRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberListRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberListRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberListRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListRsp.company_id)
  return company_id_;
}
inline void IMGroupMemberListRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListRsp.company_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberListRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberListRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberListRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberListRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListRsp.group_id)
  return group_id_;
}
inline void IMGroupMemberListRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListRsp.group_id)
}

// required uint32 is_more_data = 3;
inline bool IMGroupMemberListRsp::has_is_more_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberListRsp::set_has_is_more_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberListRsp::clear_has_is_more_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberListRsp::clear_is_more_data() {
  is_more_data_ = 0u;
  clear_has_is_more_data();
}
inline ::google::protobuf::uint32 IMGroupMemberListRsp::is_more_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListRsp.is_more_data)
  return is_more_data_;
}
inline void IMGroupMemberListRsp::set_is_more_data(::google::protobuf::uint32 value) {
  set_has_is_more_data();
  is_more_data_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListRsp.is_more_data)
}

// required uint64 update_time = 4;
inline bool IMGroupMemberListRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberListRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberListRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberListRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGroupMemberListRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListRsp.update_time)
  return update_time_;
}
inline void IMGroupMemberListRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListRsp.update_time)
}

// repeated .IM.BaseDefine.GroupMemberItem group_member_list = 5;
inline int IMGroupMemberListRsp::group_member_list_size() const {
  return group_member_list_.size();
}
inline void IMGroupMemberListRsp::clear_group_member_list() {
  group_member_list_.Clear();
}
inline const ::IM::BaseDefine::GroupMemberItem& IMGroupMemberListRsp::group_member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListRsp.group_member_list)
  return group_member_list_.Get(index);
}
inline ::IM::BaseDefine::GroupMemberItem* IMGroupMemberListRsp::mutable_group_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberListRsp.group_member_list)
  return group_member_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupMemberItem* IMGroupMemberListRsp::add_group_member_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberListRsp.group_member_list)
  return group_member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupMemberItem >&
IMGroupMemberListRsp::group_member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberListRsp.group_member_list)
  return group_member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupMemberItem >*
IMGroupMemberListRsp::mutable_group_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberListRsp.group_member_list)
  return &group_member_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListRsp.attach_data)
}
inline void IMGroupMemberListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberListRsp.attach_data)
}
inline void IMGroupMemberListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberListRsp.attach_data)
}
inline ::std::string* IMGroupMemberListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberListRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupCreateReq

// required uint32 company_id = 1;
inline bool IMGroupCreateReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupCreateReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupCreateReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupCreateReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupCreateReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.company_id)
  return company_id_;
}
inline void IMGroupCreateReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupCreateReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupCreateReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupCreateReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupCreateReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.user_id)
  return user_id_;
}
inline void IMGroupCreateReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.user_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupCreateReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupCreateReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupCreateReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupCreateReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupCreateReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_type)
}

// required string group_name = 4;
inline bool IMGroupCreateReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupCreateReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupCreateReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupCreateReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupCreateReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_name)
  return *group_name_;
}
inline void IMGroupCreateReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_name)
}
inline void IMGroupCreateReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.group_name)
}
inline void IMGroupCreateReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.group_name)
}
inline ::std::string* IMGroupCreateReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupCreateReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_name)
}

// required string group_avatar = 5;
inline bool IMGroupCreateReq::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupCreateReq::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupCreateReq::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupCreateReq::clear_group_avatar() {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_->clear();
  }
  clear_has_group_avatar();
}
inline const ::std::string& IMGroupCreateReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_avatar)
  return *group_avatar_;
}
inline void IMGroupCreateReq::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_avatar)
}
inline void IMGroupCreateReq::set_group_avatar(const char* value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.group_avatar)
}
inline void IMGroupCreateReq::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.group_avatar)
}
inline ::std::string* IMGroupCreateReq::mutable_group_avatar() {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_avatar)
  return group_avatar_;
}
inline ::std::string* IMGroupCreateReq::release_group_avatar() {
  clear_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_avatar_;
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (group_avatar) {
    set_has_group_avatar();
    group_avatar_ = group_avatar;
  } else {
    clear_has_group_avatar();
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_avatar)
}

// repeated .IM.BaseDefine.UserIdItem member_id_list = 6;
inline int IMGroupCreateReq::member_id_list_size() const {
  return member_id_list_.size();
}
inline void IMGroupCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& IMGroupCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupCreateReq::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupCreateReq::add_member_id_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
IMGroupCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
IMGroupCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateReq.member_id_list)
  return &member_id_list_;
}

// optional string topic = 7;
inline bool IMGroupCreateReq::has_topic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupCreateReq::set_has_topic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupCreateReq::clear_has_topic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupCreateReq::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& IMGroupCreateReq::topic() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.topic)
  return *topic_;
}
inline void IMGroupCreateReq::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.topic)
}
inline void IMGroupCreateReq::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.topic)
}
inline void IMGroupCreateReq::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.topic)
}
inline ::std::string* IMGroupCreateReq::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.topic)
  return topic_;
}
inline ::std::string* IMGroupCreateReq::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.topic)
}

// optional bytes attach_data = 20;
inline bool IMGroupCreateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupCreateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupCreateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupCreateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.attach_data)
  return *attach_data_;
}
inline void IMGroupCreateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.attach_data)
}
inline void IMGroupCreateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.attach_data)
}
inline void IMGroupCreateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.attach_data)
}
inline ::std::string* IMGroupCreateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupCreateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupCreateRsp

// required .IM.BaseDefine.OptResultCode result_code = 1;
inline bool IMGroupCreateRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupCreateRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupCreateRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupCreateRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMGroupCreateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMGroupCreateRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.result_code)
}

// required .IM.BaseDefine.GroupType group_type = 2;
inline bool IMGroupCreateRsp::has_group_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupCreateRsp::set_has_group_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupCreateRsp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupCreateRsp::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupCreateRsp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupCreateRsp::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_type)
}

// required uint32 company_id = 3;
inline bool IMGroupCreateRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupCreateRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupCreateRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupCreateRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.company_id)
  return company_id_;
}
inline void IMGroupCreateRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.company_id)
}

// required uint32 group_id = 4;
inline bool IMGroupCreateRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupCreateRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupCreateRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupCreateRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_id)
  return group_id_;
}
inline void IMGroupCreateRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_id)
}

// repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
inline int IMGroupCreateRsp::member_id_list_size() const {
  return member_id_list_.size();
}
inline void IMGroupCreateRsp::clear_member_id_list() {
  member_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& IMGroupCreateRsp::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.member_id_list)
  return member_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupCreateRsp::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.member_id_list)
  return member_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupCreateRsp::add_member_id_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateRsp.member_id_list)
  return member_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
IMGroupCreateRsp::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateRsp.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
IMGroupCreateRsp::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateRsp.member_id_list)
  return &member_id_list_;
}

// required uint64 memberlist_update_time = 6;
inline bool IMGroupCreateRsp::has_memberlist_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupCreateRsp::set_has_memberlist_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupCreateRsp::clear_has_memberlist_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupCreateRsp::clear_memberlist_update_time() {
  memberlist_update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_memberlist_update_time();
}
inline ::google::protobuf::uint64 IMGroupCreateRsp::memberlist_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.memberlist_update_time)
  return memberlist_update_time_;
}
inline void IMGroupCreateRsp::set_memberlist_update_time(::google::protobuf::uint64 value) {
  set_has_memberlist_update_time();
  memberlist_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.memberlist_update_time)
}

// required uint32 user_id = 7;
inline bool IMGroupCreateRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupCreateRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupCreateRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupCreateRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id)
  return user_id_;
}
inline void IMGroupCreateRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupCreateRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupCreateRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupCreateRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupCreateRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupCreateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupCreateRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.attach_data)
}
inline void IMGroupCreateRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateRsp.attach_data)
}
inline void IMGroupCreateRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateRsp.attach_data)
}
inline ::std::string* IMGroupCreateRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupCreateRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupDissolveReq

// required uint32 company_id = 1;
inline bool IMGroupDissolveReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupDissolveReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupDissolveReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupDissolveReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupDissolveReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveReq.company_id)
  return company_id_;
}
inline void IMGroupDissolveReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveReq.company_id)
}

// required uint32 group_id = 2;
inline bool IMGroupDissolveReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupDissolveReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupDissolveReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupDissolveReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupDissolveReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveReq.group_id)
  return group_id_;
}
inline void IMGroupDissolveReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveReq.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupDissolveReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupDissolveReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupDissolveReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupDissolveReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupDissolveReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupDissolveReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveReq.group_type)
}

// -------------------------------------------------------------------

// IMGroupDissolveRsp

// required uint32 company_id = 1;
inline bool IMGroupDissolveRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupDissolveRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupDissolveRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupDissolveRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupDissolveRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveRsp.company_id)
  return company_id_;
}
inline void IMGroupDissolveRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveRsp.company_id)
}

// required uint32 group_id = 2;
inline bool IMGroupDissolveRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupDissolveRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupDissolveRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupDissolveRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupDissolveRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveRsp.group_id)
  return group_id_;
}
inline void IMGroupDissolveRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveRsp.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupDissolveRsp::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupDissolveRsp::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupDissolveRsp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupDissolveRsp::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupDissolveRsp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveRsp.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupDissolveRsp::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveRsp.group_type)
}

// required .IM.BaseDefine.OptResultCode result_code = 4;
inline bool IMGroupDissolveRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupDissolveRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupDissolveRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupDissolveRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMGroupDissolveRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDissolveRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMGroupDissolveRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDissolveRsp.result_code)
}

// -------------------------------------------------------------------

// IMGroupOptNotify

// required uint32 opt_type = 1;
inline bool IMGroupOptNotify::has_opt_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupOptNotify::set_has_opt_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupOptNotify::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupOptNotify::clear_opt_type() {
  opt_type_ = 0u;
  clear_has_opt_type();
}
inline ::google::protobuf::uint32 IMGroupOptNotify::opt_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupOptNotify.opt_type)
  return opt_type_;
}
inline void IMGroupOptNotify::set_opt_type(::google::protobuf::uint32 value) {
  set_has_opt_type();
  opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupOptNotify.opt_type)
}

// required .IM.BaseDefine.GroupListItem group_item_info = 2;
inline bool IMGroupOptNotify::has_group_item_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupOptNotify::set_has_group_item_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupOptNotify::clear_has_group_item_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupOptNotify::clear_group_item_info() {
  if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
  clear_has_group_item_info();
}
inline const ::IM::BaseDefine::GroupListItem& IMGroupOptNotify::group_item_info() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupOptNotify.group_item_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance().group_item_info_;
#else
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance_->group_item_info_;
#endif
}
inline ::IM::BaseDefine::GroupListItem* IMGroupOptNotify::mutable_group_item_info() {
  set_has_group_item_info();
  if (group_item_info_ == NULL) group_item_info_ = new ::IM::BaseDefine::GroupListItem;
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupOptNotify.group_item_info)
  return group_item_info_;
}
inline ::IM::BaseDefine::GroupListItem* IMGroupOptNotify::release_group_item_info() {
  clear_has_group_item_info();
  ::IM::BaseDefine::GroupListItem* temp = group_item_info_;
  group_item_info_ = NULL;
  return temp;
}
inline void IMGroupOptNotify::set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info) {
  delete group_item_info_;
  group_item_info_ = group_item_info;
  if (group_item_info) {
    set_has_group_item_info();
  } else {
    clear_has_group_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupOptNotify.group_item_info)
}

// -------------------------------------------------------------------

// IMGroupInfoModifyReq

// required uint32 company_id = 1;
inline bool IMGroupInfoModifyReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoModifyReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoModifyReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.company_id)
  return company_id_;
}
inline void IMGroupInfoModifyReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupInfoModifyReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoModifyReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoModifyReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.user_id)
  return user_id_;
}
inline void IMGroupInfoModifyReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.user_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupInfoModifyReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoModifyReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoModifyReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupInfoModifyReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupInfoModifyReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_type)
}

// required uint32 group_company_id = 4;
inline bool IMGroupInfoModifyReq::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupInfoModifyReq::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupInfoModifyReq::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_company_id)
  return group_company_id_;
}
inline void IMGroupInfoModifyReq::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_company_id)
}

// required uint32 group_id = 5;
inline bool IMGroupInfoModifyReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupInfoModifyReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupInfoModifyReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_id)
  return group_id_;
}
inline void IMGroupInfoModifyReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_id)
}

// required string group_name = 6;
inline bool IMGroupInfoModifyReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupInfoModifyReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupInfoModifyReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupInfoModifyReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_name)
  return *group_name_;
}
inline void IMGroupInfoModifyReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_name)
}
inline void IMGroupInfoModifyReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.group_name)
}
inline void IMGroupInfoModifyReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.group_name)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupInfoModifyReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.group_name)
}

// required string group_avatar = 7;
inline bool IMGroupInfoModifyReq::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupInfoModifyReq::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupInfoModifyReq::clear_group_avatar() {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_->clear();
  }
  clear_has_group_avatar();
}
inline const ::std::string& IMGroupInfoModifyReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_avatar)
  return *group_avatar_;
}
inline void IMGroupInfoModifyReq::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_avatar)
}
inline void IMGroupInfoModifyReq::set_group_avatar(const char* value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.group_avatar)
}
inline void IMGroupInfoModifyReq::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.group_avatar)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_group_avatar() {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.group_avatar)
  return group_avatar_;
}
inline ::std::string* IMGroupInfoModifyReq::release_group_avatar() {
  clear_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_avatar_;
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (group_avatar) {
    set_has_group_avatar();
    group_avatar_ = group_avatar;
  } else {
    clear_has_group_avatar();
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.group_avatar)
}

// optional string topic = 8;
inline bool IMGroupInfoModifyReq::has_topic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_topic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupInfoModifyReq::clear_has_topic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupInfoModifyReq::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& IMGroupInfoModifyReq::topic() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.topic)
  return *topic_;
}
inline void IMGroupInfoModifyReq::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.topic)
}
inline void IMGroupInfoModifyReq::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.topic)
}
inline void IMGroupInfoModifyReq::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.topic)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.topic)
  return topic_;
}
inline ::std::string* IMGroupInfoModifyReq::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.topic)
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoModifyReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupInfoModifyReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupInfoModifyReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoModifyReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoModifyReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.attach_data)
}
inline void IMGroupInfoModifyReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.attach_data)
}
inline void IMGroupInfoModifyReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.attach_data)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoModifyReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoModifyRsp

// required .IM.BaseDefine.OptResultCode result_code = 1;
inline bool IMGroupInfoModifyRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoModifyRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoModifyRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMGroupInfoModifyRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMGroupInfoModifyRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.result_code)
}

// required .IM.BaseDefine.GroupType group_type = 2;
inline bool IMGroupInfoModifyRsp::has_group_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_group_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoModifyRsp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoModifyRsp::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupInfoModifyRsp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupInfoModifyRsp::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.group_type)
}

// required uint32 company_id = 3;
inline bool IMGroupInfoModifyRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoModifyRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoModifyRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.company_id)
  return company_id_;
}
inline void IMGroupInfoModifyRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.company_id)
}

// required uint32 user_id = 4;
inline bool IMGroupInfoModifyRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupInfoModifyRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupInfoModifyRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.user_id)
  return user_id_;
}
inline void IMGroupInfoModifyRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.user_id)
}

// required uint32 group_company_id = 5;
inline bool IMGroupInfoModifyRsp::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupInfoModifyRsp::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupInfoModifyRsp::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyRsp::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.group_company_id)
  return group_company_id_;
}
inline void IMGroupInfoModifyRsp::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.group_company_id)
}

// required uint32 group_id = 6;
inline bool IMGroupInfoModifyRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupInfoModifyRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupInfoModifyRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.group_id)
  return group_id_;
}
inline void IMGroupInfoModifyRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.group_id)
}

// required uint64 update_time = 7;
inline bool IMGroupInfoModifyRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupInfoModifyRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupInfoModifyRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGroupInfoModifyRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.update_time)
  return update_time_;
}
inline void IMGroupInfoModifyRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.update_time)
}

// optional .IM.BaseDefine.GroupInfo group_info = 8;
inline bool IMGroupInfoModifyRsp::has_group_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_group_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupInfoModifyRsp::clear_has_group_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupInfoModifyRsp::clear_group_info() {
  if (group_info_ != NULL) group_info_->::IM::BaseDefine::GroupInfo::Clear();
  clear_has_group_info();
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupInfoModifyRsp::group_info() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.group_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return group_info_ != NULL ? *group_info_ : *default_instance().group_info_;
#else
  return group_info_ != NULL ? *group_info_ : *default_instance_->group_info_;
#endif
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoModifyRsp::mutable_group_info() {
  set_has_group_info();
  if (group_info_ == NULL) group_info_ = new ::IM::BaseDefine::GroupInfo;
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyRsp.group_info)
  return group_info_;
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoModifyRsp::release_group_info() {
  clear_has_group_info();
  ::IM::BaseDefine::GroupInfo* temp = group_info_;
  group_info_ = NULL;
  return temp;
}
inline void IMGroupInfoModifyRsp::set_allocated_group_info(::IM::BaseDefine::GroupInfo* group_info) {
  delete group_info_;
  group_info_ = group_info;
  if (group_info) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyRsp.group_info)
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoModifyRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupInfoModifyRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupInfoModifyRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupInfoModifyRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoModifyRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoModifyRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyRsp.attach_data)
}
inline void IMGroupInfoModifyRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyRsp.attach_data)
}
inline void IMGroupInfoModifyRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyRsp.attach_data)
}
inline ::std::string* IMGroupInfoModifyRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoModifyRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoModifyNotify

// required .IM.BaseDefine.GroupType group_type = 2;
inline bool IMGroupInfoModifyNotify::has_group_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoModifyNotify::set_has_group_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoModifyNotify::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoModifyNotify::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupInfoModifyNotify::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyNotify.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupInfoModifyNotify::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyNotify.group_type)
}

// required uint32 company_id = 3;
inline bool IMGroupInfoModifyNotify::has_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoModifyNotify::set_has_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoModifyNotify::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoModifyNotify::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyNotify::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyNotify.company_id)
  return company_id_;
}
inline void IMGroupInfoModifyNotify::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyNotify.company_id)
}

// required uint32 group_id = 4;
inline bool IMGroupInfoModifyNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoModifyNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoModifyNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoModifyNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyNotify.group_id)
  return group_id_;
}
inline void IMGroupInfoModifyNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyNotify.group_id)
}

// required uint64 update_time = 5;
inline bool IMGroupInfoModifyNotify::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupInfoModifyNotify::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupInfoModifyNotify::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupInfoModifyNotify::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGroupInfoModifyNotify::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyNotify.update_time)
  return update_time_;
}
inline void IMGroupInfoModifyNotify::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyNotify.update_time)
}

// required .IM.BaseDefine.GroupInfo group_info = 6;
inline bool IMGroupInfoModifyNotify::has_group_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupInfoModifyNotify::set_has_group_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupInfoModifyNotify::clear_has_group_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupInfoModifyNotify::clear_group_info() {
  if (group_info_ != NULL) group_info_->::IM::BaseDefine::GroupInfo::Clear();
  clear_has_group_info();
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupInfoModifyNotify::group_info() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyNotify.group_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return group_info_ != NULL ? *group_info_ : *default_instance().group_info_;
#else
  return group_info_ != NULL ? *group_info_ : *default_instance_->group_info_;
#endif
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoModifyNotify::mutable_group_info() {
  set_has_group_info();
  if (group_info_ == NULL) group_info_ = new ::IM::BaseDefine::GroupInfo;
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyNotify.group_info)
  return group_info_;
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoModifyNotify::release_group_info() {
  clear_has_group_info();
  ::IM::BaseDefine::GroupInfo* temp = group_info_;
  group_info_ = NULL;
  return temp;
}
inline void IMGroupInfoModifyNotify::set_allocated_group_info(::IM::BaseDefine::GroupInfo* group_info) {
  delete group_info_;
  group_info_ = group_info;
  if (group_info) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyNotify.group_info)
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoModifyNotify::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupInfoModifyNotify::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupInfoModifyNotify::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupInfoModifyNotify::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoModifyNotify::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyNotify.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoModifyNotify::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyNotify.attach_data)
}
inline void IMGroupInfoModifyNotify::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyNotify.attach_data)
}
inline void IMGroupInfoModifyNotify::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyNotify.attach_data)
}
inline ::std::string* IMGroupInfoModifyNotify::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyNotify.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoModifyNotify::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyNotify::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyNotify.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberReq

// required uint32 company_id = 1;
inline bool IMGroupChangeMemberReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupChangeMemberReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupChangeMemberReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.company_id)
  return company_id_;
}
inline void IMGroupChangeMemberReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupChangeMemberReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupChangeMemberReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupChangeMemberReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.user_id)
  return user_id_;
}
inline void IMGroupChangeMemberReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.user_id)
}

// required .IM.BaseDefine.GroupMemberOptType change_type = 3;
inline bool IMGroupChangeMemberReq::has_change_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_change_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupChangeMemberReq::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupChangeMemberReq::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::IM::BaseDefine::GroupMemberOptType IMGroupChangeMemberReq::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.change_type)
  return static_cast< ::IM::BaseDefine::GroupMemberOptType >(change_type_);
}
inline void IMGroupChangeMemberReq::set_change_type(::IM::BaseDefine::GroupMemberOptType value) {
  assert(::IM::BaseDefine::GroupMemberOptType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.change_type)
}

// required .IM.BaseDefine.GroupListItem group_item_info = 4;
inline bool IMGroupChangeMemberReq::has_group_item_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_group_item_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupChangeMemberReq::clear_has_group_item_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupChangeMemberReq::clear_group_item_info() {
  if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
  clear_has_group_item_info();
}
inline const ::IM::BaseDefine::GroupListItem& IMGroupChangeMemberReq::group_item_info() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.group_item_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance().group_item_info_;
#else
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance_->group_item_info_;
#endif
}
inline ::IM::BaseDefine::GroupListItem* IMGroupChangeMemberReq::mutable_group_item_info() {
  set_has_group_item_info();
  if (group_item_info_ == NULL) group_item_info_ = new ::IM::BaseDefine::GroupListItem;
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberReq.group_item_info)
  return group_item_info_;
}
inline ::IM::BaseDefine::GroupListItem* IMGroupChangeMemberReq::release_group_item_info() {
  clear_has_group_item_info();
  ::IM::BaseDefine::GroupListItem* temp = group_item_info_;
  group_item_info_ = NULL;
  return temp;
}
inline void IMGroupChangeMemberReq::set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info) {
  delete group_item_info_;
  group_item_info_ = group_item_info;
  if (group_item_info) {
    set_has_group_item_info();
  } else {
    clear_has_group_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberReq.group_item_info)
}

// repeated .IM.BaseDefine.UserIdItem member_id_list = 5;
inline int IMGroupChangeMemberReq::member_id_list_size() const {
  return member_id_list_.size();
}
inline void IMGroupChangeMemberReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& IMGroupChangeMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupChangeMemberReq::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupChangeMemberReq::add_member_id_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
IMGroupChangeMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
IMGroupChangeMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return &member_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupChangeMemberReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupChangeMemberReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupChangeMemberReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupChangeMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.attach_data)
  return *attach_data_;
}
inline void IMGroupChangeMemberReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline void IMGroupChangeMemberReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline void IMGroupChangeMemberReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline ::std::string* IMGroupChangeMemberReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupChangeMemberReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupChangeMemberReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberRsp

// required uint32 user_id = 1;
inline bool IMGroupChangeMemberRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupChangeMemberRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupChangeMemberRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.user_id)
  return user_id_;
}
inline void IMGroupChangeMemberRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.user_id)
}

// required .IM.BaseDefine.GroupMemberOptType change_type = 2;
inline bool IMGroupChangeMemberRsp::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupChangeMemberRsp::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupChangeMemberRsp::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::IM::BaseDefine::GroupMemberOptType IMGroupChangeMemberRsp::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.change_type)
  return static_cast< ::IM::BaseDefine::GroupMemberOptType >(change_type_);
}
inline void IMGroupChangeMemberRsp::set_change_type(::IM::BaseDefine::GroupMemberOptType value) {
  assert(::IM::BaseDefine::GroupMemberOptType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.change_type)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMGroupChangeMemberRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupChangeMemberRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupChangeMemberRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMGroupChangeMemberRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMGroupChangeMemberRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.result_code)
}

// required .IM.BaseDefine.GroupListItem group_item_info = 4;
inline bool IMGroupChangeMemberRsp::has_group_item_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_group_item_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupChangeMemberRsp::clear_has_group_item_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupChangeMemberRsp::clear_group_item_info() {
  if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
  clear_has_group_item_info();
}
inline const ::IM::BaseDefine::GroupListItem& IMGroupChangeMemberRsp::group_item_info() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.group_item_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance().group_item_info_;
#else
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance_->group_item_info_;
#endif
}
inline ::IM::BaseDefine::GroupListItem* IMGroupChangeMemberRsp::mutable_group_item_info() {
  set_has_group_item_info();
  if (group_item_info_ == NULL) group_item_info_ = new ::IM::BaseDefine::GroupListItem;
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberRsp.group_item_info)
  return group_item_info_;
}
inline ::IM::BaseDefine::GroupListItem* IMGroupChangeMemberRsp::release_group_item_info() {
  clear_has_group_item_info();
  ::IM::BaseDefine::GroupListItem* temp = group_item_info_;
  group_item_info_ = NULL;
  return temp;
}
inline void IMGroupChangeMemberRsp::set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info) {
  delete group_item_info_;
  group_item_info_ = group_item_info;
  if (group_item_info) {
    set_has_group_item_info();
  } else {
    clear_has_group_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberRsp.group_item_info)
}

// repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 5;
inline int IMGroupChangeMemberRsp::chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
inline void IMGroupChangeMemberRsp::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& IMGroupChangeMemberRsp::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupChangeMemberRsp::mutable_chg_user_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupChangeMemberRsp::add_chg_user_id_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
IMGroupChangeMemberRsp::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
IMGroupChangeMemberRsp::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return &chg_user_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupChangeMemberRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupChangeMemberRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupChangeMemberRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupChangeMemberRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupChangeMemberRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline void IMGroupChangeMemberRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline void IMGroupChangeMemberRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline ::std::string* IMGroupChangeMemberRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupChangeMemberRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupChangeMemberRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberNotify

// required .IM.BaseDefine.GroupMemberOptType change_type = 1;
inline bool IMGroupChangeMemberNotify::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupChangeMemberNotify::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupChangeMemberNotify::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupChangeMemberNotify::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::IM::BaseDefine::GroupMemberOptType IMGroupChangeMemberNotify::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.change_type)
  return static_cast< ::IM::BaseDefine::GroupMemberOptType >(change_type_);
}
inline void IMGroupChangeMemberNotify::set_change_type(::IM::BaseDefine::GroupMemberOptType value) {
  assert(::IM::BaseDefine::GroupMemberOptType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.change_type)
}

// required .IM.BaseDefine.GroupListItem group_item_info = 2;
inline bool IMGroupChangeMemberNotify::has_group_item_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupChangeMemberNotify::set_has_group_item_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupChangeMemberNotify::clear_has_group_item_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupChangeMemberNotify::clear_group_item_info() {
  if (group_item_info_ != NULL) group_item_info_->::IM::BaseDefine::GroupListItem::Clear();
  clear_has_group_item_info();
}
inline const ::IM::BaseDefine::GroupListItem& IMGroupChangeMemberNotify::group_item_info() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.group_item_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance().group_item_info_;
#else
  return group_item_info_ != NULL ? *group_item_info_ : *default_instance_->group_item_info_;
#endif
}
inline ::IM::BaseDefine::GroupListItem* IMGroupChangeMemberNotify::mutable_group_item_info() {
  set_has_group_item_info();
  if (group_item_info_ == NULL) group_item_info_ = new ::IM::BaseDefine::GroupListItem;
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberNotify.group_item_info)
  return group_item_info_;
}
inline ::IM::BaseDefine::GroupListItem* IMGroupChangeMemberNotify::release_group_item_info() {
  clear_has_group_item_info();
  ::IM::BaseDefine::GroupListItem* temp = group_item_info_;
  group_item_info_ = NULL;
  return temp;
}
inline void IMGroupChangeMemberNotify::set_allocated_group_item_info(::IM::BaseDefine::GroupListItem* group_item_info) {
  delete group_item_info_;
  group_item_info_ = group_item_info;
  if (group_item_info) {
    set_has_group_item_info();
  } else {
    clear_has_group_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberNotify.group_item_info)
}

// repeated .IM.BaseDefine.UserIdItem chg_user_id_list = 3;
inline int IMGroupChangeMemberNotify::chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
inline void IMGroupChangeMemberNotify::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& IMGroupChangeMemberNotify::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupChangeMemberNotify::mutable_chg_user_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* IMGroupChangeMemberNotify::add_chg_user_id_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
IMGroupChangeMemberNotify::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
IMGroupChangeMemberNotify::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return &chg_user_id_list_;
}

// -------------------------------------------------------------------

// IMGroupSetOwnerReq

// required uint32 group_company_id = 1;
inline bool IMGroupSetOwnerReq::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetOwnerReq::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetOwnerReq::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerReq::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.group_company_id)
  return group_company_id_;
}
inline void IMGroupSetOwnerReq::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.group_company_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetOwnerReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetOwnerReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetOwnerReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.group_id)
  return group_id_;
}
inline void IMGroupSetOwnerReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupSetOwnerReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetOwnerReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetOwnerReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupSetOwnerReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupSetOwnerReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.group_type)
}

// required uint32 from_company_id = 4;
inline bool IMGroupSetOwnerReq::has_from_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_from_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetOwnerReq::clear_has_from_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetOwnerReq::clear_from_company_id() {
  from_company_id_ = 0u;
  clear_has_from_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerReq::from_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.from_company_id)
  return from_company_id_;
}
inline void IMGroupSetOwnerReq::set_from_company_id(::google::protobuf::uint32 value) {
  set_has_from_company_id();
  from_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.from_company_id)
}

// required uint32 from_user_id = 5;
inline bool IMGroupSetOwnerReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetOwnerReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetOwnerReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.from_user_id)
  return from_user_id_;
}
inline void IMGroupSetOwnerReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.from_user_id)
}

// required uint32 to_company_id = 6;
inline bool IMGroupSetOwnerReq::has_to_company_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_to_company_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetOwnerReq::clear_has_to_company_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetOwnerReq::clear_to_company_id() {
  to_company_id_ = 0u;
  clear_has_to_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerReq::to_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.to_company_id)
  return to_company_id_;
}
inline void IMGroupSetOwnerReq::set_to_company_id(::google::protobuf::uint32 value) {
  set_has_to_company_id();
  to_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.to_company_id)
}

// required uint32 to_user_id = 7;
inline bool IMGroupSetOwnerReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupSetOwnerReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupSetOwnerReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupSetOwnerReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerReq.to_user_id)
  return to_user_id_;
}
inline void IMGroupSetOwnerReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerReq.to_user_id)
}

// -------------------------------------------------------------------

// IMGroupSetOwnerRsp

// required uint32 group_company_id = 1;
inline bool IMGroupSetOwnerRsp::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetOwnerRsp::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetOwnerRsp::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerRsp::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.group_company_id)
  return group_company_id_;
}
inline void IMGroupSetOwnerRsp::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.group_company_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetOwnerRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetOwnerRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetOwnerRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.group_id)
  return group_id_;
}
inline void IMGroupSetOwnerRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupSetOwnerRsp::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetOwnerRsp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetOwnerRsp::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupSetOwnerRsp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupSetOwnerRsp::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.group_type)
}

// required uint32 from_company_id = 4;
inline bool IMGroupSetOwnerRsp::has_from_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_from_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetOwnerRsp::clear_has_from_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetOwnerRsp::clear_from_company_id() {
  from_company_id_ = 0u;
  clear_has_from_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerRsp::from_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.from_company_id)
  return from_company_id_;
}
inline void IMGroupSetOwnerRsp::set_from_company_id(::google::protobuf::uint32 value) {
  set_has_from_company_id();
  from_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.from_company_id)
}

// required uint32 from_user_id = 5;
inline bool IMGroupSetOwnerRsp::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetOwnerRsp::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetOwnerRsp::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.from_user_id)
  return from_user_id_;
}
inline void IMGroupSetOwnerRsp::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.from_user_id)
}

// required uint32 to_company_id = 6;
inline bool IMGroupSetOwnerRsp::has_to_company_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_to_company_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetOwnerRsp::clear_has_to_company_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetOwnerRsp::clear_to_company_id() {
  to_company_id_ = 0u;
  clear_has_to_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerRsp::to_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.to_company_id)
  return to_company_id_;
}
inline void IMGroupSetOwnerRsp::set_to_company_id(::google::protobuf::uint32 value) {
  set_has_to_company_id();
  to_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.to_company_id)
}

// required uint32 to_user_id = 7;
inline bool IMGroupSetOwnerRsp::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupSetOwnerRsp::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupSetOwnerRsp::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.to_user_id)
  return to_user_id_;
}
inline void IMGroupSetOwnerRsp::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.to_user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 8;
inline bool IMGroupSetOwnerRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupSetOwnerRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupSetOwnerRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupSetOwnerRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMGroupSetOwnerRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMGroupSetOwnerRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerRsp.result_code)
}

// -------------------------------------------------------------------

// IMGroupSetOwnerNotify

// required uint32 group_company_id = 1;
inline bool IMGroupSetOwnerNotify::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetOwnerNotify::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetOwnerNotify::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerNotify::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.group_company_id)
  return group_company_id_;
}
inline void IMGroupSetOwnerNotify::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.group_company_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetOwnerNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetOwnerNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetOwnerNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.group_id)
  return group_id_;
}
inline void IMGroupSetOwnerNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 3;
inline bool IMGroupSetOwnerNotify::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetOwnerNotify::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetOwnerNotify::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupSetOwnerNotify::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupSetOwnerNotify::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.group_type)
}

// required uint32 from_company_id = 4;
inline bool IMGroupSetOwnerNotify::has_from_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_from_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetOwnerNotify::clear_has_from_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetOwnerNotify::clear_from_company_id() {
  from_company_id_ = 0u;
  clear_has_from_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerNotify::from_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.from_company_id)
  return from_company_id_;
}
inline void IMGroupSetOwnerNotify::set_from_company_id(::google::protobuf::uint32 value) {
  set_has_from_company_id();
  from_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.from_company_id)
}

// required uint32 from_user_id = 5;
inline bool IMGroupSetOwnerNotify::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetOwnerNotify::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetOwnerNotify::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerNotify::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.from_user_id)
  return from_user_id_;
}
inline void IMGroupSetOwnerNotify::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.from_user_id)
}

// required uint32 to_company_id = 6;
inline bool IMGroupSetOwnerNotify::has_to_company_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_to_company_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetOwnerNotify::clear_has_to_company_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetOwnerNotify::clear_to_company_id() {
  to_company_id_ = 0u;
  clear_has_to_company_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerNotify::to_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.to_company_id)
  return to_company_id_;
}
inline void IMGroupSetOwnerNotify::set_to_company_id(::google::protobuf::uint32 value) {
  set_has_to_company_id();
  to_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.to_company_id)
}

// required uint32 to_user_id = 7;
inline bool IMGroupSetOwnerNotify::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupSetOwnerNotify::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupSetOwnerNotify::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupSetOwnerNotify::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMGroupSetOwnerNotify::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetOwnerNotify.to_user_id)
  return to_user_id_;
}
inline void IMGroupSetOwnerNotify::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetOwnerNotify.to_user_id)
}

// -------------------------------------------------------------------

// IMGroupDisturbOptReq

// required uint32 company_id = 1;
inline bool IMGroupDisturbOptReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupDisturbOptReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupDisturbOptReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupDisturbOptReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptReq.company_id)
  return company_id_;
}
inline void IMGroupDisturbOptReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupDisturbOptReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupDisturbOptReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupDisturbOptReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupDisturbOptReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptReq.user_id)
  return user_id_;
}
inline void IMGroupDisturbOptReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptReq.user_id)
}

// required uint32 group_company_id = 3;
inline bool IMGroupDisturbOptReq::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupDisturbOptReq::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupDisturbOptReq::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupDisturbOptReq::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptReq::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptReq.group_company_id)
  return group_company_id_;
}
inline void IMGroupDisturbOptReq::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptReq.group_company_id)
}

// required uint32 group_id = 4;
inline bool IMGroupDisturbOptReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupDisturbOptReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupDisturbOptReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupDisturbOptReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptReq.group_id)
  return group_id_;
}
inline void IMGroupDisturbOptReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptReq.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool IMGroupDisturbOptReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupDisturbOptReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupDisturbOptReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupDisturbOptReq::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupDisturbOptReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupDisturbOptReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptReq.group_type)
}

// required uint32 not_disturb = 6;
inline bool IMGroupDisturbOptReq::has_not_disturb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupDisturbOptReq::set_has_not_disturb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupDisturbOptReq::clear_has_not_disturb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupDisturbOptReq::clear_not_disturb() {
  not_disturb_ = 0u;
  clear_has_not_disturb();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptReq::not_disturb() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptReq.not_disturb)
  return not_disturb_;
}
inline void IMGroupDisturbOptReq::set_not_disturb(::google::protobuf::uint32 value) {
  set_has_not_disturb();
  not_disturb_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptReq.not_disturb)
}

// -------------------------------------------------------------------

// IMGroupDisturbOptRsp

// required uint32 company_id = 1;
inline bool IMGroupDisturbOptRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupDisturbOptRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupDisturbOptRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.company_id)
  return company_id_;
}
inline void IMGroupDisturbOptRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMGroupDisturbOptRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupDisturbOptRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupDisturbOptRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.user_id)
  return user_id_;
}
inline void IMGroupDisturbOptRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.user_id)
}

// required uint32 group_company_id = 3;
inline bool IMGroupDisturbOptRsp::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupDisturbOptRsp::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupDisturbOptRsp::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptRsp::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.group_company_id)
  return group_company_id_;
}
inline void IMGroupDisturbOptRsp::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.group_company_id)
}

// required uint32 group_id = 4;
inline bool IMGroupDisturbOptRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupDisturbOptRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupDisturbOptRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.group_id)
  return group_id_;
}
inline void IMGroupDisturbOptRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool IMGroupDisturbOptRsp::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupDisturbOptRsp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupDisturbOptRsp::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupDisturbOptRsp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupDisturbOptRsp::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.group_type)
}

// required uint32 not_disturb = 6;
inline bool IMGroupDisturbOptRsp::has_not_disturb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_not_disturb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupDisturbOptRsp::clear_has_not_disturb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupDisturbOptRsp::clear_not_disturb() {
  not_disturb_ = 0u;
  clear_has_not_disturb();
}
inline ::google::protobuf::uint32 IMGroupDisturbOptRsp::not_disturb() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.not_disturb)
  return not_disturb_;
}
inline void IMGroupDisturbOptRsp::set_not_disturb(::google::protobuf::uint32 value) {
  set_has_not_disturb();
  not_disturb_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.not_disturb)
}

// required .IM.BaseDefine.OptResultCode result_code = 7;
inline bool IMGroupDisturbOptRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupDisturbOptRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupDisturbOptRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupDisturbOptRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMGroupDisturbOptRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDisturbOptRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMGroupDisturbOptRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDisturbOptRsp.result_code)
}

// -------------------------------------------------------------------

// IMUsersStat_Group_Subs_Req

// required uint32 company_id = 1;
inline bool IMUsersStat_Group_Subs_Req::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_Group_Subs_Req::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_Group_Subs_Req::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_Group_Subs_Req::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_Subs_Req::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_Subs_Req.company_id)
  return company_id_;
}
inline void IMUsersStat_Group_Subs_Req::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_Subs_Req.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_Group_Subs_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_Group_Subs_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_Group_Subs_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_Group_Subs_Req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_Subs_Req::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_Subs_Req.user_id)
  return user_id_;
}
inline void IMUsersStat_Group_Subs_Req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_Subs_Req.user_id)
}

// required uint32 group_company_id = 3;
inline bool IMUsersStat_Group_Subs_Req::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_Group_Subs_Req::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_Group_Subs_Req::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_Group_Subs_Req::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_Subs_Req::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_Subs_Req.group_company_id)
  return group_company_id_;
}
inline void IMUsersStat_Group_Subs_Req::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_Subs_Req.group_company_id)
}

// required uint32 group_id = 4;
inline bool IMUsersStat_Group_Subs_Req::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUsersStat_Group_Subs_Req::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUsersStat_Group_Subs_Req::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUsersStat_Group_Subs_Req::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_Subs_Req::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_Subs_Req.group_id)
  return group_id_;
}
inline void IMUsersStat_Group_Subs_Req::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_Subs_Req.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool IMUsersStat_Group_Subs_Req::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUsersStat_Group_Subs_Req::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUsersStat_Group_Subs_Req::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUsersStat_Group_Subs_Req::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMUsersStat_Group_Subs_Req::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_Subs_Req.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMUsersStat_Group_Subs_Req::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_Subs_Req.group_type)
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_Group_Subs_Req::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUsersStat_Group_Subs_Req::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUsersStat_Group_Subs_Req::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUsersStat_Group_Subs_Req::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_Group_Subs_Req::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_Subs_Req.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_Group_Subs_Req::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_Subs_Req.attach_data)
}
inline void IMUsersStat_Group_Subs_Req::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_Group_Subs_Req.attach_data)
}
inline void IMUsersStat_Group_Subs_Req::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_Group_Subs_Req.attach_data)
}
inline ::std::string* IMUsersStat_Group_Subs_Req::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_Group_Subs_Req.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_Group_Subs_Req::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_Group_Subs_Req::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_Group_Subs_Req.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStat_Group_UnSubs_Req

// required uint32 company_id = 1;
inline bool IMUsersStat_Group_UnSubs_Req::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_Group_UnSubs_Req::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_UnSubs_Req::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_UnSubs_Req.company_id)
  return company_id_;
}
inline void IMUsersStat_Group_UnSubs_Req::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_UnSubs_Req.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_Group_UnSubs_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_Group_UnSubs_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_UnSubs_Req::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_UnSubs_Req.user_id)
  return user_id_;
}
inline void IMUsersStat_Group_UnSubs_Req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_UnSubs_Req.user_id)
}

// required uint32 group_company_id = 3;
inline bool IMUsersStat_Group_UnSubs_Req::has_group_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_Group_UnSubs_Req::set_has_group_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_has_group_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_group_company_id() {
  group_company_id_ = 0u;
  clear_has_group_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_UnSubs_Req::group_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_UnSubs_Req.group_company_id)
  return group_company_id_;
}
inline void IMUsersStat_Group_UnSubs_Req::set_group_company_id(::google::protobuf::uint32 value) {
  set_has_group_company_id();
  group_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_UnSubs_Req.group_company_id)
}

// required uint32 group_id = 4;
inline bool IMUsersStat_Group_UnSubs_Req::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUsersStat_Group_UnSubs_Req::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Group_UnSubs_Req::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_UnSubs_Req.group_id)
  return group_id_;
}
inline void IMUsersStat_Group_UnSubs_Req::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_UnSubs_Req.group_id)
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool IMUsersStat_Group_UnSubs_Req::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUsersStat_Group_UnSubs_Req::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMUsersStat_Group_UnSubs_Req::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_UnSubs_Req.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMUsersStat_Group_UnSubs_Req::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_UnSubs_Req.group_type)
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_Group_UnSubs_Req::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUsersStat_Group_UnSubs_Req::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUsersStat_Group_UnSubs_Req::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_Group_UnSubs_Req::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Group_UnSubs_Req.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_Group_UnSubs_Req::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Group_UnSubs_Req.attach_data)
}
inline void IMUsersStat_Group_UnSubs_Req::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_Group_UnSubs_Req.attach_data)
}
inline void IMUsersStat_Group_UnSubs_Req::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_Group_UnSubs_Req.attach_data)
}
inline ::std::string* IMUsersStat_Group_UnSubs_Req::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_Group_UnSubs_Req.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_Group_UnSubs_Req::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_Group_UnSubs_Req::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_Group_UnSubs_Req.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStat_OrgNode_Subs_Req

// required uint32 company_id = 1;
inline bool IMUsersStat_OrgNode_Subs_Req::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgNode_Subs_Req::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_Subs_Req.company_id)
  return company_id_;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_Subs_Req.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_OrgNode_Subs_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgNode_Subs_Req::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_Subs_Req.user_id)
  return user_id_;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_Subs_Req.user_id)
}

// required uint32 group_id = 3;
inline bool IMUsersStat_OrgNode_Subs_Req::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgNode_Subs_Req::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_Subs_Req.group_id)
  return group_id_;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_Subs_Req.group_id)
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_OrgNode_Subs_Req::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUsersStat_OrgNode_Subs_Req::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_OrgNode_Subs_Req::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_Subs_Req.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_OrgNode_Subs_Req::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_Subs_Req.attach_data)
}
inline void IMUsersStat_OrgNode_Subs_Req::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_OrgNode_Subs_Req.attach_data)
}
inline void IMUsersStat_OrgNode_Subs_Req::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_OrgNode_Subs_Req.attach_data)
}
inline ::std::string* IMUsersStat_OrgNode_Subs_Req::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_OrgNode_Subs_Req.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_OrgNode_Subs_Req::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_OrgNode_Subs_Req::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_OrgNode_Subs_Req.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStat_OrgNode_UnSubs_Req

// required uint32 company_id = 1;
inline bool IMUsersStat_OrgNode_UnSubs_Req::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgNode_UnSubs_Req::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.company_id)
  return company_id_;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_OrgNode_UnSubs_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgNode_UnSubs_Req::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.user_id)
  return user_id_;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.user_id)
}

// required uint32 group_id = 3;
inline bool IMUsersStat_OrgNode_UnSubs_Req::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgNode_UnSubs_Req::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.group_id)
  return group_id_;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.group_id)
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_OrgNode_UnSubs_Req::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_OrgNode_UnSubs_Req::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.attach_data)
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.attach_data)
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.attach_data)
}
inline ::std::string* IMUsersStat_OrgNode_UnSubs_Req::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_OrgNode_UnSubs_Req::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_OrgNode_UnSubs_Req::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_OrgNode_UnSubs_Req.attach_data)
}

// -------------------------------------------------------------------

// TerminalState

// required .IM.BaseDefine.ClientType type = 1;
inline bool TerminalState::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TerminalState::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TerminalState::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TerminalState::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::IM::BaseDefine::ClientType TerminalState::type() const {
  // @@protoc_insertion_point(field_get:IM.Group.TerminalState.type)
  return static_cast< ::IM::BaseDefine::ClientType >(type_);
}
inline void TerminalState::set_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.TerminalState.type)
}

// required .IM.BaseDefine.UserStatType state = 2;
inline bool TerminalState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TerminalState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TerminalState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TerminalState::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::IM::BaseDefine::UserStatType TerminalState::state() const {
  // @@protoc_insertion_point(field_get:IM.Group.TerminalState.state)
  return static_cast< ::IM::BaseDefine::UserStatType >(state_);
}
inline void TerminalState::set_state(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.TerminalState.state)
}

// -------------------------------------------------------------------

// IMUsersStat_Changed_User

// required uint32 company_id = 1;
inline bool IMUsersStat_Changed_User::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_Changed_User::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_Changed_User::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_Changed_User::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Changed_User::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Changed_User.company_id)
  return company_id_;
}
inline void IMUsersStat_Changed_User::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Changed_User.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_Changed_User::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_Changed_User::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_Changed_User::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_Changed_User::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_Changed_User::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Changed_User.user_id)
  return user_id_;
}
inline void IMUsersStat_Changed_User::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Changed_User.user_id)
}

// repeated .IM.Group.TerminalState terminal_state_list = 3;
inline int IMUsersStat_Changed_User::terminal_state_list_size() const {
  return terminal_state_list_.size();
}
inline void IMUsersStat_Changed_User::clear_terminal_state_list() {
  terminal_state_list_.Clear();
}
inline const ::IM::Group::TerminalState& IMUsersStat_Changed_User::terminal_state_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Changed_User.terminal_state_list)
  return terminal_state_list_.Get(index);
}
inline ::IM::Group::TerminalState* IMUsersStat_Changed_User::mutable_terminal_state_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_Changed_User.terminal_state_list)
  return terminal_state_list_.Mutable(index);
}
inline ::IM::Group::TerminalState* IMUsersStat_Changed_User::add_terminal_state_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMUsersStat_Changed_User.terminal_state_list)
  return terminal_state_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Group::TerminalState >&
IMUsersStat_Changed_User::terminal_state_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMUsersStat_Changed_User.terminal_state_list)
  return terminal_state_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Group::TerminalState >*
IMUsersStat_Changed_User::mutable_terminal_state_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMUsersStat_Changed_User.terminal_state_list)
  return &terminal_state_list_;
}

// -------------------------------------------------------------------

// IMUsersStat_Changed_User_Notify

// repeated .IM.Group.IMUsersStat_Changed_User user_list = 1;
inline int IMUsersStat_Changed_User_Notify::user_list_size() const {
  return user_list_.size();
}
inline void IMUsersStat_Changed_User_Notify::clear_user_list() {
  user_list_.Clear();
}
inline const ::IM::Group::IMUsersStat_Changed_User& IMUsersStat_Changed_User_Notify::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Changed_User_Notify.user_list)
  return user_list_.Get(index);
}
inline ::IM::Group::IMUsersStat_Changed_User* IMUsersStat_Changed_User_Notify::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_Changed_User_Notify.user_list)
  return user_list_.Mutable(index);
}
inline ::IM::Group::IMUsersStat_Changed_User* IMUsersStat_Changed_User_Notify::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMUsersStat_Changed_User_Notify.user_list)
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Group::IMUsersStat_Changed_User >&
IMUsersStat_Changed_User_Notify::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMUsersStat_Changed_User_Notify.user_list)
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Group::IMUsersStat_Changed_User >*
IMUsersStat_Changed_User_Notify::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMUsersStat_Changed_User_Notify.user_list)
  return &user_list_;
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_Changed_User_Notify::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_Changed_User_Notify::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_Changed_User_Notify::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_Changed_User_Notify::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_Changed_User_Notify::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_Changed_User_Notify.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_Changed_User_Notify::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_Changed_User_Notify.attach_data)
}
inline void IMUsersStat_Changed_User_Notify::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_Changed_User_Notify.attach_data)
}
inline void IMUsersStat_Changed_User_Notify::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_Changed_User_Notify.attach_data)
}
inline ::std::string* IMUsersStat_Changed_User_Notify::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_Changed_User_Notify.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_Changed_User_Notify::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_Changed_User_Notify::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_Changed_User_Notify.attach_data)
}

// -------------------------------------------------------------------

// OrgNode_Online

// required uint32 group_id = 1;
inline bool OrgNode_Online::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrgNode_Online::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrgNode_Online::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrgNode_Online::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 OrgNode_Online::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.OrgNode_Online.group_id)
  return group_id_;
}
inline void OrgNode_Online::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.OrgNode_Online.group_id)
}

// required uint32 onlines = 2;
inline bool OrgNode_Online::has_onlines() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrgNode_Online::set_has_onlines() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrgNode_Online::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrgNode_Online::clear_onlines() {
  onlines_ = 0u;
  clear_has_onlines();
}
inline ::google::protobuf::uint32 OrgNode_Online::onlines() const {
  // @@protoc_insertion_point(field_get:IM.Group.OrgNode_Online.onlines)
  return onlines_;
}
inline void OrgNode_Online::set_onlines(::google::protobuf::uint32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.OrgNode_Online.onlines)
}

// -------------------------------------------------------------------

// IMUsersStat_OrgTree_Subs_Req

// required uint32 company_id = 1;
inline bool IMUsersStat_OrgTree_Subs_Req::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_OrgTree_Subs_Req::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_OrgTree_Subs_Req::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_OrgTree_Subs_Req::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgTree_Subs_Req::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_Subs_Req.company_id)
  return company_id_;
}
inline void IMUsersStat_OrgTree_Subs_Req::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_Subs_Req.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_OrgTree_Subs_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_OrgTree_Subs_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_OrgTree_Subs_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_OrgTree_Subs_Req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgTree_Subs_Req::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_Subs_Req.user_id)
  return user_id_;
}
inline void IMUsersStat_OrgTree_Subs_Req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_Subs_Req.user_id)
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_OrgTree_Subs_Req::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_OrgTree_Subs_Req::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_OrgTree_Subs_Req::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_OrgTree_Subs_Req::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_OrgTree_Subs_Req::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_Subs_Req.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_OrgTree_Subs_Req::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_Subs_Req.attach_data)
}
inline void IMUsersStat_OrgTree_Subs_Req::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_OrgTree_Subs_Req.attach_data)
}
inline void IMUsersStat_OrgTree_Subs_Req::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_OrgTree_Subs_Req.attach_data)
}
inline ::std::string* IMUsersStat_OrgTree_Subs_Req::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_OrgTree_Subs_Req.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_OrgTree_Subs_Req::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_OrgTree_Subs_Req::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_OrgTree_Subs_Req.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStat_OrgTree_UnSubs_Req

// required uint32 company_id = 1;
inline bool IMUsersStat_OrgTree_UnSubs_Req::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgTree_UnSubs_Req::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.company_id)
  return company_id_;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.company_id)
}

// required uint32 user_id = 2;
inline bool IMUsersStat_OrgTree_UnSubs_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgTree_UnSubs_Req::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.user_id)
  return user_id_;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.user_id)
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_OrgTree_UnSubs_Req::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_OrgTree_UnSubs_Req::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.attach_data)
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.attach_data)
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.attach_data)
}
inline ::std::string* IMUsersStat_OrgTree_UnSubs_Req::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_OrgTree_UnSubs_Req::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_OrgTree_UnSubs_Req::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_OrgTree_UnSubs_Req.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStat_OrgTree_Notify

// required uint32 company_id = 1;
inline bool IMUsersStat_OrgTree_Notify::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStat_OrgTree_Notify::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStat_OrgTree_Notify::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStat_OrgTree_Notify::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUsersStat_OrgTree_Notify::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_Notify.company_id)
  return company_id_;
}
inline void IMUsersStat_OrgTree_Notify::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_Notify.company_id)
}

// repeated .IM.Group.OrgNode_Online org_node_list = 2;
inline int IMUsersStat_OrgTree_Notify::org_node_list_size() const {
  return org_node_list_.size();
}
inline void IMUsersStat_OrgTree_Notify::clear_org_node_list() {
  org_node_list_.Clear();
}
inline const ::IM::Group::OrgNode_Online& IMUsersStat_OrgTree_Notify::org_node_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_Notify.org_node_list)
  return org_node_list_.Get(index);
}
inline ::IM::Group::OrgNode_Online* IMUsersStat_OrgTree_Notify::mutable_org_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_OrgTree_Notify.org_node_list)
  return org_node_list_.Mutable(index);
}
inline ::IM::Group::OrgNode_Online* IMUsersStat_OrgTree_Notify::add_org_node_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMUsersStat_OrgTree_Notify.org_node_list)
  return org_node_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Group::OrgNode_Online >&
IMUsersStat_OrgTree_Notify::org_node_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMUsersStat_OrgTree_Notify.org_node_list)
  return org_node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Group::OrgNode_Online >*
IMUsersStat_OrgTree_Notify::mutable_org_node_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMUsersStat_OrgTree_Notify.org_node_list)
  return &org_node_list_;
}

// optional bytes attach_data = 20;
inline bool IMUsersStat_OrgTree_Notify::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStat_OrgTree_Notify::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStat_OrgTree_Notify::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStat_OrgTree_Notify::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStat_OrgTree_Notify::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMUsersStat_OrgTree_Notify.attach_data)
  return *attach_data_;
}
inline void IMUsersStat_OrgTree_Notify::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMUsersStat_OrgTree_Notify.attach_data)
}
inline void IMUsersStat_OrgTree_Notify::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMUsersStat_OrgTree_Notify.attach_data)
}
inline void IMUsersStat_OrgTree_Notify::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMUsersStat_OrgTree_Notify.attach_data)
}
inline ::std::string* IMUsersStat_OrgTree_Notify::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMUsersStat_OrgTree_Notify.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStat_OrgTree_Notify::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStat_OrgTree_Notify::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMUsersStat_OrgTree_Notify.attach_data)
}

// -------------------------------------------------------------------

// GTCGroupOptNotify

// required .IM.Group.IMGroupOptNotify notify = 1;
inline bool GTCGroupOptNotify::has_notify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTCGroupOptNotify::set_has_notify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTCGroupOptNotify::clear_has_notify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTCGroupOptNotify::clear_notify() {
  if (notify_ != NULL) notify_->::IM::Group::IMGroupOptNotify::Clear();
  clear_has_notify();
}
inline const ::IM::Group::IMGroupOptNotify& GTCGroupOptNotify::notify() const {
  // @@protoc_insertion_point(field_get:IM.Group.GTCGroupOptNotify.notify)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notify_ != NULL ? *notify_ : *default_instance().notify_;
#else
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
#endif
}
inline ::IM::Group::IMGroupOptNotify* GTCGroupOptNotify::mutable_notify() {
  set_has_notify();
  if (notify_ == NULL) notify_ = new ::IM::Group::IMGroupOptNotify;
  // @@protoc_insertion_point(field_mutable:IM.Group.GTCGroupOptNotify.notify)
  return notify_;
}
inline ::IM::Group::IMGroupOptNotify* GTCGroupOptNotify::release_notify() {
  clear_has_notify();
  ::IM::Group::IMGroupOptNotify* temp = notify_;
  notify_ = NULL;
  return temp;
}
inline void GTCGroupOptNotify::set_allocated_notify(::IM::Group::IMGroupOptNotify* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.GTCGroupOptNotify.notify)
}

// repeated uint32 socket_id = 2;
inline int GTCGroupOptNotify::socket_id_size() const {
  return socket_id_.size();
}
inline void GTCGroupOptNotify::clear_socket_id() {
  socket_id_.Clear();
}
inline ::google::protobuf::uint32 GTCGroupOptNotify::socket_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.GTCGroupOptNotify.socket_id)
  return socket_id_.Get(index);
}
inline void GTCGroupOptNotify::set_socket_id(int index, ::google::protobuf::uint32 value) {
  socket_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.GTCGroupOptNotify.socket_id)
}
inline void GTCGroupOptNotify::add_socket_id(::google::protobuf::uint32 value) {
  socket_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.GTCGroupOptNotify.socket_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GTCGroupOptNotify::socket_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.GTCGroupOptNotify.socket_id)
  return socket_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GTCGroupOptNotify::mutable_socket_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.GTCGroupOptNotify.socket_id)
  return &socket_id_;
}

// -------------------------------------------------------------------

// GTCGroupInfoModifyNotify

// required .IM.Group.IMGroupInfoModifyNotify notify = 1;
inline bool GTCGroupInfoModifyNotify::has_notify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTCGroupInfoModifyNotify::set_has_notify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTCGroupInfoModifyNotify::clear_has_notify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTCGroupInfoModifyNotify::clear_notify() {
  if (notify_ != NULL) notify_->::IM::Group::IMGroupInfoModifyNotify::Clear();
  clear_has_notify();
}
inline const ::IM::Group::IMGroupInfoModifyNotify& GTCGroupInfoModifyNotify::notify() const {
  // @@protoc_insertion_point(field_get:IM.Group.GTCGroupInfoModifyNotify.notify)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notify_ != NULL ? *notify_ : *default_instance().notify_;
#else
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
#endif
}
inline ::IM::Group::IMGroupInfoModifyNotify* GTCGroupInfoModifyNotify::mutable_notify() {
  set_has_notify();
  if (notify_ == NULL) notify_ = new ::IM::Group::IMGroupInfoModifyNotify;
  // @@protoc_insertion_point(field_mutable:IM.Group.GTCGroupInfoModifyNotify.notify)
  return notify_;
}
inline ::IM::Group::IMGroupInfoModifyNotify* GTCGroupInfoModifyNotify::release_notify() {
  clear_has_notify();
  ::IM::Group::IMGroupInfoModifyNotify* temp = notify_;
  notify_ = NULL;
  return temp;
}
inline void GTCGroupInfoModifyNotify::set_allocated_notify(::IM::Group::IMGroupInfoModifyNotify* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.GTCGroupInfoModifyNotify.notify)
}

// repeated uint32 socket_id = 2;
inline int GTCGroupInfoModifyNotify::socket_id_size() const {
  return socket_id_.size();
}
inline void GTCGroupInfoModifyNotify::clear_socket_id() {
  socket_id_.Clear();
}
inline ::google::protobuf::uint32 GTCGroupInfoModifyNotify::socket_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.GTCGroupInfoModifyNotify.socket_id)
  return socket_id_.Get(index);
}
inline void GTCGroupInfoModifyNotify::set_socket_id(int index, ::google::protobuf::uint32 value) {
  socket_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.GTCGroupInfoModifyNotify.socket_id)
}
inline void GTCGroupInfoModifyNotify::add_socket_id(::google::protobuf::uint32 value) {
  socket_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.GTCGroupInfoModifyNotify.socket_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GTCGroupInfoModifyNotify::socket_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.GTCGroupInfoModifyNotify.socket_id)
  return socket_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GTCGroupInfoModifyNotify::mutable_socket_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.GTCGroupInfoModifyNotify.socket_id)
  return &socket_id_;
}

// -------------------------------------------------------------------

// GTCGroupChangeMemberNotify

// required .IM.Group.IMGroupChangeMemberNotify notify = 1;
inline bool GTCGroupChangeMemberNotify::has_notify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTCGroupChangeMemberNotify::set_has_notify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTCGroupChangeMemberNotify::clear_has_notify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTCGroupChangeMemberNotify::clear_notify() {
  if (notify_ != NULL) notify_->::IM::Group::IMGroupChangeMemberNotify::Clear();
  clear_has_notify();
}
inline const ::IM::Group::IMGroupChangeMemberNotify& GTCGroupChangeMemberNotify::notify() const {
  // @@protoc_insertion_point(field_get:IM.Group.GTCGroupChangeMemberNotify.notify)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notify_ != NULL ? *notify_ : *default_instance().notify_;
#else
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
#endif
}
inline ::IM::Group::IMGroupChangeMemberNotify* GTCGroupChangeMemberNotify::mutable_notify() {
  set_has_notify();
  if (notify_ == NULL) notify_ = new ::IM::Group::IMGroupChangeMemberNotify;
  // @@protoc_insertion_point(field_mutable:IM.Group.GTCGroupChangeMemberNotify.notify)
  return notify_;
}
inline ::IM::Group::IMGroupChangeMemberNotify* GTCGroupChangeMemberNotify::release_notify() {
  clear_has_notify();
  ::IM::Group::IMGroupChangeMemberNotify* temp = notify_;
  notify_ = NULL;
  return temp;
}
inline void GTCGroupChangeMemberNotify::set_allocated_notify(::IM::Group::IMGroupChangeMemberNotify* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.GTCGroupChangeMemberNotify.notify)
}

// repeated uint32 socket_id = 2;
inline int GTCGroupChangeMemberNotify::socket_id_size() const {
  return socket_id_.size();
}
inline void GTCGroupChangeMemberNotify::clear_socket_id() {
  socket_id_.Clear();
}
inline ::google::protobuf::uint32 GTCGroupChangeMemberNotify::socket_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.GTCGroupChangeMemberNotify.socket_id)
  return socket_id_.Get(index);
}
inline void GTCGroupChangeMemberNotify::set_socket_id(int index, ::google::protobuf::uint32 value) {
  socket_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.GTCGroupChangeMemberNotify.socket_id)
}
inline void GTCGroupChangeMemberNotify::add_socket_id(::google::protobuf::uint32 value) {
  socket_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.GTCGroupChangeMemberNotify.socket_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GTCGroupChangeMemberNotify::socket_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.GTCGroupChangeMemberNotify.socket_id)
  return socket_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GTCGroupChangeMemberNotify::mutable_socket_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.GTCGroupChangeMemberNotify.socket_id)
  return &socket_id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eGroup_2eproto__INCLUDED
