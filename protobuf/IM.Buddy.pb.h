// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#ifndef PROTOBUF_IM_2eBuddy_2eproto__INCLUDED
#define PROTOBUF_IM_2eBuddy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Buddy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eBuddy_2eproto();
void protobuf_AssignDesc_IM_2eBuddy_2eproto();
void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

class IMRecentContactReq;
class IMRecentContactRsp;
class IMUpdateRecentContactReq;
class IMUpdateRecentContactRsp;
class IMListItemSetReq;
class IMListItemSetRsp;
class IMGetFixTopListReq;
class IMGetFixTopListRsp;
class IMFrequentContactReq;
class IMFrequentContactRsp;
class IMSingleUserInfoReq;
class IMSingleUserInfoRsp;
class IMAllUserReq;
class IMAllUserRsp;
class IMServerNotifyClient;
class IMAvatarChangedNotify;
class IMChangeAvatarReq;
class IMChangeAvatarRsp;
class IMSignInfoChangedNotify;
class IMChangeSignInfoReq;
class IMChangeSignInfoRsp;
class IMModifyUserInfoReq;
class IMModifyUserInfoRsp;
class IMLoginStatusNotify;
class IMOptBuddyReq;
class IMOptBuddyRsp;
class IMModiNickNameReq;
class IMModiNickNameRsp;
class IMGetBuddyReqListReq;
class IMGetBuddyReqListRsp;

// ===================================================================

class IMRecentContactReq : public ::google::protobuf::MessageLite {
 public:
  IMRecentContactReq();
  virtual ~IMRecentContactReq();

  IMRecentContactReq(const IMRecentContactReq& from);

  inline IMRecentContactReq& operator=(const IMRecentContactReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRecentContactReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRecentContactReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRecentContactReq* other);

  // implements Message ----------------------------------------------

  IMRecentContactReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRecentContactReq& from);
  void MergeFrom(const IMRecentContactReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecentContactReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRecentContactReq* default_instance_;
};
// -------------------------------------------------------------------

class IMRecentContactRsp : public ::google::protobuf::MessageLite {
 public:
  IMRecentContactRsp();
  virtual ~IMRecentContactRsp();

  IMRecentContactRsp(const IMRecentContactRsp& from);

  inline IMRecentContactRsp& operator=(const IMRecentContactRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRecentContactRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRecentContactRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRecentContactRsp* other);

  // implements Message ----------------------------------------------

  IMRecentContactRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRecentContactRsp& from);
  void MergeFrom(const IMRecentContactRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required uint32 is_more_data = 2;
  inline bool has_is_more_data() const;
  inline void clear_is_more_data();
  static const int kIsMoreDataFieldNumber = 2;
  inline ::google::protobuf::uint32 is_more_data() const;
  inline void set_is_more_data(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.RecentContactInfo contact_info_list = 3;
  inline int contact_info_list_size() const;
  inline void clear_contact_info_list();
  static const int kContactInfoListFieldNumber = 3;
  inline const ::IM::BaseDefine::RecentContactInfo& contact_info_list(int index) const;
  inline ::IM::BaseDefine::RecentContactInfo* mutable_contact_info_list(int index);
  inline ::IM::BaseDefine::RecentContactInfo* add_contact_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentContactInfo >&
      contact_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentContactInfo >*
      mutable_contact_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecentContactRsp)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_more_data();
  inline void clear_has_is_more_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentContactInfo > contact_info_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 is_more_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRecentContactRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUpdateRecentContactReq : public ::google::protobuf::MessageLite {
 public:
  IMUpdateRecentContactReq();
  virtual ~IMUpdateRecentContactReq();

  IMUpdateRecentContactReq(const IMUpdateRecentContactReq& from);

  inline IMUpdateRecentContactReq& operator=(const IMUpdateRecentContactReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUpdateRecentContactReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUpdateRecentContactReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUpdateRecentContactReq* other);

  // implements Message ----------------------------------------------

  IMUpdateRecentContactReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUpdateRecentContactReq& from);
  void MergeFrom(const IMUpdateRecentContactReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.SessionType session_type = 3;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 3;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required uint32 contact_id = 4;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 4;
  inline ::google::protobuf::uint32 contact_id() const;
  inline void set_contact_id(::google::protobuf::uint32 value);

  // required uint32 contact_company_id = 5;
  inline bool has_contact_company_id() const;
  inline void clear_contact_company_id();
  static const int kContactCompanyIdFieldNumber = 5;
  inline ::google::protobuf::uint32 contact_company_id() const;
  inline void set_contact_company_id(::google::protobuf::uint32 value);

  // required bool isDelete = 6;
  inline bool has_isdelete() const;
  inline void clear_isdelete();
  static const int kIsDeleteFieldNumber = 6;
  inline bool isdelete() const;
  inline void set_isdelete(bool value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUpdateRecentContactReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_contact_company_id();
  inline void clear_has_contact_company_id();
  inline void set_has_isdelete();
  inline void clear_has_isdelete();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::uint32 contact_id_;
  ::google::protobuf::uint32 contact_company_id_;
  bool isdelete_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUpdateRecentContactReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUpdateRecentContactRsp : public ::google::protobuf::MessageLite {
 public:
  IMUpdateRecentContactRsp();
  virtual ~IMUpdateRecentContactRsp();

  IMUpdateRecentContactRsp(const IMUpdateRecentContactRsp& from);

  inline IMUpdateRecentContactRsp& operator=(const IMUpdateRecentContactRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUpdateRecentContactRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUpdateRecentContactRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUpdateRecentContactRsp* other);

  // implements Message ----------------------------------------------

  IMUpdateRecentContactRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUpdateRecentContactRsp& from);
  void MergeFrom(const IMUpdateRecentContactRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUpdateRecentContactRsp)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUpdateRecentContactRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMListItemSetReq : public ::google::protobuf::MessageLite {
 public:
  IMListItemSetReq();
  virtual ~IMListItemSetReq();

  IMListItemSetReq(const IMListItemSetReq& from);

  inline IMListItemSetReq& operator=(const IMListItemSetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMListItemSetReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMListItemSetReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMListItemSetReq* other);

  // implements Message ----------------------------------------------

  IMListItemSetReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMListItemSetReq& from);
  void MergeFrom(const IMListItemSetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 3;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 4;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.SessionType session_type = 5;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 5;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required .IM.BaseDefine.ListItemOptType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::IM::BaseDefine::ListItemOptType type() const;
  inline void set_type(::IM::BaseDefine::ListItemOptType value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMListItemSetReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  int session_type_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMListItemSetReq* default_instance_;
};
// -------------------------------------------------------------------

class IMListItemSetRsp : public ::google::protobuf::MessageLite {
 public:
  IMListItemSetRsp();
  virtual ~IMListItemSetRsp();

  IMListItemSetRsp(const IMListItemSetRsp& from);

  inline IMListItemSetRsp& operator=(const IMListItemSetRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMListItemSetRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMListItemSetRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMListItemSetRsp* other);

  // implements Message ----------------------------------------------

  IMListItemSetRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMListItemSetRsp& from);
  void MergeFrom(const IMListItemSetRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.OptResultCode result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::IM::BaseDefine::OptResultCode result_code() const;
  inline void set_result_code(::IM::BaseDefine::OptResultCode value);

  // required .IM.BaseDefine.ListItemOptType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::IM::BaseDefine::ListItemOptType type() const;
  inline void set_type(::IM::BaseDefine::ListItemOptType value);

  // required .IM.BaseDefine.SessionType session_type = 5;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 5;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required uint32 fixtop_priority = 6;
  inline bool has_fixtop_priority() const;
  inline void clear_fixtop_priority();
  static const int kFixtopPriorityFieldNumber = 6;
  inline ::google::protobuf::uint32 fixtop_priority() const;
  inline void set_fixtop_priority(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMListItemSetRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_fixtop_priority();
  inline void clear_has_fixtop_priority();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int result_code_;
  int type_;
  int session_type_;
  ::google::protobuf::uint32 fixtop_priority_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMListItemSetRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetFixTopListReq : public ::google::protobuf::MessageLite {
 public:
  IMGetFixTopListReq();
  virtual ~IMGetFixTopListReq();

  IMGetFixTopListReq(const IMGetFixTopListReq& from);

  inline IMGetFixTopListReq& operator=(const IMGetFixTopListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetFixTopListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetFixTopListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetFixTopListReq* other);

  // implements Message ----------------------------------------------

  IMGetFixTopListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetFixTopListReq& from);
  void MergeFrom(const IMGetFixTopListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetFixTopListReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMGetFixTopListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetFixTopListRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetFixTopListRsp();
  virtual ~IMGetFixTopListRsp();

  IMGetFixTopListRsp(const IMGetFixTopListRsp& from);

  inline IMGetFixTopListRsp& operator=(const IMGetFixTopListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetFixTopListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetFixTopListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetFixTopListRsp* other);

  // implements Message ----------------------------------------------

  IMGetFixTopListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetFixTopListRsp& from);
  void MergeFrom(const IMGetFixTopListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.RecentFixTop list_fix_top = 3;
  inline int list_fix_top_size() const;
  inline void clear_list_fix_top();
  static const int kListFixTopFieldNumber = 3;
  inline const ::IM::BaseDefine::RecentFixTop& list_fix_top(int index) const;
  inline ::IM::BaseDefine::RecentFixTop* mutable_list_fix_top(int index);
  inline ::IM::BaseDefine::RecentFixTop* add_list_fix_top();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentFixTop >&
      list_fix_top() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentFixTop >*
      mutable_list_fix_top();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetFixTopListRsp)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentFixTop > list_fix_top_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMGetFixTopListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMFrequentContactReq : public ::google::protobuf::MessageLite {
 public:
  IMFrequentContactReq();
  virtual ~IMFrequentContactReq();

  IMFrequentContactReq(const IMFrequentContactReq& from);

  inline IMFrequentContactReq& operator=(const IMFrequentContactReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFrequentContactReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFrequentContactReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFrequentContactReq* other);

  // implements Message ----------------------------------------------

  IMFrequentContactReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFrequentContactReq& from);
  void MergeFrom(const IMFrequentContactReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFrequentContactReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMFrequentContactReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFrequentContactRsp : public ::google::protobuf::MessageLite {
 public:
  IMFrequentContactRsp();
  virtual ~IMFrequentContactRsp();

  IMFrequentContactRsp(const IMFrequentContactRsp& from);

  inline IMFrequentContactRsp& operator=(const IMFrequentContactRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFrequentContactRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFrequentContactRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFrequentContactRsp* other);

  // implements Message ----------------------------------------------

  IMFrequentContactRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFrequentContactRsp& from);
  void MergeFrom(const IMFrequentContactRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required uint32 is_more_data = 2;
  inline bool has_is_more_data() const;
  inline void clear_is_more_data();
  static const int kIsMoreDataFieldNumber = 2;
  inline ::google::protobuf::uint32 is_more_data() const;
  inline void set_is_more_data(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.FrequentContactInfo frequent_baseinfo_list = 3;
  inline int frequent_baseinfo_list_size() const;
  inline void clear_frequent_baseinfo_list();
  static const int kFrequentBaseinfoListFieldNumber = 3;
  inline const ::IM::BaseDefine::FrequentContactInfo& frequent_baseinfo_list(int index) const;
  inline ::IM::BaseDefine::FrequentContactInfo* mutable_frequent_baseinfo_list(int index);
  inline ::IM::BaseDefine::FrequentContactInfo* add_frequent_baseinfo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::FrequentContactInfo >&
      frequent_baseinfo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::FrequentContactInfo >*
      mutable_frequent_baseinfo_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFrequentContactRsp)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_more_data();
  inline void clear_has_is_more_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::FrequentContactInfo > frequent_baseinfo_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 is_more_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMFrequentContactRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMSingleUserInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMSingleUserInfoReq();
  virtual ~IMSingleUserInfoReq();

  IMSingleUserInfoReq(const IMSingleUserInfoReq& from);

  inline IMSingleUserInfoReq& operator=(const IMSingleUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMSingleUserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMSingleUserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMSingleUserInfoReq* other);

  // implements Message ----------------------------------------------

  IMSingleUserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMSingleUserInfoReq& from);
  void MergeFrom(const IMSingleUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserIdItem user_id_list = 3;
  inline int user_id_list_size() const;
  inline void clear_user_id_list();
  static const int kUserIdListFieldNumber = 3;
  inline const ::IM::BaseDefine::UserIdItem& user_id_list(int index) const;
  inline ::IM::BaseDefine::UserIdItem* mutable_user_id_list(int index);
  inline ::IM::BaseDefine::UserIdItem* add_user_id_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
      user_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
      mutable_user_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMSingleUserInfoReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem > user_id_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMSingleUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMSingleUserInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMSingleUserInfoRsp();
  virtual ~IMSingleUserInfoRsp();

  IMSingleUserInfoRsp(const IMSingleUserInfoRsp& from);

  inline IMSingleUserInfoRsp& operator=(const IMSingleUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMSingleUserInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMSingleUserInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMSingleUserInfoRsp* other);

  // implements Message ----------------------------------------------

  IMSingleUserInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMSingleUserInfoRsp& from);
  void MergeFrom(const IMSingleUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.UserInfo user_info_list = 3;
  inline int user_info_list_size() const;
  inline void clear_user_info_list();
  static const int kUserInfoListFieldNumber = 3;
  inline const ::IM::BaseDefine::UserInfo& user_info_list(int index) const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info_list(int index);
  inline ::IM::BaseDefine::UserInfo* add_user_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMSingleUserInfoRsp)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_info_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMSingleUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMAllUserReq : public ::google::protobuf::MessageLite {
 public:
  IMAllUserReq();
  virtual ~IMAllUserReq();

  IMAllUserReq(const IMAllUserReq& from);

  inline IMAllUserReq& operator=(const IMAllUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAllUserReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAllUserReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAllUserReq* other);

  // implements Message ----------------------------------------------

  IMAllUserReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAllUserReq& from);
  void MergeFrom(const IMAllUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAllUserReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAllUserReq* default_instance_;
};
// -------------------------------------------------------------------

class IMAllUserRsp : public ::google::protobuf::MessageLite {
 public:
  IMAllUserRsp();
  virtual ~IMAllUserRsp();

  IMAllUserRsp(const IMAllUserRsp& from);

  inline IMAllUserRsp& operator=(const IMAllUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAllUserRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAllUserRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAllUserRsp* other);

  // implements Message ----------------------------------------------

  IMAllUserRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAllUserRsp& from);
  void MergeFrom(const IMAllUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required uint32 is_more_data = 2;
  inline bool has_is_more_data() const;
  inline void clear_is_more_data();
  static const int kIsMoreDataFieldNumber = 2;
  inline ::google::protobuf::uint32 is_more_data() const;
  inline void set_is_more_data(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 3;
  inline const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  inline ::IM::BaseDefine::UserInfo* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAllUserRsp)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_more_data();
  inline void clear_has_is_more_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 is_more_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAllUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMServerNotifyClient : public ::google::protobuf::MessageLite {
 public:
  IMServerNotifyClient();
  virtual ~IMServerNotifyClient();

  IMServerNotifyClient(const IMServerNotifyClient& from);

  inline IMServerNotifyClient& operator=(const IMServerNotifyClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMServerNotifyClient& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMServerNotifyClient* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMServerNotifyClient* other);

  // implements Message ----------------------------------------------

  IMServerNotifyClient* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMServerNotifyClient& from);
  void MergeFrom(const IMServerNotifyClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ServerNotifyType notify_type = 3;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 3;
  inline ::IM::BaseDefine::ServerNotifyType notify_type() const;
  inline void set_notify_type(::IM::BaseDefine::ServerNotifyType value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMServerNotifyClient)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  int notify_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMServerNotifyClient* default_instance_;
};
// -------------------------------------------------------------------

class IMAvatarChangedNotify : public ::google::protobuf::MessageLite {
 public:
  IMAvatarChangedNotify();
  virtual ~IMAvatarChangedNotify();

  IMAvatarChangedNotify(const IMAvatarChangedNotify& from);

  inline IMAvatarChangedNotify& operator=(const IMAvatarChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAvatarChangedNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAvatarChangedNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAvatarChangedNotify* other);

  // implements Message ----------------------------------------------

  IMAvatarChangedNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAvatarChangedNotify& from);
  void MergeFrom(const IMAvatarChangedNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 changed_user_id = 2;
  inline bool has_changed_user_id() const;
  inline void clear_changed_user_id();
  static const int kChangedUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 changed_user_id() const;
  inline void set_changed_user_id(::google::protobuf::uint32 value);

  // required string avatar_url = 3;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required uint64 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAvatarChangedNotify)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_changed_user_id();
  inline void clear_has_changed_user_id();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 changed_user_id_;
  ::std::string* avatar_url_;
  ::google::protobuf::uint64 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAvatarChangedNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMChangeAvatarReq : public ::google::protobuf::MessageLite {
 public:
  IMChangeAvatarReq();
  virtual ~IMChangeAvatarReq();

  IMChangeAvatarReq(const IMChangeAvatarReq& from);

  inline IMChangeAvatarReq& operator=(const IMChangeAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChangeAvatarReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChangeAvatarReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChangeAvatarReq* other);

  // implements Message ----------------------------------------------

  IMChangeAvatarReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChangeAvatarReq& from);
  void MergeFrom(const IMChangeAvatarReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string avatar_url = 3;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required .IM.BaseDefine.SessionType session_type = 4;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeAvatarReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* avatar_url_;
  ::std::string* attach_data_;
  int session_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChangeAvatarReq* default_instance_;
};
// -------------------------------------------------------------------

class IMChangeAvatarRsp : public ::google::protobuf::MessageLite {
 public:
  IMChangeAvatarRsp();
  virtual ~IMChangeAvatarRsp();

  IMChangeAvatarRsp(const IMChangeAvatarRsp& from);

  inline IMChangeAvatarRsp& operator=(const IMChangeAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChangeAvatarRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChangeAvatarRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChangeAvatarRsp* other);

  // implements Message ----------------------------------------------

  IMChangeAvatarRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChangeAvatarRsp& from);
  void MergeFrom(const IMChangeAvatarRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint64 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeAvatarRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChangeAvatarRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMSignInfoChangedNotify : public ::google::protobuf::MessageLite {
 public:
  IMSignInfoChangedNotify();
  virtual ~IMSignInfoChangedNotify();

  IMSignInfoChangedNotify(const IMSignInfoChangedNotify& from);

  inline IMSignInfoChangedNotify& operator=(const IMSignInfoChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMSignInfoChangedNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMSignInfoChangedNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMSignInfoChangedNotify* other);

  // implements Message ----------------------------------------------

  IMSignInfoChangedNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMSignInfoChangedNotify& from);
  void MergeFrom(const IMSignInfoChangedNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 changed_user_id = 2;
  inline bool has_changed_user_id() const;
  inline void clear_changed_user_id();
  static const int kChangedUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 changed_user_id() const;
  inline void set_changed_user_id(::google::protobuf::uint32 value);

  // required string sign_info = 3;
  inline bool has_sign_info() const;
  inline void clear_sign_info();
  static const int kSignInfoFieldNumber = 3;
  inline const ::std::string& sign_info() const;
  inline void set_sign_info(const ::std::string& value);
  inline void set_sign_info(const char* value);
  inline void set_sign_info(const char* value, size_t size);
  inline ::std::string* mutable_sign_info();
  inline ::std::string* release_sign_info();
  inline void set_allocated_sign_info(::std::string* sign_info);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMSignInfoChangedNotify)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_changed_user_id();
  inline void clear_has_changed_user_id();
  inline void set_has_sign_info();
  inline void clear_has_sign_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 changed_user_id_;
  ::std::string* sign_info_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMSignInfoChangedNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMChangeSignInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMChangeSignInfoReq();
  virtual ~IMChangeSignInfoReq();

  IMChangeSignInfoReq(const IMChangeSignInfoReq& from);

  inline IMChangeSignInfoReq& operator=(const IMChangeSignInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChangeSignInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChangeSignInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChangeSignInfoReq* other);

  // implements Message ----------------------------------------------

  IMChangeSignInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChangeSignInfoReq& from);
  void MergeFrom(const IMChangeSignInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string sign_info = 3;
  inline bool has_sign_info() const;
  inline void clear_sign_info();
  static const int kSignInfoFieldNumber = 3;
  inline const ::std::string& sign_info() const;
  inline void set_sign_info(const ::std::string& value);
  inline void set_sign_info(const char* value);
  inline void set_sign_info(const char* value, size_t size);
  inline ::std::string* mutable_sign_info();
  inline ::std::string* release_sign_info();
  inline void set_allocated_sign_info(::std::string* sign_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeSignInfoReq)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sign_info();
  inline void clear_has_sign_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* sign_info_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChangeSignInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMChangeSignInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMChangeSignInfoRsp();
  virtual ~IMChangeSignInfoRsp();

  IMChangeSignInfoRsp(const IMChangeSignInfoRsp& from);

  inline IMChangeSignInfoRsp& operator=(const IMChangeSignInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChangeSignInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChangeSignInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChangeSignInfoRsp* other);

  // implements Message ----------------------------------------------

  IMChangeSignInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChangeSignInfoRsp& from);
  void MergeFrom(const IMChangeSignInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint64 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeSignInfoRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChangeSignInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMModifyUserInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMModifyUserInfoReq();
  virtual ~IMModifyUserInfoReq();

  IMModifyUserInfoReq(const IMModifyUserInfoReq& from);

  inline IMModifyUserInfoReq& operator=(const IMModifyUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMModifyUserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMModifyUserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMModifyUserInfoReq* other);

  // implements Message ----------------------------------------------

  IMModifyUserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMModifyUserInfoReq& from);
  void MergeFrom(const IMModifyUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 from_company_id = 2;
  inline bool has_from_company_id() const;
  inline void clear_from_company_id();
  static const int kFromCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 from_company_id() const;
  inline void set_from_company_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.UserInfo user_info = 3;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 3;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMModifyUserInfoReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_from_company_id();
  inline void clear_has_from_company_id();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 from_company_id_;
  ::IM::BaseDefine::UserInfo* user_info_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMModifyUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMModifyUserInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMModifyUserInfoRsp();
  virtual ~IMModifyUserInfoRsp();

  IMModifyUserInfoRsp(const IMModifyUserInfoRsp& from);

  inline IMModifyUserInfoRsp& operator=(const IMModifyUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMModifyUserInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMModifyUserInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMModifyUserInfoRsp* other);

  // implements Message ----------------------------------------------

  IMModifyUserInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMModifyUserInfoRsp& from);
  void MergeFrom(const IMModifyUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.OptResultCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::IM::BaseDefine::OptResultCode result() const;
  inline void set_result(::IM::BaseDefine::OptResultCode value);

  // required uint64 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMModifyUserInfoRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  int result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMModifyUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMLoginStatusNotify : public ::google::protobuf::MessageLite {
 public:
  IMLoginStatusNotify();
  virtual ~IMLoginStatusNotify();

  IMLoginStatusNotify(const IMLoginStatusNotify& from);

  inline IMLoginStatusNotify& operator=(const IMLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMLoginStatusNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMLoginStatusNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMLoginStatusNotify* other);

  // implements Message ----------------------------------------------

  IMLoginStatusNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMLoginStatusNotify& from);
  void MergeFrom(const IMLoginStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 device_type = 3;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 device_type() const;
  inline void set_device_type(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.UserStatType login_stat = 4;
  inline bool has_login_stat() const;
  inline void clear_login_stat();
  static const int kLoginStatFieldNumber = 4;
  inline ::IM::BaseDefine::UserStatType login_stat() const;
  inline void set_login_stat(::IM::BaseDefine::UserStatType value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMLoginStatusNotify)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_login_stat();
  inline void clear_has_login_stat();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 device_type_;
  int login_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMLoginStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMOptBuddyReq : public ::google::protobuf::MessageLite {
 public:
  IMOptBuddyReq();
  virtual ~IMOptBuddyReq();

  IMOptBuddyReq(const IMOptBuddyReq& from);

  inline IMOptBuddyReq& operator=(const IMOptBuddyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMOptBuddyReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMOptBuddyReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMOptBuddyReq* other);

  // implements Message ----------------------------------------------

  IMOptBuddyReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMOptBuddyReq& from);
  void MergeFrom(const IMOptBuddyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint64 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.BuddyOptType opt_type = 6;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 6;
  inline ::IM::BaseDefine::BuddyOptType opt_type() const;
  inline void set_opt_type(::IM::BaseDefine::BuddyOptType value);

  // required string opt_remark = 7;
  inline bool has_opt_remark() const;
  inline void clear_opt_remark();
  static const int kOptRemarkFieldNumber = 7;
  inline const ::std::string& opt_remark() const;
  inline void set_opt_remark(const ::std::string& value);
  inline void set_opt_remark(const char* value);
  inline void set_opt_remark(const char* value, size_t size);
  inline ::std::string* mutable_opt_remark();
  inline ::std::string* release_opt_remark();
  inline void set_allocated_opt_remark(::std::string* opt_remark);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMOptBuddyReq)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_opt_remark();
  inline void clear_has_opt_remark();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 create_time_;
  ::std::string* opt_remark_;
  int opt_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMOptBuddyReq* default_instance_;
};
// -------------------------------------------------------------------

class IMOptBuddyRsp : public ::google::protobuf::MessageLite {
 public:
  IMOptBuddyRsp();
  virtual ~IMOptBuddyRsp();

  IMOptBuddyRsp(const IMOptBuddyRsp& from);

  inline IMOptBuddyRsp& operator=(const IMOptBuddyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMOptBuddyRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMOptBuddyRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMOptBuddyRsp* other);

  // implements Message ----------------------------------------------

  IMOptBuddyRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMOptBuddyRsp& from);
  void MergeFrom(const IMOptBuddyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_user_id = 1;
  inline bool has_req_user_id() const;
  inline void clear_req_user_id();
  static const int kReqUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_user_id() const;
  inline void set_req_user_id(::google::protobuf::uint32 value);

  // required uint32 req_company_id = 2;
  inline bool has_req_company_id() const;
  inline void clear_req_company_id();
  static const int kReqCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 req_company_id() const;
  inline void set_req_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required uint64 response_time = 5;
  inline bool has_response_time() const;
  inline void clear_response_time();
  static const int kResponseTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 response_time() const;
  inline void set_response_time(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.BuddyOptType opt_type = 7;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 7;
  inline ::IM::BaseDefine::BuddyOptType opt_type() const;
  inline void set_opt_type(::IM::BaseDefine::BuddyOptType value);

  // required .IM.BaseDefine.OptResultCode result = 8;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 8;
  inline ::IM::BaseDefine::OptResultCode result() const;
  inline void set_result(::IM::BaseDefine::OptResultCode value);

  // required string opt_remark = 9;
  inline bool has_opt_remark() const;
  inline void clear_opt_remark();
  static const int kOptRemarkFieldNumber = 9;
  inline const ::std::string& opt_remark() const;
  inline void set_opt_remark(const ::std::string& value);
  inline void set_opt_remark(const char* value);
  inline void set_opt_remark(const char* value, size_t size);
  inline ::std::string* mutable_opt_remark();
  inline ::std::string* release_opt_remark();
  inline void set_allocated_opt_remark(::std::string* opt_remark);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMOptBuddyRsp)
 private:
  inline void set_has_req_user_id();
  inline void clear_has_req_user_id();
  inline void set_has_req_company_id();
  inline void clear_has_req_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_response_time();
  inline void clear_has_response_time();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_opt_remark();
  inline void clear_has_opt_remark();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 req_user_id_;
  ::google::protobuf::uint32 req_company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::google::protobuf::uint64 response_time_;
  int opt_type_;
  int result_;
  ::std::string* opt_remark_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMOptBuddyRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMModiNickNameReq : public ::google::protobuf::MessageLite {
 public:
  IMModiNickNameReq();
  virtual ~IMModiNickNameReq();

  IMModiNickNameReq(const IMModiNickNameReq& from);

  inline IMModiNickNameReq& operator=(const IMModiNickNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMModiNickNameReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMModiNickNameReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMModiNickNameReq* other);

  // implements Message ----------------------------------------------

  IMModiNickNameReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMModiNickNameReq& from);
  void MergeFrom(const IMModiNickNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 company_id = 2;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required bytes nick_name = 20;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 20;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMModiNickNameReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::std::string* nick_name_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMModiNickNameReq* default_instance_;
};
// -------------------------------------------------------------------

class IMModiNickNameRsp : public ::google::protobuf::MessageLite {
 public:
  IMModiNickNameRsp();
  virtual ~IMModiNickNameRsp();

  IMModiNickNameRsp(const IMModiNickNameRsp& from);

  inline IMModiNickNameRsp& operator=(const IMModiNickNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMModiNickNameRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMModiNickNameRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMModiNickNameRsp* other);

  // implements Message ----------------------------------------------

  IMModiNickNameRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMModiNickNameRsp& from);
  void MergeFrom(const IMModiNickNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 company_id = 2;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 dest_user_id = 3;
  inline bool has_dest_user_id() const;
  inline void clear_dest_user_id();
  static const int kDestUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_user_id() const;
  inline void set_dest_user_id(::google::protobuf::uint32 value);

  // required uint32 dest_company_id = 4;
  inline bool has_dest_company_id() const;
  inline void clear_dest_company_id();
  static const int kDestCompanyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_company_id() const;
  inline void set_dest_company_id(::google::protobuf::uint32 value);

  // required bytes nick_name = 5;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMModiNickNameRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_dest_user_id();
  inline void clear_has_dest_user_id();
  inline void set_has_dest_company_id();
  inline void clear_has_dest_company_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 dest_user_id_;
  ::google::protobuf::uint32 dest_company_id_;
  ::std::string* nick_name_;
  ::google::protobuf::uint64 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMModiNickNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetBuddyReqListReq : public ::google::protobuf::MessageLite {
 public:
  IMGetBuddyReqListReq();
  virtual ~IMGetBuddyReqListReq();

  IMGetBuddyReqListReq(const IMGetBuddyReqListReq& from);

  inline IMGetBuddyReqListReq& operator=(const IMGetBuddyReqListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetBuddyReqListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetBuddyReqListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetBuddyReqListReq* other);

  // implements Message ----------------------------------------------

  IMGetBuddyReqListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetBuddyReqListReq& from);
  void MergeFrom(const IMGetBuddyReqListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 company_id = 2;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required uint32 pack_index = 4;
  inline bool has_pack_index() const;
  inline void clear_pack_index();
  static const int kPackIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 pack_index() const;
  inline void set_pack_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetBuddyReqListReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_pack_index();
  inline void clear_has_pack_index();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::uint32 pack_index_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMGetBuddyReqListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetBuddyReqListRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetBuddyReqListRsp();
  virtual ~IMGetBuddyReqListRsp();

  IMGetBuddyReqListRsp(const IMGetBuddyReqListRsp& from);

  inline IMGetBuddyReqListRsp& operator=(const IMGetBuddyReqListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetBuddyReqListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetBuddyReqListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetBuddyReqListRsp* other);

  // implements Message ----------------------------------------------

  IMGetBuddyReqListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetBuddyReqListRsp& from);
  void MergeFrom(const IMGetBuddyReqListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // repeated .IM.BaseDefine.IMBuddyReqInfo BuddysReqs = 2;
  inline int buddysreqs_size() const;
  inline void clear_buddysreqs();
  static const int kBuddysReqsFieldNumber = 2;
  inline const ::IM::BaseDefine::IMBuddyReqInfo& buddysreqs(int index) const;
  inline ::IM::BaseDefine::IMBuddyReqInfo* mutable_buddysreqs(int index);
  inline ::IM::BaseDefine::IMBuddyReqInfo* add_buddysreqs();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMBuddyReqInfo >&
      buddysreqs() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMBuddyReqInfo >*
      mutable_buddysreqs();

  // required uint32 pack_index = 3;
  inline bool has_pack_index() const;
  inline void clear_pack_index();
  static const int kPackIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 pack_index() const;
  inline void set_pack_index(::google::protobuf::uint32 value);

  // required uint32 pack_count = 4;
  inline bool has_pack_count() const;
  inline void clear_pack_count();
  static const int kPackCountFieldNumber = 4;
  inline ::google::protobuf::uint32 pack_count() const;
  inline void set_pack_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetBuddyReqListRsp)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_pack_index();
  inline void clear_has_pack_index();
  inline void set_has_pack_count();
  inline void clear_has_pack_count();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMBuddyReqInfo > buddysreqs_;
  ::google::protobuf::uint32 pack_index_;
  ::google::protobuf::uint32 pack_count_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMGetBuddyReqListRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMRecentContactReq

// required uint32 company_id = 1;
inline bool IMRecentContactReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRecentContactReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRecentContactReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRecentContactReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMRecentContactReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactReq.company_id)
  return company_id_;
}
inline void IMRecentContactReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMRecentContactReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRecentContactReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRecentContactReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRecentContactReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMRecentContactReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactReq.user_id)
  return user_id_;
}
inline void IMRecentContactReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactReq.user_id)
}

// required uint64 update_time = 3;
inline bool IMRecentContactReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRecentContactReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRecentContactReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRecentContactReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMRecentContactReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactReq.update_time)
  return update_time_;
}
inline void IMRecentContactReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactReq.update_time)
}

// optional bytes attach_data = 20;
inline bool IMRecentContactReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMRecentContactReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMRecentContactReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMRecentContactReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRecentContactReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactReq.attach_data)
  return *attach_data_;
}
inline void IMRecentContactReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactReq.attach_data)
}
inline void IMRecentContactReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactReq.attach_data)
}
inline void IMRecentContactReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactReq.attach_data)
}
inline ::std::string* IMRecentContactReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMRecentContactReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRecentContactReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactReq.attach_data)
}

// -------------------------------------------------------------------

// IMRecentContactRsp

// required uint64 update_time = 1;
inline bool IMRecentContactRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRecentContactRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRecentContactRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRecentContactRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMRecentContactRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactRsp.update_time)
  return update_time_;
}
inline void IMRecentContactRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactRsp.update_time)
}

// required uint32 is_more_data = 2;
inline bool IMRecentContactRsp::has_is_more_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRecentContactRsp::set_has_is_more_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRecentContactRsp::clear_has_is_more_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRecentContactRsp::clear_is_more_data() {
  is_more_data_ = 0u;
  clear_has_is_more_data();
}
inline ::google::protobuf::uint32 IMRecentContactRsp::is_more_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactRsp.is_more_data)
  return is_more_data_;
}
inline void IMRecentContactRsp::set_is_more_data(::google::protobuf::uint32 value) {
  set_has_is_more_data();
  is_more_data_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactRsp.is_more_data)
}

// repeated .IM.BaseDefine.RecentContactInfo contact_info_list = 3;
inline int IMRecentContactRsp::contact_info_list_size() const {
  return contact_info_list_.size();
}
inline void IMRecentContactRsp::clear_contact_info_list() {
  contact_info_list_.Clear();
}
inline const ::IM::BaseDefine::RecentContactInfo& IMRecentContactRsp::contact_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactRsp.contact_info_list)
  return contact_info_list_.Get(index);
}
inline ::IM::BaseDefine::RecentContactInfo* IMRecentContactRsp::mutable_contact_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactRsp.contact_info_list)
  return contact_info_list_.Mutable(index);
}
inline ::IM::BaseDefine::RecentContactInfo* IMRecentContactRsp::add_contact_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecentContactRsp.contact_info_list)
  return contact_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentContactInfo >&
IMRecentContactRsp::contact_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMRecentContactRsp.contact_info_list)
  return contact_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentContactInfo >*
IMRecentContactRsp::mutable_contact_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMRecentContactRsp.contact_info_list)
  return &contact_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMRecentContactRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMRecentContactRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMRecentContactRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMRecentContactRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRecentContactRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactRsp.attach_data)
  return *attach_data_;
}
inline void IMRecentContactRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactRsp.attach_data)
}
inline void IMRecentContactRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactRsp.attach_data)
}
inline void IMRecentContactRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactRsp.attach_data)
}
inline ::std::string* IMRecentContactRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMRecentContactRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRecentContactRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUpdateRecentContactReq

// required uint32 company_id = 1;
inline bool IMUpdateRecentContactReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUpdateRecentContactReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUpdateRecentContactReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMUpdateRecentContactReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.company_id)
  return company_id_;
}
inline void IMUpdateRecentContactReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMUpdateRecentContactReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUpdateRecentContactReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUpdateRecentContactReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUpdateRecentContactReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.user_id)
  return user_id_;
}
inline void IMUpdateRecentContactReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 3;
inline bool IMUpdateRecentContactReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUpdateRecentContactReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUpdateRecentContactReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMUpdateRecentContactReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMUpdateRecentContactReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.session_type)
}

// required uint32 contact_id = 4;
inline bool IMUpdateRecentContactReq::has_contact_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_contact_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUpdateRecentContactReq::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUpdateRecentContactReq::clear_contact_id() {
  contact_id_ = 0u;
  clear_has_contact_id();
}
inline ::google::protobuf::uint32 IMUpdateRecentContactReq::contact_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.contact_id)
  return contact_id_;
}
inline void IMUpdateRecentContactReq::set_contact_id(::google::protobuf::uint32 value) {
  set_has_contact_id();
  contact_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.contact_id)
}

// required uint32 contact_company_id = 5;
inline bool IMUpdateRecentContactReq::has_contact_company_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_contact_company_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUpdateRecentContactReq::clear_has_contact_company_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUpdateRecentContactReq::clear_contact_company_id() {
  contact_company_id_ = 0u;
  clear_has_contact_company_id();
}
inline ::google::protobuf::uint32 IMUpdateRecentContactReq::contact_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.contact_company_id)
  return contact_company_id_;
}
inline void IMUpdateRecentContactReq::set_contact_company_id(::google::protobuf::uint32 value) {
  set_has_contact_company_id();
  contact_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.contact_company_id)
}

// required bool isDelete = 6;
inline bool IMUpdateRecentContactReq::has_isdelete() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_isdelete() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUpdateRecentContactReq::clear_has_isdelete() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUpdateRecentContactReq::clear_isdelete() {
  isdelete_ = false;
  clear_has_isdelete();
}
inline bool IMUpdateRecentContactReq::isdelete() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.isDelete)
  return isdelete_;
}
inline void IMUpdateRecentContactReq::set_isdelete(bool value) {
  set_has_isdelete();
  isdelete_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.isDelete)
}

// optional bytes attach_data = 20;
inline bool IMUpdateRecentContactReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMUpdateRecentContactReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMUpdateRecentContactReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMUpdateRecentContactReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUpdateRecentContactReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactReq.attach_data)
  return *attach_data_;
}
inline void IMUpdateRecentContactReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactReq.attach_data)
}
inline void IMUpdateRecentContactReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUpdateRecentContactReq.attach_data)
}
inline void IMUpdateRecentContactReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUpdateRecentContactReq.attach_data)
}
inline ::std::string* IMUpdateRecentContactReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateRecentContactReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMUpdateRecentContactReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUpdateRecentContactReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateRecentContactReq.attach_data)
}

// -------------------------------------------------------------------

// IMUpdateRecentContactRsp

// required uint64 update_time = 1;
inline bool IMUpdateRecentContactRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUpdateRecentContactRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUpdateRecentContactRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUpdateRecentContactRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMUpdateRecentContactRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactRsp.update_time)
  return update_time_;
}
inline void IMUpdateRecentContactRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactRsp.update_time)
}

// optional bytes attach_data = 20;
inline bool IMUpdateRecentContactRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUpdateRecentContactRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUpdateRecentContactRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUpdateRecentContactRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUpdateRecentContactRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateRecentContactRsp.attach_data)
  return *attach_data_;
}
inline void IMUpdateRecentContactRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateRecentContactRsp.attach_data)
}
inline void IMUpdateRecentContactRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUpdateRecentContactRsp.attach_data)
}
inline void IMUpdateRecentContactRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUpdateRecentContactRsp.attach_data)
}
inline ::std::string* IMUpdateRecentContactRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateRecentContactRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMUpdateRecentContactRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUpdateRecentContactRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateRecentContactRsp.attach_data)
}

// -------------------------------------------------------------------

// IMListItemSetReq

// required uint32 company_id = 1;
inline bool IMListItemSetReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMListItemSetReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMListItemSetReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMListItemSetReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMListItemSetReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetReq.company_id)
  return company_id_;
}
inline void IMListItemSetReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMListItemSetReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMListItemSetReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMListItemSetReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMListItemSetReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMListItemSetReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetReq.user_id)
  return user_id_;
}
inline void IMListItemSetReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetReq.user_id)
}

// required uint32 dest_company_id = 3;
inline bool IMListItemSetReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMListItemSetReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMListItemSetReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMListItemSetReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMListItemSetReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetReq.dest_company_id)
  return dest_company_id_;
}
inline void IMListItemSetReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetReq.dest_company_id)
}

// required uint32 dest_user_id = 4;
inline bool IMListItemSetReq::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMListItemSetReq::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMListItemSetReq::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMListItemSetReq::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMListItemSetReq::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetReq.dest_user_id)
  return dest_user_id_;
}
inline void IMListItemSetReq::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetReq.dest_user_id)
}

// required .IM.BaseDefine.SessionType session_type = 5;
inline bool IMListItemSetReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMListItemSetReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMListItemSetReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMListItemSetReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMListItemSetReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMListItemSetReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetReq.session_type)
}

// required .IM.BaseDefine.ListItemOptType type = 6;
inline bool IMListItemSetReq::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMListItemSetReq::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMListItemSetReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMListItemSetReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::IM::BaseDefine::ListItemOptType IMListItemSetReq::type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetReq.type)
  return static_cast< ::IM::BaseDefine::ListItemOptType >(type_);
}
inline void IMListItemSetReq::set_type(::IM::BaseDefine::ListItemOptType value) {
  assert(::IM::BaseDefine::ListItemOptType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetReq.type)
}

// -------------------------------------------------------------------

// IMListItemSetRsp

// required uint32 company_id = 1;
inline bool IMListItemSetRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMListItemSetRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMListItemSetRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMListItemSetRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMListItemSetRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.company_id)
  return company_id_;
}
inline void IMListItemSetRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMListItemSetRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMListItemSetRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMListItemSetRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMListItemSetRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMListItemSetRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.user_id)
  return user_id_;
}
inline void IMListItemSetRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.user_id)
}

// required .IM.BaseDefine.OptResultCode result_code = 3;
inline bool IMListItemSetRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMListItemSetRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMListItemSetRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMListItemSetRsp::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::IM::BaseDefine::OptResultCode IMListItemSetRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.result_code)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_code_);
}
inline void IMListItemSetRsp::set_result_code(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.result_code)
}

// required .IM.BaseDefine.ListItemOptType type = 4;
inline bool IMListItemSetRsp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMListItemSetRsp::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMListItemSetRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMListItemSetRsp::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::IM::BaseDefine::ListItemOptType IMListItemSetRsp::type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.type)
  return static_cast< ::IM::BaseDefine::ListItemOptType >(type_);
}
inline void IMListItemSetRsp::set_type(::IM::BaseDefine::ListItemOptType value) {
  assert(::IM::BaseDefine::ListItemOptType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.type)
}

// required .IM.BaseDefine.SessionType session_type = 5;
inline bool IMListItemSetRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMListItemSetRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMListItemSetRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMListItemSetRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMListItemSetRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMListItemSetRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.session_type)
}

// required uint32 fixtop_priority = 6;
inline bool IMListItemSetRsp::has_fixtop_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMListItemSetRsp::set_has_fixtop_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMListItemSetRsp::clear_has_fixtop_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMListItemSetRsp::clear_fixtop_priority() {
  fixtop_priority_ = 0u;
  clear_has_fixtop_priority();
}
inline ::google::protobuf::uint32 IMListItemSetRsp::fixtop_priority() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.fixtop_priority)
  return fixtop_priority_;
}
inline void IMListItemSetRsp::set_fixtop_priority(::google::protobuf::uint32 value) {
  set_has_fixtop_priority();
  fixtop_priority_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.fixtop_priority)
}

// optional bytes attach_data = 20;
inline bool IMListItemSetRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMListItemSetRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMListItemSetRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMListItemSetRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMListItemSetRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMListItemSetRsp.attach_data)
  return *attach_data_;
}
inline void IMListItemSetRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMListItemSetRsp.attach_data)
}
inline void IMListItemSetRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMListItemSetRsp.attach_data)
}
inline void IMListItemSetRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMListItemSetRsp.attach_data)
}
inline ::std::string* IMListItemSetRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMListItemSetRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMListItemSetRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMListItemSetRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMListItemSetRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetFixTopListReq

// required uint32 company_id = 1;
inline bool IMGetFixTopListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetFixTopListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetFixTopListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetFixTopListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGetFixTopListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListReq.company_id)
  return company_id_;
}
inline void IMGetFixTopListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetFixTopListReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMGetFixTopListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetFixTopListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetFixTopListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetFixTopListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetFixTopListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListReq.user_id)
  return user_id_;
}
inline void IMGetFixTopListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetFixTopListReq.user_id)
}

// optional bytes attach_data = 20;
inline bool IMGetFixTopListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetFixTopListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetFixTopListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetFixTopListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetFixTopListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListReq.attach_data)
  return *attach_data_;
}
inline void IMGetFixTopListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetFixTopListReq.attach_data)
}
inline void IMGetFixTopListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetFixTopListReq.attach_data)
}
inline void IMGetFixTopListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetFixTopListReq.attach_data)
}
inline ::std::string* IMGetFixTopListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetFixTopListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetFixTopListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetFixTopListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetFixTopListReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetFixTopListRsp

// required uint32 company_id = 1;
inline bool IMGetFixTopListRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetFixTopListRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetFixTopListRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetFixTopListRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGetFixTopListRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListRsp.company_id)
  return company_id_;
}
inline void IMGetFixTopListRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetFixTopListRsp.company_id)
}

// required uint32 user_id = 2;
inline bool IMGetFixTopListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetFixTopListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetFixTopListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetFixTopListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetFixTopListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListRsp.user_id)
  return user_id_;
}
inline void IMGetFixTopListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetFixTopListRsp.user_id)
}

// repeated .IM.BaseDefine.RecentFixTop list_fix_top = 3;
inline int IMGetFixTopListRsp::list_fix_top_size() const {
  return list_fix_top_.size();
}
inline void IMGetFixTopListRsp::clear_list_fix_top() {
  list_fix_top_.Clear();
}
inline const ::IM::BaseDefine::RecentFixTop& IMGetFixTopListRsp::list_fix_top(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListRsp.list_fix_top)
  return list_fix_top_.Get(index);
}
inline ::IM::BaseDefine::RecentFixTop* IMGetFixTopListRsp::mutable_list_fix_top(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetFixTopListRsp.list_fix_top)
  return list_fix_top_.Mutable(index);
}
inline ::IM::BaseDefine::RecentFixTop* IMGetFixTopListRsp::add_list_fix_top() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMGetFixTopListRsp.list_fix_top)
  return list_fix_top_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentFixTop >&
IMGetFixTopListRsp::list_fix_top() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMGetFixTopListRsp.list_fix_top)
  return list_fix_top_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RecentFixTop >*
IMGetFixTopListRsp::mutable_list_fix_top() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMGetFixTopListRsp.list_fix_top)
  return &list_fix_top_;
}

// optional bytes attach_data = 20;
inline bool IMGetFixTopListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetFixTopListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetFixTopListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetFixTopListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetFixTopListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetFixTopListRsp.attach_data)
  return *attach_data_;
}
inline void IMGetFixTopListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetFixTopListRsp.attach_data)
}
inline void IMGetFixTopListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetFixTopListRsp.attach_data)
}
inline void IMGetFixTopListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetFixTopListRsp.attach_data)
}
inline ::std::string* IMGetFixTopListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetFixTopListRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetFixTopListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetFixTopListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetFixTopListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFrequentContactReq

// required uint32 company_id = 1;
inline bool IMFrequentContactReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFrequentContactReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFrequentContactReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFrequentContactReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMFrequentContactReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactReq.company_id)
  return company_id_;
}
inline void IMFrequentContactReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMFrequentContactReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFrequentContactReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFrequentContactReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFrequentContactReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMFrequentContactReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactReq.user_id)
  return user_id_;
}
inline void IMFrequentContactReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactReq.user_id)
}

// required uint64 update_time = 3;
inline bool IMFrequentContactReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFrequentContactReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFrequentContactReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFrequentContactReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMFrequentContactReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactReq.update_time)
  return update_time_;
}
inline void IMFrequentContactReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactReq.update_time)
}

// optional bytes attach_data = 20;
inline bool IMFrequentContactReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFrequentContactReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFrequentContactReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFrequentContactReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFrequentContactReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactReq.attach_data)
  return *attach_data_;
}
inline void IMFrequentContactReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactReq.attach_data)
}
inline void IMFrequentContactReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFrequentContactReq.attach_data)
}
inline void IMFrequentContactReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFrequentContactReq.attach_data)
}
inline ::std::string* IMFrequentContactReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFrequentContactReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMFrequentContactReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFrequentContactReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFrequentContactReq.attach_data)
}

// -------------------------------------------------------------------

// IMFrequentContactRsp

// required uint64 update_time = 1;
inline bool IMFrequentContactRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFrequentContactRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFrequentContactRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFrequentContactRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMFrequentContactRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactRsp.update_time)
  return update_time_;
}
inline void IMFrequentContactRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactRsp.update_time)
}

// required uint32 is_more_data = 2;
inline bool IMFrequentContactRsp::has_is_more_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFrequentContactRsp::set_has_is_more_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFrequentContactRsp::clear_has_is_more_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFrequentContactRsp::clear_is_more_data() {
  is_more_data_ = 0u;
  clear_has_is_more_data();
}
inline ::google::protobuf::uint32 IMFrequentContactRsp::is_more_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactRsp.is_more_data)
  return is_more_data_;
}
inline void IMFrequentContactRsp::set_is_more_data(::google::protobuf::uint32 value) {
  set_has_is_more_data();
  is_more_data_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactRsp.is_more_data)
}

// repeated .IM.BaseDefine.FrequentContactInfo frequent_baseinfo_list = 3;
inline int IMFrequentContactRsp::frequent_baseinfo_list_size() const {
  return frequent_baseinfo_list_.size();
}
inline void IMFrequentContactRsp::clear_frequent_baseinfo_list() {
  frequent_baseinfo_list_.Clear();
}
inline const ::IM::BaseDefine::FrequentContactInfo& IMFrequentContactRsp::frequent_baseinfo_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactRsp.frequent_baseinfo_list)
  return frequent_baseinfo_list_.Get(index);
}
inline ::IM::BaseDefine::FrequentContactInfo* IMFrequentContactRsp::mutable_frequent_baseinfo_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFrequentContactRsp.frequent_baseinfo_list)
  return frequent_baseinfo_list_.Mutable(index);
}
inline ::IM::BaseDefine::FrequentContactInfo* IMFrequentContactRsp::add_frequent_baseinfo_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMFrequentContactRsp.frequent_baseinfo_list)
  return frequent_baseinfo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::FrequentContactInfo >&
IMFrequentContactRsp::frequent_baseinfo_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMFrequentContactRsp.frequent_baseinfo_list)
  return frequent_baseinfo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::FrequentContactInfo >*
IMFrequentContactRsp::mutable_frequent_baseinfo_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMFrequentContactRsp.frequent_baseinfo_list)
  return &frequent_baseinfo_list_;
}

// optional bytes attach_data = 20;
inline bool IMFrequentContactRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFrequentContactRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFrequentContactRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFrequentContactRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFrequentContactRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFrequentContactRsp.attach_data)
  return *attach_data_;
}
inline void IMFrequentContactRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFrequentContactRsp.attach_data)
}
inline void IMFrequentContactRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFrequentContactRsp.attach_data)
}
inline void IMFrequentContactRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFrequentContactRsp.attach_data)
}
inline ::std::string* IMFrequentContactRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFrequentContactRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMFrequentContactRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFrequentContactRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFrequentContactRsp.attach_data)
}

// -------------------------------------------------------------------

// IMSingleUserInfoReq

// required uint32 company_id = 1;
inline bool IMSingleUserInfoReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMSingleUserInfoReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMSingleUserInfoReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMSingleUserInfoReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMSingleUserInfoReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSingleUserInfoReq.company_id)
  return company_id_;
}
inline void IMSingleUserInfoReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSingleUserInfoReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMSingleUserInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMSingleUserInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMSingleUserInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMSingleUserInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMSingleUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSingleUserInfoReq.user_id)
  return user_id_;
}
inline void IMSingleUserInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSingleUserInfoReq.user_id)
}

// repeated .IM.BaseDefine.UserIdItem user_id_list = 3;
inline int IMSingleUserInfoReq::user_id_list_size() const {
  return user_id_list_.size();
}
inline void IMSingleUserInfoReq::clear_user_id_list() {
  user_id_list_.Clear();
}
inline const ::IM::BaseDefine::UserIdItem& IMSingleUserInfoReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSingleUserInfoReq.user_id_list)
  return user_id_list_.Get(index);
}
inline ::IM::BaseDefine::UserIdItem* IMSingleUserInfoReq::mutable_user_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSingleUserInfoReq.user_id_list)
  return user_id_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserIdItem* IMSingleUserInfoReq::add_user_id_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMSingleUserInfoReq.user_id_list)
  return user_id_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >&
IMSingleUserInfoReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMSingleUserInfoReq.user_id_list)
  return user_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserIdItem >*
IMSingleUserInfoReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMSingleUserInfoReq.user_id_list)
  return &user_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMSingleUserInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMSingleUserInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMSingleUserInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMSingleUserInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMSingleUserInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSingleUserInfoReq.attach_data)
  return *attach_data_;
}
inline void IMSingleUserInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSingleUserInfoReq.attach_data)
}
inline void IMSingleUserInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSingleUserInfoReq.attach_data)
}
inline void IMSingleUserInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSingleUserInfoReq.attach_data)
}
inline ::std::string* IMSingleUserInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSingleUserInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMSingleUserInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSingleUserInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSingleUserInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMSingleUserInfoRsp

// repeated .IM.BaseDefine.UserInfo user_info_list = 3;
inline int IMSingleUserInfoRsp::user_info_list_size() const {
  return user_info_list_.size();
}
inline void IMSingleUserInfoRsp::clear_user_info_list() {
  user_info_list_.Clear();
}
inline const ::IM::BaseDefine::UserInfo& IMSingleUserInfoRsp::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSingleUserInfoRsp.user_info_list)
  return user_info_list_.Get(index);
}
inline ::IM::BaseDefine::UserInfo* IMSingleUserInfoRsp::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSingleUserInfoRsp.user_info_list)
  return user_info_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserInfo* IMSingleUserInfoRsp::add_user_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMSingleUserInfoRsp.user_info_list)
  return user_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMSingleUserInfoRsp::user_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMSingleUserInfoRsp.user_info_list)
  return user_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMSingleUserInfoRsp::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMSingleUserInfoRsp.user_info_list)
  return &user_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMSingleUserInfoRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMSingleUserInfoRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMSingleUserInfoRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMSingleUserInfoRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMSingleUserInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSingleUserInfoRsp.attach_data)
  return *attach_data_;
}
inline void IMSingleUserInfoRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSingleUserInfoRsp.attach_data)
}
inline void IMSingleUserInfoRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSingleUserInfoRsp.attach_data)
}
inline void IMSingleUserInfoRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSingleUserInfoRsp.attach_data)
}
inline ::std::string* IMSingleUserInfoRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSingleUserInfoRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMSingleUserInfoRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSingleUserInfoRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSingleUserInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMAllUserReq

// required uint32 company_id = 1;
inline bool IMAllUserReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAllUserReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAllUserReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAllUserReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMAllUserReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.company_id)
  return company_id_;
}
inline void IMAllUserReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMAllUserReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAllUserReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAllUserReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAllUserReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMAllUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.user_id)
  return user_id_;
}
inline void IMAllUserReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.user_id)
}

// required uint64 update_time = 3;
inline bool IMAllUserReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAllUserReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAllUserReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAllUserReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMAllUserReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.update_time)
  return update_time_;
}
inline void IMAllUserReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.update_time)
}

// optional bytes attach_data = 20;
inline bool IMAllUserReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAllUserReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAllUserReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAllUserReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAllUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.attach_data)
  return *attach_data_;
}
inline void IMAllUserReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.attach_data)
}
inline void IMAllUserReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserReq.attach_data)
}
inline void IMAllUserReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserReq.attach_data)
}
inline ::std::string* IMAllUserReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMAllUserReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAllUserReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMAllUserRsp

// required uint64 update_time = 1;
inline bool IMAllUserRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAllUserRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAllUserRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAllUserRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMAllUserRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.update_time)
  return update_time_;
}
inline void IMAllUserRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.update_time)
}

// required uint32 is_more_data = 2;
inline bool IMAllUserRsp::has_is_more_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAllUserRsp::set_has_is_more_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAllUserRsp::clear_has_is_more_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAllUserRsp::clear_is_more_data() {
  is_more_data_ = 0u;
  clear_has_is_more_data();
}
inline ::google::protobuf::uint32 IMAllUserRsp::is_more_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.is_more_data)
  return is_more_data_;
}
inline void IMAllUserRsp::set_is_more_data(::google::protobuf::uint32 value) {
  set_has_is_more_data();
  is_more_data_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.is_more_data)
}

// repeated .IM.BaseDefine.UserInfo user_list = 3;
inline int IMAllUserRsp::user_list_size() const {
  return user_list_.size();
}
inline void IMAllUserRsp::clear_user_list() {
  user_list_.Clear();
}
inline const ::IM::BaseDefine::UserInfo& IMAllUserRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Get(index);
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMAllUserRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMAllUserRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMAllUserRsp.user_list)
  return &user_list_;
}

// optional bytes attach_data = 20;
inline bool IMAllUserRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAllUserRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAllUserRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAllUserRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAllUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.attach_data)
  return *attach_data_;
}
inline void IMAllUserRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.attach_data)
}
inline void IMAllUserRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserRsp.attach_data)
}
inline void IMAllUserRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserRsp.attach_data)
}
inline ::std::string* IMAllUserRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMAllUserRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAllUserRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserRsp.attach_data)
}

// -------------------------------------------------------------------

// IMServerNotifyClient

// required uint32 company_id = 1;
inline bool IMServerNotifyClient::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMServerNotifyClient::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMServerNotifyClient::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMServerNotifyClient::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMServerNotifyClient::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMServerNotifyClient.company_id)
  return company_id_;
}
inline void IMServerNotifyClient::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMServerNotifyClient.company_id)
}

// required uint32 user_id = 2;
inline bool IMServerNotifyClient::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMServerNotifyClient::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMServerNotifyClient::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMServerNotifyClient::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMServerNotifyClient::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMServerNotifyClient.user_id)
  return user_id_;
}
inline void IMServerNotifyClient::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMServerNotifyClient.user_id)
}

// required .IM.BaseDefine.ServerNotifyType notify_type = 3;
inline bool IMServerNotifyClient::has_notify_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMServerNotifyClient::set_has_notify_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMServerNotifyClient::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMServerNotifyClient::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::IM::BaseDefine::ServerNotifyType IMServerNotifyClient::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMServerNotifyClient.notify_type)
  return static_cast< ::IM::BaseDefine::ServerNotifyType >(notify_type_);
}
inline void IMServerNotifyClient::set_notify_type(::IM::BaseDefine::ServerNotifyType value) {
  assert(::IM::BaseDefine::ServerNotifyType_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMServerNotifyClient.notify_type)
}

// -------------------------------------------------------------------

// IMAvatarChangedNotify

// required uint32 company_id = 1;
inline bool IMAvatarChangedNotify::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAvatarChangedNotify::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAvatarChangedNotify::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAvatarChangedNotify::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMAvatarChangedNotify::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.company_id)
  return company_id_;
}
inline void IMAvatarChangedNotify::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.company_id)
}

// required uint32 changed_user_id = 2;
inline bool IMAvatarChangedNotify::has_changed_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAvatarChangedNotify::set_has_changed_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAvatarChangedNotify::clear_has_changed_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAvatarChangedNotify::clear_changed_user_id() {
  changed_user_id_ = 0u;
  clear_has_changed_user_id();
}
inline ::google::protobuf::uint32 IMAvatarChangedNotify::changed_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.changed_user_id)
  return changed_user_id_;
}
inline void IMAvatarChangedNotify::set_changed_user_id(::google::protobuf::uint32 value) {
  set_has_changed_user_id();
  changed_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.changed_user_id)
}

// required string avatar_url = 3;
inline bool IMAvatarChangedNotify::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAvatarChangedNotify::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAvatarChangedNotify::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAvatarChangedNotify::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& IMAvatarChangedNotify::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return *avatar_url_;
}
inline void IMAvatarChangedNotify::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline void IMAvatarChangedNotify::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline void IMAvatarChangedNotify::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline ::std::string* IMAvatarChangedNotify::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return avatar_url_;
}
inline ::std::string* IMAvatarChangedNotify::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAvatarChangedNotify::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}

// required uint64 update_time = 4;
inline bool IMAvatarChangedNotify::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAvatarChangedNotify::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAvatarChangedNotify::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAvatarChangedNotify::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMAvatarChangedNotify::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.update_time)
  return update_time_;
}
inline void IMAvatarChangedNotify::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.update_time)
}

// -------------------------------------------------------------------

// IMChangeAvatarReq

// required uint32 company_id = 1;
inline bool IMChangeAvatarReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChangeAvatarReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChangeAvatarReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChangeAvatarReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMChangeAvatarReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.company_id)
  return company_id_;
}
inline void IMChangeAvatarReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMChangeAvatarReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChangeAvatarReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChangeAvatarReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChangeAvatarReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChangeAvatarReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.user_id)
  return user_id_;
}
inline void IMChangeAvatarReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.user_id)
}

// required string avatar_url = 3;
inline bool IMChangeAvatarReq::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChangeAvatarReq::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChangeAvatarReq::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChangeAvatarReq::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& IMChangeAvatarReq::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return *avatar_url_;
}
inline void IMChangeAvatarReq::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline void IMChangeAvatarReq::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline void IMChangeAvatarReq::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline ::std::string* IMChangeAvatarReq::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return avatar_url_;
}
inline ::std::string* IMChangeAvatarReq::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarReq::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.avatar_url)
}

// required .IM.BaseDefine.SessionType session_type = 4;
inline bool IMChangeAvatarReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMChangeAvatarReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMChangeAvatarReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMChangeAvatarReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMChangeAvatarReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMChangeAvatarReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.session_type)
}

// optional bytes attach_data = 20;
inline bool IMChangeAvatarReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMChangeAvatarReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMChangeAvatarReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMChangeAvatarReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChangeAvatarReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.attach_data)
  return *attach_data_;
}
inline void IMChangeAvatarReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline void IMChangeAvatarReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline void IMChangeAvatarReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline ::std::string* IMChangeAvatarReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMChangeAvatarReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.attach_data)
}

// -------------------------------------------------------------------

// IMChangeAvatarRsp

// required uint32 result_code = 1;
inline bool IMChangeAvatarRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChangeAvatarRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChangeAvatarRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChangeAvatarRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMChangeAvatarRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.result_code)
  return result_code_;
}
inline void IMChangeAvatarRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.result_code)
}

// required uint64 update_time = 2;
inline bool IMChangeAvatarRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChangeAvatarRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChangeAvatarRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChangeAvatarRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMChangeAvatarRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.update_time)
  return update_time_;
}
inline void IMChangeAvatarRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.update_time)
}

// optional bytes attach_data = 20;
inline bool IMChangeAvatarRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChangeAvatarRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChangeAvatarRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChangeAvatarRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChangeAvatarRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return *attach_data_;
}
inline void IMChangeAvatarRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline void IMChangeAvatarRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline void IMChangeAvatarRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline ::std::string* IMChangeAvatarRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMChangeAvatarRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarRsp.attach_data)
}

// -------------------------------------------------------------------

// IMSignInfoChangedNotify

// required uint32 company_id = 1;
inline bool IMSignInfoChangedNotify::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMSignInfoChangedNotify::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMSignInfoChangedNotify::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMSignInfoChangedNotify::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMSignInfoChangedNotify::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.company_id)
  return company_id_;
}
inline void IMSignInfoChangedNotify::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.company_id)
}

// required uint32 changed_user_id = 2;
inline bool IMSignInfoChangedNotify::has_changed_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMSignInfoChangedNotify::set_has_changed_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMSignInfoChangedNotify::clear_has_changed_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMSignInfoChangedNotify::clear_changed_user_id() {
  changed_user_id_ = 0u;
  clear_has_changed_user_id();
}
inline ::google::protobuf::uint32 IMSignInfoChangedNotify::changed_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
  return changed_user_id_;
}
inline void IMSignInfoChangedNotify::set_changed_user_id(::google::protobuf::uint32 value) {
  set_has_changed_user_id();
  changed_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}

// required string sign_info = 3;
inline bool IMSignInfoChangedNotify::has_sign_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMSignInfoChangedNotify::set_has_sign_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMSignInfoChangedNotify::clear_has_sign_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMSignInfoChangedNotify::clear_sign_info() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_->clear();
  }
  clear_has_sign_info();
}
inline const ::std::string& IMSignInfoChangedNotify::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return *sign_info_;
}
inline void IMSignInfoChangedNotify::set_sign_info(const ::std::string& value) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline void IMSignInfoChangedNotify::set_sign_info(const char* value) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline void IMSignInfoChangedNotify::set_sign_info(const char* value, size_t size) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline ::std::string* IMSignInfoChangedNotify::mutable_sign_info() {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return sign_info_;
}
inline ::std::string* IMSignInfoChangedNotify::release_sign_info() {
  clear_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_info_;
    sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSignInfoChangedNotify::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (sign_info) {
    set_has_sign_info();
    sign_info_ = sign_info;
  } else {
    clear_has_sign_info();
    sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}

// -------------------------------------------------------------------

// IMChangeSignInfoReq

// required uint32 company_id = 1;
inline bool IMChangeSignInfoReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChangeSignInfoReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChangeSignInfoReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChangeSignInfoReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMChangeSignInfoReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.company_id)
  return company_id_;
}
inline void IMChangeSignInfoReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.company_id)
}

// required uint32 user_id = 2;
inline bool IMChangeSignInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChangeSignInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChangeSignInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChangeSignInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChangeSignInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.user_id)
  return user_id_;
}
inline void IMChangeSignInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.user_id)
}

// required string sign_info = 3;
inline bool IMChangeSignInfoReq::has_sign_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChangeSignInfoReq::set_has_sign_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChangeSignInfoReq::clear_has_sign_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChangeSignInfoReq::clear_sign_info() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_->clear();
  }
  clear_has_sign_info();
}
inline const ::std::string& IMChangeSignInfoReq::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return *sign_info_;
}
inline void IMChangeSignInfoReq::set_sign_info(const ::std::string& value) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline void IMChangeSignInfoReq::set_sign_info(const char* value) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline void IMChangeSignInfoReq::set_sign_info(const char* value, size_t size) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline ::std::string* IMChangeSignInfoReq::mutable_sign_info() {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return sign_info_;
}
inline ::std::string* IMChangeSignInfoReq::release_sign_info() {
  clear_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_info_;
    sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeSignInfoReq::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (sign_info) {
    set_has_sign_info();
    sign_info_ = sign_info;
  } else {
    clear_has_sign_info();
    sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.sign_info)
}

// optional bytes attach_data = 20;
inline bool IMChangeSignInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMChangeSignInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMChangeSignInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMChangeSignInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChangeSignInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return *attach_data_;
}
inline void IMChangeSignInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline void IMChangeSignInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline void IMChangeSignInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline ::std::string* IMChangeSignInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMChangeSignInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeSignInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMChangeSignInfoRsp

// required uint32 result_code = 1;
inline bool IMChangeSignInfoRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChangeSignInfoRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChangeSignInfoRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChangeSignInfoRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMChangeSignInfoRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.result_code)
  return result_code_;
}
inline void IMChangeSignInfoRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.result_code)
}

// required uint64 update_time = 2;
inline bool IMChangeSignInfoRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChangeSignInfoRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChangeSignInfoRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChangeSignInfoRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMChangeSignInfoRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.update_time)
  return update_time_;
}
inline void IMChangeSignInfoRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.update_time)
}

// optional bytes attach_data = 20;
inline bool IMChangeSignInfoRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChangeSignInfoRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChangeSignInfoRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChangeSignInfoRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChangeSignInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return *attach_data_;
}
inline void IMChangeSignInfoRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline void IMChangeSignInfoRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline void IMChangeSignInfoRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline ::std::string* IMChangeSignInfoRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMChangeSignInfoRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeSignInfoRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMModifyUserInfoReq

// required uint32 from_user_id = 1;
inline bool IMModifyUserInfoReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMModifyUserInfoReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMModifyUserInfoReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMModifyUserInfoReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMModifyUserInfoReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModifyUserInfoReq.from_user_id)
  return from_user_id_;
}
inline void IMModifyUserInfoReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModifyUserInfoReq.from_user_id)
}

// required uint32 from_company_id = 2;
inline bool IMModifyUserInfoReq::has_from_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMModifyUserInfoReq::set_has_from_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMModifyUserInfoReq::clear_has_from_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMModifyUserInfoReq::clear_from_company_id() {
  from_company_id_ = 0u;
  clear_has_from_company_id();
}
inline ::google::protobuf::uint32 IMModifyUserInfoReq::from_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModifyUserInfoReq.from_company_id)
  return from_company_id_;
}
inline void IMModifyUserInfoReq::set_from_company_id(::google::protobuf::uint32 value) {
  set_has_from_company_id();
  from_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModifyUserInfoReq.from_company_id)
}

// required .IM.BaseDefine.UserInfo user_info = 3;
inline bool IMModifyUserInfoReq::has_user_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMModifyUserInfoReq::set_has_user_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMModifyUserInfoReq::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMModifyUserInfoReq::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMModifyUserInfoReq::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModifyUserInfoReq.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMModifyUserInfoReq::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMModifyUserInfoReq.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMModifyUserInfoReq::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMModifyUserInfoReq::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMModifyUserInfoReq.user_info)
}

// -------------------------------------------------------------------

// IMModifyUserInfoRsp

// required .IM.BaseDefine.OptResultCode result = 1;
inline bool IMModifyUserInfoRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMModifyUserInfoRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMModifyUserInfoRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMModifyUserInfoRsp::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::IM::BaseDefine::OptResultCode IMModifyUserInfoRsp::result() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModifyUserInfoRsp.result)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_);
}
inline void IMModifyUserInfoRsp::set_result(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModifyUserInfoRsp.result)
}

// required uint64 update_time = 2;
inline bool IMModifyUserInfoRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMModifyUserInfoRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMModifyUserInfoRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMModifyUserInfoRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMModifyUserInfoRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModifyUserInfoRsp.update_time)
  return update_time_;
}
inline void IMModifyUserInfoRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModifyUserInfoRsp.update_time)
}

// -------------------------------------------------------------------

// IMLoginStatusNotify

// required uint32 company_id = 1;
inline bool IMLoginStatusNotify::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginStatusNotify::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginStatusNotify::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginStatusNotify::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMLoginStatusNotify::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMLoginStatusNotify.company_id)
  return company_id_;
}
inline void IMLoginStatusNotify::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMLoginStatusNotify.company_id)
}

// required uint32 user_id = 2;
inline bool IMLoginStatusNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginStatusNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginStatusNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginStatusNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMLoginStatusNotify.user_id)
  return user_id_;
}
inline void IMLoginStatusNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMLoginStatusNotify.user_id)
}

// required uint32 device_type = 3;
inline bool IMLoginStatusNotify::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginStatusNotify::set_has_device_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginStatusNotify::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginStatusNotify::clear_device_type() {
  device_type_ = 0u;
  clear_has_device_type();
}
inline ::google::protobuf::uint32 IMLoginStatusNotify::device_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMLoginStatusNotify.device_type)
  return device_type_;
}
inline void IMLoginStatusNotify::set_device_type(::google::protobuf::uint32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMLoginStatusNotify.device_type)
}

// required .IM.BaseDefine.UserStatType login_stat = 4;
inline bool IMLoginStatusNotify::has_login_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginStatusNotify::set_has_login_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginStatusNotify::clear_has_login_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginStatusNotify::clear_login_stat() {
  login_stat_ = 1;
  clear_has_login_stat();
}
inline ::IM::BaseDefine::UserStatType IMLoginStatusNotify::login_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMLoginStatusNotify.login_stat)
  return static_cast< ::IM::BaseDefine::UserStatType >(login_stat_);
}
inline void IMLoginStatusNotify::set_login_stat(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_login_stat();
  login_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMLoginStatusNotify.login_stat)
}

// -------------------------------------------------------------------

// IMOptBuddyReq

// required uint32 req_user_id = 1;
inline bool IMOptBuddyReq::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMOptBuddyReq::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMOptBuddyReq::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMOptBuddyReq::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyReq::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.req_user_id)
  return req_user_id_;
}
inline void IMOptBuddyReq::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMOptBuddyReq::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMOptBuddyReq::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMOptBuddyReq::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMOptBuddyReq::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyReq::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.req_company_id)
  return req_company_id_;
}
inline void IMOptBuddyReq::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMOptBuddyReq::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMOptBuddyReq::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMOptBuddyReq::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMOptBuddyReq::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyReq::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.dest_user_id)
  return dest_user_id_;
}
inline void IMOptBuddyReq::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMOptBuddyReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMOptBuddyReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMOptBuddyReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMOptBuddyReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.dest_company_id)
  return dest_company_id_;
}
inline void IMOptBuddyReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.dest_company_id)
}

// required uint64 create_time = 5;
inline bool IMOptBuddyReq::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMOptBuddyReq::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMOptBuddyReq::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMOptBuddyReq::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 IMOptBuddyReq::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.create_time)
  return create_time_;
}
inline void IMOptBuddyReq::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.create_time)
}

// required .IM.BaseDefine.BuddyOptType opt_type = 6;
inline bool IMOptBuddyReq::has_opt_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMOptBuddyReq::set_has_opt_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMOptBuddyReq::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMOptBuddyReq::clear_opt_type() {
  opt_type_ = 1;
  clear_has_opt_type();
}
inline ::IM::BaseDefine::BuddyOptType IMOptBuddyReq::opt_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.opt_type)
  return static_cast< ::IM::BaseDefine::BuddyOptType >(opt_type_);
}
inline void IMOptBuddyReq::set_opt_type(::IM::BaseDefine::BuddyOptType value) {
  assert(::IM::BaseDefine::BuddyOptType_IsValid(value));
  set_has_opt_type();
  opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.opt_type)
}

// required string opt_remark = 7;
inline bool IMOptBuddyReq::has_opt_remark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMOptBuddyReq::set_has_opt_remark() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMOptBuddyReq::clear_has_opt_remark() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMOptBuddyReq::clear_opt_remark() {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_->clear();
  }
  clear_has_opt_remark();
}
inline const ::std::string& IMOptBuddyReq::opt_remark() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyReq.opt_remark)
  return *opt_remark_;
}
inline void IMOptBuddyReq::set_opt_remark(const ::std::string& value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyReq.opt_remark)
}
inline void IMOptBuddyReq::set_opt_remark(const char* value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMOptBuddyReq.opt_remark)
}
inline void IMOptBuddyReq::set_opt_remark(const char* value, size_t size) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMOptBuddyReq.opt_remark)
}
inline ::std::string* IMOptBuddyReq::mutable_opt_remark() {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMOptBuddyReq.opt_remark)
  return opt_remark_;
}
inline ::std::string* IMOptBuddyReq::release_opt_remark() {
  clear_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_remark_;
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMOptBuddyReq::set_allocated_opt_remark(::std::string* opt_remark) {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_remark_;
  }
  if (opt_remark) {
    set_has_opt_remark();
    opt_remark_ = opt_remark;
  } else {
    clear_has_opt_remark();
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMOptBuddyReq.opt_remark)
}

// -------------------------------------------------------------------

// IMOptBuddyRsp

// required uint32 req_user_id = 1;
inline bool IMOptBuddyRsp::has_req_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMOptBuddyRsp::set_has_req_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMOptBuddyRsp::clear_has_req_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMOptBuddyRsp::clear_req_user_id() {
  req_user_id_ = 0u;
  clear_has_req_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyRsp::req_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.req_user_id)
  return req_user_id_;
}
inline void IMOptBuddyRsp::set_req_user_id(::google::protobuf::uint32 value) {
  set_has_req_user_id();
  req_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.req_user_id)
}

// required uint32 req_company_id = 2;
inline bool IMOptBuddyRsp::has_req_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMOptBuddyRsp::set_has_req_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMOptBuddyRsp::clear_has_req_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMOptBuddyRsp::clear_req_company_id() {
  req_company_id_ = 0u;
  clear_has_req_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyRsp::req_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.req_company_id)
  return req_company_id_;
}
inline void IMOptBuddyRsp::set_req_company_id(::google::protobuf::uint32 value) {
  set_has_req_company_id();
  req_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.req_company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMOptBuddyRsp::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMOptBuddyRsp::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMOptBuddyRsp::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMOptBuddyRsp::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMOptBuddyRsp::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.dest_user_id)
  return dest_user_id_;
}
inline void IMOptBuddyRsp::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMOptBuddyRsp::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMOptBuddyRsp::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMOptBuddyRsp::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMOptBuddyRsp::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMOptBuddyRsp::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.dest_company_id)
  return dest_company_id_;
}
inline void IMOptBuddyRsp::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.dest_company_id)
}

// required uint64 response_time = 5;
inline bool IMOptBuddyRsp::has_response_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMOptBuddyRsp::set_has_response_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMOptBuddyRsp::clear_has_response_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMOptBuddyRsp::clear_response_time() {
  response_time_ = GOOGLE_ULONGLONG(0);
  clear_has_response_time();
}
inline ::google::protobuf::uint64 IMOptBuddyRsp::response_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.response_time)
  return response_time_;
}
inline void IMOptBuddyRsp::set_response_time(::google::protobuf::uint64 value) {
  set_has_response_time();
  response_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.response_time)
}

// required .IM.BaseDefine.BuddyOptType opt_type = 7;
inline bool IMOptBuddyRsp::has_opt_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMOptBuddyRsp::set_has_opt_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMOptBuddyRsp::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMOptBuddyRsp::clear_opt_type() {
  opt_type_ = 1;
  clear_has_opt_type();
}
inline ::IM::BaseDefine::BuddyOptType IMOptBuddyRsp::opt_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.opt_type)
  return static_cast< ::IM::BaseDefine::BuddyOptType >(opt_type_);
}
inline void IMOptBuddyRsp::set_opt_type(::IM::BaseDefine::BuddyOptType value) {
  assert(::IM::BaseDefine::BuddyOptType_IsValid(value));
  set_has_opt_type();
  opt_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.opt_type)
}

// required .IM.BaseDefine.OptResultCode result = 8;
inline bool IMOptBuddyRsp::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMOptBuddyRsp::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMOptBuddyRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMOptBuddyRsp::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::IM::BaseDefine::OptResultCode IMOptBuddyRsp::result() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.result)
  return static_cast< ::IM::BaseDefine::OptResultCode >(result_);
}
inline void IMOptBuddyRsp::set_result(::IM::BaseDefine::OptResultCode value) {
  assert(::IM::BaseDefine::OptResultCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.result)
}

// required string opt_remark = 9;
inline bool IMOptBuddyRsp::has_opt_remark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMOptBuddyRsp::set_has_opt_remark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMOptBuddyRsp::clear_has_opt_remark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMOptBuddyRsp::clear_opt_remark() {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_->clear();
  }
  clear_has_opt_remark();
}
inline const ::std::string& IMOptBuddyRsp::opt_remark() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMOptBuddyRsp.opt_remark)
  return *opt_remark_;
}
inline void IMOptBuddyRsp::set_opt_remark(const ::std::string& value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMOptBuddyRsp.opt_remark)
}
inline void IMOptBuddyRsp::set_opt_remark(const char* value) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMOptBuddyRsp.opt_remark)
}
inline void IMOptBuddyRsp::set_opt_remark(const char* value, size_t size) {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  opt_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMOptBuddyRsp.opt_remark)
}
inline ::std::string* IMOptBuddyRsp::mutable_opt_remark() {
  set_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMOptBuddyRsp.opt_remark)
  return opt_remark_;
}
inline ::std::string* IMOptBuddyRsp::release_opt_remark() {
  clear_has_opt_remark();
  if (opt_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_remark_;
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMOptBuddyRsp::set_allocated_opt_remark(::std::string* opt_remark) {
  if (opt_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_remark_;
  }
  if (opt_remark) {
    set_has_opt_remark();
    opt_remark_ = opt_remark;
  } else {
    clear_has_opt_remark();
    opt_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMOptBuddyRsp.opt_remark)
}

// -------------------------------------------------------------------

// IMModiNickNameReq

// required uint32 user_id = 1;
inline bool IMModiNickNameReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMModiNickNameReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMModiNickNameReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMModiNickNameReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMModiNickNameReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameReq.user_id)
  return user_id_;
}
inline void IMModiNickNameReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameReq.user_id)
}

// required uint32 company_id = 2;
inline bool IMModiNickNameReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMModiNickNameReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMModiNickNameReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMModiNickNameReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMModiNickNameReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameReq.company_id)
  return company_id_;
}
inline void IMModiNickNameReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameReq.company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMModiNickNameReq::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMModiNickNameReq::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMModiNickNameReq::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMModiNickNameReq::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMModiNickNameReq::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameReq.dest_user_id)
  return dest_user_id_;
}
inline void IMModiNickNameReq::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameReq.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMModiNickNameReq::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMModiNickNameReq::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMModiNickNameReq::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMModiNickNameReq::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMModiNickNameReq::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameReq.dest_company_id)
  return dest_company_id_;
}
inline void IMModiNickNameReq::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameReq.dest_company_id)
}

// required bytes nick_name = 20;
inline bool IMModiNickNameReq::has_nick_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMModiNickNameReq::set_has_nick_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMModiNickNameReq::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMModiNickNameReq::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& IMModiNickNameReq::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameReq.nick_name)
  return *nick_name_;
}
inline void IMModiNickNameReq::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameReq.nick_name)
}
inline void IMModiNickNameReq::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMModiNickNameReq.nick_name)
}
inline void IMModiNickNameReq::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMModiNickNameReq.nick_name)
}
inline ::std::string* IMModiNickNameReq::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMModiNickNameReq.nick_name)
  return nick_name_;
}
inline ::std::string* IMModiNickNameReq::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMModiNickNameReq::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMModiNickNameReq.nick_name)
}

// -------------------------------------------------------------------

// IMModiNickNameRsp

// required uint32 user_id = 1;
inline bool IMModiNickNameRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMModiNickNameRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMModiNickNameRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMModiNickNameRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMModiNickNameRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameRsp.user_id)
  return user_id_;
}
inline void IMModiNickNameRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameRsp.user_id)
}

// required uint32 company_id = 2;
inline bool IMModiNickNameRsp::has_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMModiNickNameRsp::set_has_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMModiNickNameRsp::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMModiNickNameRsp::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMModiNickNameRsp::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameRsp.company_id)
  return company_id_;
}
inline void IMModiNickNameRsp::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameRsp.company_id)
}

// required uint32 dest_user_id = 3;
inline bool IMModiNickNameRsp::has_dest_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMModiNickNameRsp::set_has_dest_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMModiNickNameRsp::clear_has_dest_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMModiNickNameRsp::clear_dest_user_id() {
  dest_user_id_ = 0u;
  clear_has_dest_user_id();
}
inline ::google::protobuf::uint32 IMModiNickNameRsp::dest_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameRsp.dest_user_id)
  return dest_user_id_;
}
inline void IMModiNickNameRsp::set_dest_user_id(::google::protobuf::uint32 value) {
  set_has_dest_user_id();
  dest_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameRsp.dest_user_id)
}

// required uint32 dest_company_id = 4;
inline bool IMModiNickNameRsp::has_dest_company_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMModiNickNameRsp::set_has_dest_company_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMModiNickNameRsp::clear_has_dest_company_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMModiNickNameRsp::clear_dest_company_id() {
  dest_company_id_ = 0u;
  clear_has_dest_company_id();
}
inline ::google::protobuf::uint32 IMModiNickNameRsp::dest_company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameRsp.dest_company_id)
  return dest_company_id_;
}
inline void IMModiNickNameRsp::set_dest_company_id(::google::protobuf::uint32 value) {
  set_has_dest_company_id();
  dest_company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameRsp.dest_company_id)
}

// required bytes nick_name = 5;
inline bool IMModiNickNameRsp::has_nick_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMModiNickNameRsp::set_has_nick_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMModiNickNameRsp::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMModiNickNameRsp::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& IMModiNickNameRsp::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameRsp.nick_name)
  return *nick_name_;
}
inline void IMModiNickNameRsp::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameRsp.nick_name)
}
inline void IMModiNickNameRsp::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMModiNickNameRsp.nick_name)
}
inline void IMModiNickNameRsp::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMModiNickNameRsp.nick_name)
}
inline ::std::string* IMModiNickNameRsp::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMModiNickNameRsp.nick_name)
  return nick_name_;
}
inline ::std::string* IMModiNickNameRsp::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMModiNickNameRsp::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMModiNickNameRsp.nick_name)
}

// required uint64 update_time = 6;
inline bool IMModiNickNameRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMModiNickNameRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMModiNickNameRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMModiNickNameRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMModiNickNameRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMModiNickNameRsp.update_time)
  return update_time_;
}
inline void IMModiNickNameRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMModiNickNameRsp.update_time)
}

// -------------------------------------------------------------------

// IMGetBuddyReqListReq

// required uint32 user_id = 1;
inline bool IMGetBuddyReqListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetBuddyReqListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetBuddyReqListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetBuddyReqListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetBuddyReqListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListReq.user_id)
  return user_id_;
}
inline void IMGetBuddyReqListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListReq.user_id)
}

// required uint32 company_id = 2;
inline bool IMGetBuddyReqListReq::has_company_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetBuddyReqListReq::set_has_company_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetBuddyReqListReq::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetBuddyReqListReq::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 IMGetBuddyReqListReq::company_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListReq.company_id)
  return company_id_;
}
inline void IMGetBuddyReqListReq::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListReq.company_id)
}

// required uint64 update_time = 3;
inline bool IMGetBuddyReqListReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetBuddyReqListReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetBuddyReqListReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetBuddyReqListReq::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGetBuddyReqListReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListReq.update_time)
  return update_time_;
}
inline void IMGetBuddyReqListReq::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListReq.update_time)
}

// required uint32 pack_index = 4;
inline bool IMGetBuddyReqListReq::has_pack_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetBuddyReqListReq::set_has_pack_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetBuddyReqListReq::clear_has_pack_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetBuddyReqListReq::clear_pack_index() {
  pack_index_ = 0u;
  clear_has_pack_index();
}
inline ::google::protobuf::uint32 IMGetBuddyReqListReq::pack_index() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListReq.pack_index)
  return pack_index_;
}
inline void IMGetBuddyReqListReq::set_pack_index(::google::protobuf::uint32 value) {
  set_has_pack_index();
  pack_index_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListReq.pack_index)
}

// -------------------------------------------------------------------

// IMGetBuddyReqListRsp

// required uint64 update_time = 1;
inline bool IMGetBuddyReqListRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetBuddyReqListRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetBuddyReqListRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetBuddyReqListRsp::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 IMGetBuddyReqListRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListRsp.update_time)
  return update_time_;
}
inline void IMGetBuddyReqListRsp::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListRsp.update_time)
}

// repeated .IM.BaseDefine.IMBuddyReqInfo BuddysReqs = 2;
inline int IMGetBuddyReqListRsp::buddysreqs_size() const {
  return buddysreqs_.size();
}
inline void IMGetBuddyReqListRsp::clear_buddysreqs() {
  buddysreqs_.Clear();
}
inline const ::IM::BaseDefine::IMBuddyReqInfo& IMGetBuddyReqListRsp::buddysreqs(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListRsp.BuddysReqs)
  return buddysreqs_.Get(index);
}
inline ::IM::BaseDefine::IMBuddyReqInfo* IMGetBuddyReqListRsp::mutable_buddysreqs(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetBuddyReqListRsp.BuddysReqs)
  return buddysreqs_.Mutable(index);
}
inline ::IM::BaseDefine::IMBuddyReqInfo* IMGetBuddyReqListRsp::add_buddysreqs() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMGetBuddyReqListRsp.BuddysReqs)
  return buddysreqs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMBuddyReqInfo >&
IMGetBuddyReqListRsp::buddysreqs() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMGetBuddyReqListRsp.BuddysReqs)
  return buddysreqs_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IMBuddyReqInfo >*
IMGetBuddyReqListRsp::mutable_buddysreqs() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMGetBuddyReqListRsp.BuddysReqs)
  return &buddysreqs_;
}

// required uint32 pack_index = 3;
inline bool IMGetBuddyReqListRsp::has_pack_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetBuddyReqListRsp::set_has_pack_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetBuddyReqListRsp::clear_has_pack_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetBuddyReqListRsp::clear_pack_index() {
  pack_index_ = 0u;
  clear_has_pack_index();
}
inline ::google::protobuf::uint32 IMGetBuddyReqListRsp::pack_index() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListRsp.pack_index)
  return pack_index_;
}
inline void IMGetBuddyReqListRsp::set_pack_index(::google::protobuf::uint32 value) {
  set_has_pack_index();
  pack_index_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListRsp.pack_index)
}

// required uint32 pack_count = 4;
inline bool IMGetBuddyReqListRsp::has_pack_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetBuddyReqListRsp::set_has_pack_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetBuddyReqListRsp::clear_has_pack_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetBuddyReqListRsp::clear_pack_count() {
  pack_count_ = 0u;
  clear_has_pack_count();
}
inline ::google::protobuf::uint32 IMGetBuddyReqListRsp::pack_count() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetBuddyReqListRsp.pack_count)
  return pack_count_;
}
inline void IMGetBuddyReqListRsp::set_pack_count(::google::protobuf::uint32 value) {
  set_has_pack_count();
  pack_count_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetBuddyReqListRsp.pack_count)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eBuddy_2eproto__INCLUDED
