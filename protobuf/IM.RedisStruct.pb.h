// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.RedisStruct.proto

#ifndef PROTOBUF_IM_2eRedisStruct_2eproto__INCLUDED
#define PROTOBUF_IM_2eRedisStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

class CompanyInfo;
class UserInfo;
class GlobalSesssion;
class ConnSessionItem;
class UserStat;
class UserFriendItem;
class UserFriendList;
class UserFriendVerItem;
class UserSession;
class UserRecentContractoritem;
class UserRecentChatList;
class GroupListItem;
class UserGroupList;
class GroupMemberItem;
class GroupMemberList;
class OrgGroupMemberItem;
class OrgGroupMemberList;
class OrgNode;
class OrgTree;
class CompanyUserList;

enum GroupType {
  GROUP_TYPE_NORMAL = 1,
  GROUP_TYPE_TMP = 2,
  GROUP_TYPE_ORG = 3,
  GROUP_TYPE_PUBLIC = 17
};
bool GroupType_IsValid(int value);
const GroupType GroupType_MIN = GROUP_TYPE_NORMAL;
const GroupType GroupType_MAX = GROUP_TYPE_PUBLIC;
const int GroupType_ARRAYSIZE = GroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GroupType_descriptor();
inline const ::std::string& GroupType_Name(GroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GroupType_descriptor(), value);
}
inline bool GroupType_Parse(
    const ::std::string& name, GroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GroupType>(
    GroupType_descriptor(), name, value);
}
// ===================================================================

class CompanyInfo : public ::google::protobuf::Message {
 public:
  CompanyInfo();
  virtual ~CompanyInfo();

  CompanyInfo(const CompanyInfo& from);

  inline CompanyInfo& operator=(const CompanyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompanyInfo& default_instance();

  void Swap(CompanyInfo* other);

  // implements Message ----------------------------------------------

  CompanyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompanyInfo& from);
  void MergeFrom(const CompanyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required string company_name = 2;
  inline bool has_company_name() const;
  inline void clear_company_name();
  static const int kCompanyNameFieldNumber = 2;
  inline const ::std::string& company_name() const;
  inline void set_company_name(const ::std::string& value);
  inline void set_company_name(const char* value);
  inline void set_company_name(const char* value, size_t size);
  inline ::std::string* mutable_company_name();
  inline ::std::string* release_company_name();
  inline void set_allocated_company_name(::std::string* company_name);

  // required string company_code = 3;
  inline bool has_company_code() const;
  inline void clear_company_code();
  static const int kCompanyCodeFieldNumber = 3;
  inline const ::std::string& company_code() const;
  inline void set_company_code(const ::std::string& value);
  inline void set_company_code(const char* value);
  inline void set_company_code(const char* value, size_t size);
  inline ::std::string* mutable_company_code();
  inline ::std::string* release_company_code();
  inline void set_allocated_company_code(::std::string* company_code);

  // required string company_scale = 4;
  inline bool has_company_scale() const;
  inline void clear_company_scale();
  static const int kCompanyScaleFieldNumber = 4;
  inline const ::std::string& company_scale() const;
  inline void set_company_scale(const ::std::string& value);
  inline void set_company_scale(const char* value);
  inline void set_company_scale(const char* value, size_t size);
  inline ::std::string* mutable_company_scale();
  inline ::std::string* release_company_scale();
  inline void set_allocated_company_scale(::std::string* company_scale);

  // required uint32 user_count = 5;
  inline bool has_user_count() const;
  inline void clear_user_count();
  static const int kUserCountFieldNumber = 5;
  inline ::google::protobuf::uint32 user_count() const;
  inline void set_user_count(::google::protobuf::uint32 value);

  // required uint32 active = 6;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 6;
  inline ::google::protobuf::uint32 active() const;
  inline void set_active(::google::protobuf::uint32 value);

  // required string address = 7;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 7;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required string country = 8;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 8;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // required int32 auth_status = 9;
  inline bool has_auth_status() const;
  inline void clear_auth_status();
  static const int kAuthStatusFieldNumber = 9;
  inline ::google::protobuf::int32 auth_status() const;
  inline void set_auth_status(::google::protobuf::int32 value);

  // required string contractor_name = 10;
  inline bool has_contractor_name() const;
  inline void clear_contractor_name();
  static const int kContractorNameFieldNumber = 10;
  inline const ::std::string& contractor_name() const;
  inline void set_contractor_name(const ::std::string& value);
  inline void set_contractor_name(const char* value);
  inline void set_contractor_name(const char* value, size_t size);
  inline ::std::string* mutable_contractor_name();
  inline ::std::string* release_contractor_name();
  inline void set_allocated_contractor_name(::std::string* contractor_name);

  // required string contractor_email = 11;
  inline bool has_contractor_email() const;
  inline void clear_contractor_email();
  static const int kContractorEmailFieldNumber = 11;
  inline const ::std::string& contractor_email() const;
  inline void set_contractor_email(const ::std::string& value);
  inline void set_contractor_email(const char* value);
  inline void set_contractor_email(const char* value, size_t size);
  inline ::std::string* mutable_contractor_email();
  inline ::std::string* release_contractor_email();
  inline void set_allocated_contractor_email(::std::string* contractor_email);

  // required string contractor_tel = 12;
  inline bool has_contractor_tel() const;
  inline void clear_contractor_tel();
  static const int kContractorTelFieldNumber = 12;
  inline const ::std::string& contractor_tel() const;
  inline void set_contractor_tel(const ::std::string& value);
  inline void set_contractor_tel(const char* value);
  inline void set_contractor_tel(const char* value, size_t size);
  inline ::std::string* mutable_contractor_tel();
  inline ::std::string* release_contractor_tel();
  inline void set_allocated_contractor_tel(::std::string* contractor_tel);

  // required string contractor_mobile = 13;
  inline bool has_contractor_mobile() const;
  inline void clear_contractor_mobile();
  static const int kContractorMobileFieldNumber = 13;
  inline const ::std::string& contractor_mobile() const;
  inline void set_contractor_mobile(const ::std::string& value);
  inline void set_contractor_mobile(const char* value);
  inline void set_contractor_mobile(const char* value, size_t size);
  inline ::std::string* mutable_contractor_mobile();
  inline ::std::string* release_contractor_mobile();
  inline void set_allocated_contractor_mobile(::std::string* contractor_mobile);

  // required uint32 create_time = 14;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 update_time = 15;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CompanyInfo)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_company_name();
  inline void clear_has_company_name();
  inline void set_has_company_code();
  inline void clear_has_company_code();
  inline void set_has_company_scale();
  inline void clear_has_company_scale();
  inline void set_has_user_count();
  inline void clear_has_user_count();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_auth_status();
  inline void clear_has_auth_status();
  inline void set_has_contractor_name();
  inline void clear_has_contractor_name();
  inline void set_has_contractor_email();
  inline void clear_has_contractor_email();
  inline void set_has_contractor_tel();
  inline void clear_has_contractor_tel();
  inline void set_has_contractor_mobile();
  inline void clear_has_contractor_mobile();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* company_name_;
  ::std::string* company_code_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_count_;
  ::std::string* company_scale_;
  ::std::string* address_;
  ::google::protobuf::uint32 active_;
  ::google::protobuf::int32 auth_status_;
  ::std::string* country_;
  ::std::string* contractor_name_;
  ::std::string* contractor_email_;
  ::std::string* contractor_tel_;
  ::std::string* contractor_mobile_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static CompanyInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 user_gender = 3;
  inline bool has_user_gender() const;
  inline void clear_user_gender();
  static const int kUserGenderFieldNumber = 3;
  inline ::google::protobuf::uint32 user_gender() const;
  inline void set_user_gender(::google::protobuf::uint32 value);

  // required string user_nick_name = 4;
  inline bool has_user_nick_name() const;
  inline void clear_user_nick_name();
  static const int kUserNickNameFieldNumber = 4;
  inline const ::std::string& user_nick_name() const;
  inline void set_user_nick_name(const ::std::string& value);
  inline void set_user_nick_name(const char* value);
  inline void set_user_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_user_nick_name();
  inline ::std::string* release_user_nick_name();
  inline void set_allocated_user_nick_name(::std::string* user_nick_name);

  // required string avatar_url = 5;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 5;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required uint64 avatar_update_time = 6;
  inline bool has_avatar_update_time() const;
  inline void clear_avatar_update_time();
  static const int kAvatarUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 avatar_update_time() const;
  inline void set_avatar_update_time(::google::protobuf::uint64 value);

  // required string email = 7;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 7;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // required string user_real_name = 8;
  inline bool has_user_real_name() const;
  inline void clear_user_real_name();
  static const int kUserRealNameFieldNumber = 8;
  inline const ::std::string& user_real_name() const;
  inline void set_user_real_name(const ::std::string& value);
  inline void set_user_real_name(const char* value);
  inline void set_user_real_name(const char* value, size_t size);
  inline ::std::string* mutable_user_real_name();
  inline ::std::string* release_user_real_name();
  inline void set_allocated_user_real_name(::std::string* user_real_name);

  // required string user_mobile = 9;
  inline bool has_user_mobile() const;
  inline void clear_user_mobile();
  static const int kUserMobileFieldNumber = 9;
  inline const ::std::string& user_mobile() const;
  inline void set_user_mobile(const ::std::string& value);
  inline void set_user_mobile(const char* value);
  inline void set_user_mobile(const char* value, size_t size);
  inline ::std::string* mutable_user_mobile();
  inline ::std::string* release_user_mobile();
  inline void set_allocated_user_mobile(::std::string* user_mobile);

  // required string user_tel = 10;
  inline bool has_user_tel() const;
  inline void clear_user_tel();
  static const int kUserTelFieldNumber = 10;
  inline const ::std::string& user_tel() const;
  inline void set_user_tel(const ::std::string& value);
  inline void set_user_tel(const char* value);
  inline void set_user_tel(const char* value, size_t size);
  inline ::std::string* mutable_user_tel();
  inline ::std::string* release_user_tel();
  inline void set_allocated_user_tel(::std::string* user_tel);

  // required string user_english_name = 11;
  inline bool has_user_english_name() const;
  inline void clear_user_english_name();
  static const int kUserEnglishNameFieldNumber = 11;
  inline const ::std::string& user_english_name() const;
  inline void set_user_english_name(const ::std::string& value);
  inline void set_user_english_name(const char* value);
  inline void set_user_english_name(const char* value, size_t size);
  inline ::std::string* mutable_user_english_name();
  inline ::std::string* release_user_english_name();
  inline void set_allocated_user_english_name(::std::string* user_english_name);

  // required uint32 status = 12;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 12;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 user_borndate = 13;
  inline bool has_user_borndate() const;
  inline void clear_user_borndate();
  static const int kUserBorndateFieldNumber = 13;
  inline ::google::protobuf::uint32 user_borndate() const;
  inline void set_user_borndate(::google::protobuf::uint32 value);

  // required uint64 update_time = 14;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required uint32 work_id = 15;
  inline bool has_work_id() const;
  inline void clear_work_id();
  static const int kWorkIdFieldNumber = 15;
  inline ::google::protobuf::uint32 work_id() const;
  inline void set_work_id(::google::protobuf::uint32 value);

  // required string pos_json = 16;
  inline bool has_pos_json() const;
  inline void clear_pos_json();
  static const int kPosJsonFieldNumber = 16;
  inline const ::std::string& pos_json() const;
  inline void set_pos_json(const ::std::string& value);
  inline void set_pos_json(const char* value);
  inline void set_pos_json(const char* value, size_t size);
  inline ::std::string* mutable_pos_json();
  inline ::std::string* release_pos_json();
  inline void set_allocated_pos_json(::std::string* pos_json);

  // optional string sign_info = 17;
  inline bool has_sign_info() const;
  inline void clear_sign_info();
  static const int kSignInfoFieldNumber = 17;
  inline const ::std::string& sign_info() const;
  inline void set_sign_info(const ::std::string& value);
  inline void set_sign_info(const char* value);
  inline void set_sign_info(const char* value, size_t size);
  inline ::std::string* mutable_sign_info();
  inline ::std::string* release_sign_info();
  inline void set_allocated_sign_info(::std::string* sign_info);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_gender();
  inline void clear_has_user_gender();
  inline void set_has_user_nick_name();
  inline void clear_has_user_nick_name();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_avatar_update_time();
  inline void clear_has_avatar_update_time();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_user_real_name();
  inline void clear_has_user_real_name();
  inline void set_has_user_mobile();
  inline void clear_has_user_mobile();
  inline void set_has_user_tel();
  inline void clear_has_user_tel();
  inline void set_has_user_english_name();
  inline void clear_has_user_english_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_user_borndate();
  inline void clear_has_user_borndate();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_work_id();
  inline void clear_has_work_id();
  inline void set_has_pos_json();
  inline void clear_has_pos_json();
  inline void set_has_sign_info();
  inline void clear_has_sign_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* user_nick_name_;
  ::std::string* avatar_url_;
  ::google::protobuf::uint64 avatar_update_time_;
  ::std::string* email_;
  ::google::protobuf::uint32 user_gender_;
  ::google::protobuf::uint32 status_;
  ::std::string* user_real_name_;
  ::std::string* user_mobile_;
  ::std::string* user_tel_;
  ::std::string* user_english_name_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::uint32 user_borndate_;
  ::google::protobuf::uint32 work_id_;
  ::std::string* pos_json_;
  ::std::string* sign_info_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class GlobalSesssion : public ::google::protobuf::Message {
 public:
  GlobalSesssion();
  virtual ~GlobalSesssion();

  GlobalSesssion(const GlobalSesssion& from);

  inline GlobalSesssion& operator=(const GlobalSesssion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalSesssion& default_instance();

  void Swap(GlobalSesssion* other);

  // implements Message ----------------------------------------------

  GlobalSesssion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalSesssion& from);
  void MergeFrom(const GlobalSesssion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 connsvr_id = 3;
  inline bool has_connsvr_id() const;
  inline void clear_connsvr_id();
  static const int kConnsvrIdFieldNumber = 3;
  inline ::google::protobuf::uint32 connsvr_id() const;
  inline void set_connsvr_id(::google::protobuf::uint32 value);

  // required uint32 connsocket_index = 4;
  inline bool has_connsocket_index() const;
  inline void clear_connsocket_index();
  static const int kConnsocketIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 connsocket_index() const;
  inline void set_connsocket_index(::google::protobuf::uint32 value);

  // required uint32 device_type = 5;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 device_type() const;
  inline void set_device_type(::google::protobuf::uint32 value);

  // required uint32 device_stat = 6;
  inline bool has_device_stat() const;
  inline void clear_device_stat();
  static const int kDeviceStatFieldNumber = 6;
  inline ::google::protobuf::uint32 device_stat() const;
  inline void set_device_stat(::google::protobuf::uint32 value);

  // required uint32 update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GlobalSesssion)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_connsvr_id();
  inline void clear_has_connsvr_id();
  inline void set_has_connsocket_index();
  inline void clear_has_connsocket_index();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_device_stat();
  inline void clear_has_device_stat();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 connsvr_id_;
  ::google::protobuf::uint32 connsocket_index_;
  ::google::protobuf::uint32 device_type_;
  ::google::protobuf::uint32 device_stat_;
  ::google::protobuf::uint32 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static GlobalSesssion* default_instance_;
};
// -------------------------------------------------------------------

class ConnSessionItem : public ::google::protobuf::Message {
 public:
  ConnSessionItem();
  virtual ~ConnSessionItem();

  ConnSessionItem(const ConnSessionItem& from);

  inline ConnSessionItem& operator=(const ConnSessionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnSessionItem& default_instance();

  void Swap(ConnSessionItem* other);

  // implements Message ----------------------------------------------

  ConnSessionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnSessionItem& from);
  void MergeFrom(const ConnSessionItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required uint32 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConnSessionItem)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* session_id_;
  ::google::protobuf::uint32 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static ConnSessionItem* default_instance_;
};
// -------------------------------------------------------------------

class UserStat : public ::google::protobuf::Message {
 public:
  UserStat();
  virtual ~UserStat();

  UserStat(const UserStat& from);

  inline UserStat& operator=(const UserStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStat& default_instance();

  void Swap(UserStat* other);

  // implements Message ----------------------------------------------

  UserStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserStat& from);
  void MergeFrom(const UserStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required uint32 online_device = 2;
  inline bool has_online_device() const;
  inline void clear_online_device();
  static const int kOnlineDeviceFieldNumber = 2;
  inline ::google::protobuf::uint32 online_device() const;
  inline void set_online_device(::google::protobuf::uint32 value);

  // optional string pc_session_id = 3;
  inline bool has_pc_session_id() const;
  inline void clear_pc_session_id();
  static const int kPcSessionIdFieldNumber = 3;
  inline const ::std::string& pc_session_id() const;
  inline void set_pc_session_id(const ::std::string& value);
  inline void set_pc_session_id(const char* value);
  inline void set_pc_session_id(const char* value, size_t size);
  inline ::std::string* mutable_pc_session_id();
  inline ::std::string* release_pc_session_id();
  inline void set_allocated_pc_session_id(::std::string* pc_session_id);

  // optional string android_session_id = 4;
  inline bool has_android_session_id() const;
  inline void clear_android_session_id();
  static const int kAndroidSessionIdFieldNumber = 4;
  inline const ::std::string& android_session_id() const;
  inline void set_android_session_id(const ::std::string& value);
  inline void set_android_session_id(const char* value);
  inline void set_android_session_id(const char* value, size_t size);
  inline ::std::string* mutable_android_session_id();
  inline ::std::string* release_android_session_id();
  inline void set_allocated_android_session_id(::std::string* android_session_id);

  // optional string ios_session_id = 5;
  inline bool has_ios_session_id() const;
  inline void clear_ios_session_id();
  static const int kIosSessionIdFieldNumber = 5;
  inline const ::std::string& ios_session_id() const;
  inline void set_ios_session_id(const ::std::string& value);
  inline void set_ios_session_id(const char* value);
  inline void set_ios_session_id(const char* value, size_t size);
  inline ::std::string* mutable_ios_session_id();
  inline ::std::string* release_ios_session_id();
  inline void set_allocated_ios_session_id(::std::string* ios_session_id);

  // optional string mac_session_id = 6;
  inline bool has_mac_session_id() const;
  inline void clear_mac_session_id();
  static const int kMacSessionIdFieldNumber = 6;
  inline const ::std::string& mac_session_id() const;
  inline void set_mac_session_id(const ::std::string& value);
  inline void set_mac_session_id(const char* value);
  inline void set_mac_session_id(const char* value, size_t size);
  inline ::std::string* mutable_mac_session_id();
  inline ::std::string* release_mac_session_id();
  inline void set_allocated_mac_session_id(::std::string* mac_session_id);

  // @@protoc_insertion_point(class_scope:UserStat)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_online_device();
  inline void clear_has_online_device();
  inline void set_has_pc_session_id();
  inline void clear_has_pc_session_id();
  inline void set_has_android_session_id();
  inline void clear_has_android_session_id();
  inline void set_has_ios_session_id();
  inline void clear_has_ios_session_id();
  inline void set_has_mac_session_id();
  inline void clear_has_mac_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 online_device_;
  ::std::string* pc_session_id_;
  ::std::string* android_session_id_;
  ::std::string* ios_session_id_;
  ::std::string* mac_session_id_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserStat* default_instance_;
};
// -------------------------------------------------------------------

class UserFriendItem : public ::google::protobuf::Message {
 public:
  UserFriendItem();
  virtual ~UserFriendItem();

  UserFriendItem(const UserFriendItem& from);

  inline UserFriendItem& operator=(const UserFriendItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFriendItem& default_instance();

  void Swap(UserFriendItem* other);

  // implements Message ----------------------------------------------

  UserFriendItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserFriendItem& from);
  void MergeFrom(const UserFriendItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 is_fixtop = 3;
  inline bool has_is_fixtop() const;
  inline void clear_is_fixtop();
  static const int kIsFixtopFieldNumber = 3;
  inline ::google::protobuf::uint32 is_fixtop() const;
  inline void set_is_fixtop(::google::protobuf::uint32 value);

  // required uint32 fix_order = 4;
  inline bool has_fix_order() const;
  inline void clear_fix_order();
  static const int kFixOrderFieldNumber = 4;
  inline ::google::protobuf::uint32 fix_order() const;
  inline void set_fix_order(::google::protobuf::uint32 value);

  // required string remark = 6;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 6;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // required uint64 update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required bool is_delete = 8;
  inline bool has_is_delete() const;
  inline void clear_is_delete();
  static const int kIsDeleteFieldNumber = 8;
  inline bool is_delete() const;
  inline void set_is_delete(bool value);

  // @@protoc_insertion_point(class_scope:UserFriendItem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_is_fixtop();
  inline void clear_has_is_fixtop();
  inline void set_has_fix_order();
  inline void clear_has_fix_order();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_delete();
  inline void clear_has_is_delete();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 is_fixtop_;
  ::google::protobuf::uint32 fix_order_;
  ::std::string* remark_;
  ::google::protobuf::uint64 update_time_;
  bool is_delete_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserFriendItem* default_instance_;
};
// -------------------------------------------------------------------

class UserFriendList : public ::google::protobuf::Message {
 public:
  UserFriendList();
  virtual ~UserFriendList();

  UserFriendList(const UserFriendList& from);

  inline UserFriendList& operator=(const UserFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFriendList& default_instance();

  void Swap(UserFriendList* other);

  // implements Message ----------------------------------------------

  UserFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserFriendList& from);
  void MergeFrom(const UserFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserFriendItem friend_list = 1;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 1;
  inline const ::UserFriendItem& friend_list(int index) const;
  inline ::UserFriendItem* mutable_friend_list(int index);
  inline ::UserFriendItem* add_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UserFriendItem >&
      friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserFriendItem >*
      mutable_friend_list();

  // @@protoc_insertion_point(class_scope:UserFriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserFriendItem > friend_list_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserFriendList* default_instance_;
};
// -------------------------------------------------------------------

class UserFriendVerItem : public ::google::protobuf::Message {
 public:
  UserFriendVerItem();
  virtual ~UserFriendVerItem();

  UserFriendVerItem(const UserFriendVerItem& from);

  inline UserFriendVerItem& operator=(const UserFriendVerItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFriendVerItem& default_instance();

  void Swap(UserFriendVerItem* other);

  // implements Message ----------------------------------------------

  UserFriendVerItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserFriendVerItem& from);
  void MergeFrom(const UserFriendVerItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint64 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:UserFriendVerItem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint64 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserFriendVerItem* default_instance_;
};
// -------------------------------------------------------------------

class UserSession : public ::google::protobuf::Message {
 public:
  UserSession();
  virtual ~UserSession();

  UserSession(const UserSession& from);

  inline UserSession& operator=(const UserSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSession& default_instance();

  void Swap(UserSession* other);

  // implements Message ----------------------------------------------

  UserSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSession& from);
  void MergeFrom(const UserSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 device_type = 3;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 device_type() const;
  inline void set_device_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UserSession)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_type();
  inline void clear_has_device_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 device_type_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserSession* default_instance_;
};
// -------------------------------------------------------------------

class UserRecentContractoritem : public ::google::protobuf::Message {
 public:
  UserRecentContractoritem();
  virtual ~UserRecentContractoritem();

  UserRecentContractoritem(const UserRecentContractoritem& from);

  inline UserRecentContractoritem& operator=(const UserRecentContractoritem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRecentContractoritem& default_instance();

  void Swap(UserRecentContractoritem* other);

  // implements Message ----------------------------------------------

  UserRecentContractoritem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRecentContractoritem& from);
  void MergeFrom(const UserRecentContractoritem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 friend_type = 3;
  inline bool has_friend_type() const;
  inline void clear_friend_type();
  static const int kFriendTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 friend_type() const;
  inline void set_friend_type(::google::protobuf::uint32 value);

  // required uint32 is_fixtop = 4;
  inline bool has_is_fixtop() const;
  inline void clear_is_fixtop();
  static const int kIsFixtopFieldNumber = 4;
  inline ::google::protobuf::uint32 is_fixtop() const;
  inline void set_is_fixtop(::google::protobuf::uint32 value);

  // required uint32 fix_order = 5;
  inline bool has_fix_order() const;
  inline void clear_fix_order();
  static const int kFixOrderFieldNumber = 5;
  inline ::google::protobuf::uint32 fix_order() const;
  inline void set_fix_order(::google::protobuf::uint32 value);

  // required uint32 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UserRecentContractoritem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_friend_type();
  inline void clear_has_friend_type();
  inline void set_has_is_fixtop();
  inline void clear_has_is_fixtop();
  inline void set_has_fix_order();
  inline void clear_has_fix_order();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 friend_type_;
  ::google::protobuf::uint32 is_fixtop_;
  ::google::protobuf::uint32 fix_order_;
  ::google::protobuf::uint32 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserRecentContractoritem* default_instance_;
};
// -------------------------------------------------------------------

class UserRecentChatList : public ::google::protobuf::Message {
 public:
  UserRecentChatList();
  virtual ~UserRecentChatList();

  UserRecentChatList(const UserRecentChatList& from);

  inline UserRecentChatList& operator=(const UserRecentChatList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRecentChatList& default_instance();

  void Swap(UserRecentChatList* other);

  // implements Message ----------------------------------------------

  UserRecentChatList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRecentChatList& from);
  void MergeFrom(const UserRecentChatList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserRecentContractoritem friend_list = 1;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 1;
  inline const ::UserRecentContractoritem& friend_list(int index) const;
  inline ::UserRecentContractoritem* mutable_friend_list(int index);
  inline ::UserRecentContractoritem* add_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UserRecentContractoritem >&
      friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserRecentContractoritem >*
      mutable_friend_list();

  // @@protoc_insertion_point(class_scope:UserRecentChatList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserRecentContractoritem > friend_list_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserRecentChatList* default_instance_;
};
// -------------------------------------------------------------------

class GroupListItem : public ::google::protobuf::Message {
 public:
  GroupListItem();
  virtual ~GroupListItem();

  GroupListItem(const GroupListItem& from);

  inline GroupListItem& operator=(const GroupListItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupListItem& default_instance();

  void Swap(GroupListItem* other);

  // implements Message ----------------------------------------------

  GroupListItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupListItem& from);
  void MergeFrom(const GroupListItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required .GroupType group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::GroupType group_type() const;
  inline void set_group_type(::GroupType value);

  // required uint32 is_fixtop = 4;
  inline bool has_is_fixtop() const;
  inline void clear_is_fixtop();
  static const int kIsFixtopFieldNumber = 4;
  inline ::google::protobuf::uint32 is_fixtop() const;
  inline void set_is_fixtop(::google::protobuf::uint32 value);

  // required uint32 fix_order = 5;
  inline bool has_fix_order() const;
  inline void clear_fix_order();
  static const int kFixOrderFieldNumber = 5;
  inline ::google::protobuf::uint32 fix_order() const;
  inline void set_fix_order(::google::protobuf::uint32 value);

  // required string remark = 7;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 7;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // required uint64 update_time = 8;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);

  // required bool is_delete = 9;
  inline bool has_is_delete() const;
  inline void clear_is_delete();
  static const int kIsDeleteFieldNumber = 9;
  inline bool is_delete() const;
  inline void set_is_delete(bool value);

  // @@protoc_insertion_point(class_scope:GroupListItem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_is_fixtop();
  inline void clear_has_is_fixtop();
  inline void set_has_fix_order();
  inline void clear_has_fix_order();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_delete();
  inline void clear_has_is_delete();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 group_id_;
  int group_type_;
  ::google::protobuf::uint32 is_fixtop_;
  ::std::string* remark_;
  ::google::protobuf::uint32 fix_order_;
  bool is_delete_;
  ::google::protobuf::uint64 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static GroupListItem* default_instance_;
};
// -------------------------------------------------------------------

class UserGroupList : public ::google::protobuf::Message {
 public:
  UserGroupList();
  virtual ~UserGroupList();

  UserGroupList(const UserGroupList& from);

  inline UserGroupList& operator=(const UserGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGroupList& default_instance();

  void Swap(UserGroupList* other);

  // implements Message ----------------------------------------------

  UserGroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserGroupList& from);
  void MergeFrom(const UserGroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GroupListItem group_list = 1;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 1;
  inline const ::GroupListItem& group_list(int index) const;
  inline ::GroupListItem* mutable_group_list(int index);
  inline ::GroupListItem* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupListItem >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupListItem >*
      mutable_group_list();

  // @@protoc_insertion_point(class_scope:UserGroupList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GroupListItem > group_list_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static UserGroupList* default_instance_;
};
// -------------------------------------------------------------------

class GroupMemberItem : public ::google::protobuf::Message {
 public:
  GroupMemberItem();
  virtual ~GroupMemberItem();

  GroupMemberItem(const GroupMemberItem& from);

  inline GroupMemberItem& operator=(const GroupMemberItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberItem& default_instance();

  void Swap(GroupMemberItem* other);

  // implements Message ----------------------------------------------

  GroupMemberItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMemberItem& from);
  void MergeFrom(const GroupMemberItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required string member_name = 3;
  inline bool has_member_name() const;
  inline void clear_member_name();
  static const int kMemberNameFieldNumber = 3;
  inline const ::std::string& member_name() const;
  inline void set_member_name(const ::std::string& value);
  inline void set_member_name(const char* value);
  inline void set_member_name(const char* value, size_t size);
  inline ::std::string* mutable_member_name();
  inline ::std::string* release_member_name();
  inline void set_allocated_member_name(::std::string* member_name);

  // required string member_remark = 4;
  inline bool has_member_remark() const;
  inline void clear_member_remark();
  static const int kMemberRemarkFieldNumber = 4;
  inline const ::std::string& member_remark() const;
  inline void set_member_remark(const ::std::string& value);
  inline void set_member_remark(const char* value);
  inline void set_member_remark(const char* value, size_t size);
  inline ::std::string* mutable_member_remark();
  inline ::std::string* release_member_remark();
  inline void set_allocated_member_remark(::std::string* member_remark);

  // required uint32 member_role = 5;
  inline bool has_member_role() const;
  inline void clear_member_role();
  static const int kMemberRoleFieldNumber = 5;
  inline ::google::protobuf::uint32 member_role() const;
  inline void set_member_role(::google::protobuf::uint32 value);

  // required uint32 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required bool is_delete = 7;
  inline bool has_is_delete() const;
  inline void clear_is_delete();
  static const int kIsDeleteFieldNumber = 7;
  inline bool is_delete() const;
  inline void set_is_delete(bool value);

  // @@protoc_insertion_point(class_scope:GroupMemberItem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_member_name();
  inline void clear_has_member_name();
  inline void set_has_member_remark();
  inline void clear_has_member_remark();
  inline void set_has_member_role();
  inline void clear_has_member_role();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_delete();
  inline void clear_has_is_delete();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 member_id_;
  ::std::string* member_name_;
  ::std::string* member_remark_;
  ::google::protobuf::uint32 member_role_;
  ::google::protobuf::uint32 update_time_;
  bool is_delete_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static GroupMemberItem* default_instance_;
};
// -------------------------------------------------------------------

class GroupMemberList : public ::google::protobuf::Message {
 public:
  GroupMemberList();
  virtual ~GroupMemberList();

  GroupMemberList(const GroupMemberList& from);

  inline GroupMemberList& operator=(const GroupMemberList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberList& default_instance();

  void Swap(GroupMemberList* other);

  // implements Message ----------------------------------------------

  GroupMemberList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMemberList& from);
  void MergeFrom(const GroupMemberList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GroupMemberItem member_list = 1;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 1;
  inline const ::GroupMemberItem& member_list(int index) const;
  inline ::GroupMemberItem* mutable_member_list(int index);
  inline ::GroupMemberItem* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMemberItem >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMemberItem >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:GroupMemberList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GroupMemberItem > member_list_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static GroupMemberList* default_instance_;
};
// -------------------------------------------------------------------

class OrgGroupMemberItem : public ::google::protobuf::Message {
 public:
  OrgGroupMemberItem();
  virtual ~OrgGroupMemberItem();

  OrgGroupMemberItem(const OrgGroupMemberItem& from);

  inline OrgGroupMemberItem& operator=(const OrgGroupMemberItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrgGroupMemberItem& default_instance();

  void Swap(OrgGroupMemberItem* other);

  // implements Message ----------------------------------------------

  OrgGroupMemberItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrgGroupMemberItem& from);
  void MergeFrom(const OrgGroupMemberItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 company_id = 1;
  inline bool has_company_id() const;
  inline void clear_company_id();
  static const int kCompanyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 company_id() const;
  inline void set_company_id(::google::protobuf::uint32 value);

  // required uint32 member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:OrgGroupMemberItem)
 private:
  inline void set_has_company_id();
  inline void clear_has_company_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 company_id_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 update_time_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static OrgGroupMemberItem* default_instance_;
};
// -------------------------------------------------------------------

class OrgGroupMemberList : public ::google::protobuf::Message {
 public:
  OrgGroupMemberList();
  virtual ~OrgGroupMemberList();

  OrgGroupMemberList(const OrgGroupMemberList& from);

  inline OrgGroupMemberList& operator=(const OrgGroupMemberList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrgGroupMemberList& default_instance();

  void Swap(OrgGroupMemberList* other);

  // implements Message ----------------------------------------------

  OrgGroupMemberList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrgGroupMemberList& from);
  void MergeFrom(const OrgGroupMemberList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OrgGroupMemberItem member_list = 1;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 1;
  inline const ::OrgGroupMemberItem& member_list(int index) const;
  inline ::OrgGroupMemberItem* mutable_member_list(int index);
  inline ::OrgGroupMemberItem* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::OrgGroupMemberItem >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::OrgGroupMemberItem >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:OrgGroupMemberList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OrgGroupMemberItem > member_list_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static OrgGroupMemberList* default_instance_;
};
// -------------------------------------------------------------------

class OrgNode : public ::google::protobuf::Message {
 public:
  OrgNode();
  virtual ~OrgNode();

  OrgNode(const OrgNode& from);

  inline OrgNode& operator=(const OrgNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrgNode& default_instance();

  void Swap(OrgNode* other);

  // implements Message ----------------------------------------------

  OrgNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrgNode& from);
  void MergeFrom(const OrgNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 lvalue = 2;
  inline bool has_lvalue() const;
  inline void clear_lvalue();
  static const int kLvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 lvalue() const;
  inline void set_lvalue(::google::protobuf::uint32 value);

  // required uint32 rvalue = 3;
  inline bool has_rvalue() const;
  inline void clear_rvalue();
  static const int kRvalueFieldNumber = 3;
  inline ::google::protobuf::uint32 rvalue() const;
  inline void set_rvalue(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:OrgNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lvalue();
  inline void clear_has_lvalue();
  inline void set_has_rvalue();
  inline void clear_has_rvalue();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lvalue_;
  ::google::protobuf::uint32 rvalue_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static OrgNode* default_instance_;
};
// -------------------------------------------------------------------

class OrgTree : public ::google::protobuf::Message {
 public:
  OrgTree();
  virtual ~OrgTree();

  OrgTree(const OrgTree& from);

  inline OrgTree& operator=(const OrgTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrgTree& default_instance();

  void Swap(OrgTree* other);

  // implements Message ----------------------------------------------

  OrgTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrgTree& from);
  void MergeFrom(const OrgTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OrgNode org_node_list = 1;
  inline int org_node_list_size() const;
  inline void clear_org_node_list();
  static const int kOrgNodeListFieldNumber = 1;
  inline const ::OrgNode& org_node_list(int index) const;
  inline ::OrgNode* mutable_org_node_list(int index);
  inline ::OrgNode* add_org_node_list();
  inline const ::google::protobuf::RepeatedPtrField< ::OrgNode >&
      org_node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::OrgNode >*
      mutable_org_node_list();

  // @@protoc_insertion_point(class_scope:OrgTree)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OrgNode > org_node_list_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static OrgTree* default_instance_;
};
// -------------------------------------------------------------------

class CompanyUserList : public ::google::protobuf::Message {
 public:
  CompanyUserList();
  virtual ~CompanyUserList();

  CompanyUserList(const CompanyUserList& from);

  inline CompanyUserList& operator=(const CompanyUserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompanyUserList& default_instance();

  void Swap(CompanyUserList* other);

  // implements Message ----------------------------------------------

  CompanyUserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompanyUserList& from);
  void MergeFrom(const CompanyUserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 user_id = 1;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // @@protoc_insertion_point(class_scope:CompanyUserList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  friend void  protobuf_AddDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_AssignDesc_IM_2eRedisStruct_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRedisStruct_2eproto();

  void InitAsDefaultInstance();
  static CompanyUserList* default_instance_;
};
// ===================================================================


// ===================================================================

// CompanyInfo

// required uint32 company_id = 1;
inline bool CompanyInfo::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompanyInfo::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompanyInfo::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompanyInfo::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 CompanyInfo::company_id() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.company_id)
  return company_id_;
}
inline void CompanyInfo::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:CompanyInfo.company_id)
}

// required string company_name = 2;
inline bool CompanyInfo::has_company_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompanyInfo::set_has_company_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompanyInfo::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompanyInfo::clear_company_name() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_->clear();
  }
  clear_has_company_name();
}
inline const ::std::string& CompanyInfo::company_name() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.company_name)
  return *company_name_;
}
inline void CompanyInfo::set_company_name(const ::std::string& value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.company_name)
}
inline void CompanyInfo::set_company_name(const char* value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.company_name)
}
inline void CompanyInfo::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.company_name)
}
inline ::std::string* CompanyInfo::mutable_company_name() {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.company_name)
  return company_name_;
}
inline ::std::string* CompanyInfo::release_company_name() {
  clear_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_name_;
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_company_name(::std::string* company_name) {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (company_name) {
    set_has_company_name();
    company_name_ = company_name;
  } else {
    clear_has_company_name();
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.company_name)
}

// required string company_code = 3;
inline bool CompanyInfo::has_company_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompanyInfo::set_has_company_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompanyInfo::clear_has_company_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompanyInfo::clear_company_code() {
  if (company_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_code_->clear();
  }
  clear_has_company_code();
}
inline const ::std::string& CompanyInfo::company_code() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.company_code)
  return *company_code_;
}
inline void CompanyInfo::set_company_code(const ::std::string& value) {
  set_has_company_code();
  if (company_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_code_ = new ::std::string;
  }
  company_code_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.company_code)
}
inline void CompanyInfo::set_company_code(const char* value) {
  set_has_company_code();
  if (company_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_code_ = new ::std::string;
  }
  company_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.company_code)
}
inline void CompanyInfo::set_company_code(const char* value, size_t size) {
  set_has_company_code();
  if (company_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_code_ = new ::std::string;
  }
  company_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.company_code)
}
inline ::std::string* CompanyInfo::mutable_company_code() {
  set_has_company_code();
  if (company_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.company_code)
  return company_code_;
}
inline ::std::string* CompanyInfo::release_company_code() {
  clear_has_company_code();
  if (company_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_code_;
    company_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_company_code(::std::string* company_code) {
  if (company_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_code_;
  }
  if (company_code) {
    set_has_company_code();
    company_code_ = company_code;
  } else {
    clear_has_company_code();
    company_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.company_code)
}

// required string company_scale = 4;
inline bool CompanyInfo::has_company_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompanyInfo::set_has_company_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompanyInfo::clear_has_company_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompanyInfo::clear_company_scale() {
  if (company_scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_scale_->clear();
  }
  clear_has_company_scale();
}
inline const ::std::string& CompanyInfo::company_scale() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.company_scale)
  return *company_scale_;
}
inline void CompanyInfo::set_company_scale(const ::std::string& value) {
  set_has_company_scale();
  if (company_scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_scale_ = new ::std::string;
  }
  company_scale_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.company_scale)
}
inline void CompanyInfo::set_company_scale(const char* value) {
  set_has_company_scale();
  if (company_scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_scale_ = new ::std::string;
  }
  company_scale_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.company_scale)
}
inline void CompanyInfo::set_company_scale(const char* value, size_t size) {
  set_has_company_scale();
  if (company_scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_scale_ = new ::std::string;
  }
  company_scale_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.company_scale)
}
inline ::std::string* CompanyInfo::mutable_company_scale() {
  set_has_company_scale();
  if (company_scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_scale_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.company_scale)
  return company_scale_;
}
inline ::std::string* CompanyInfo::release_company_scale() {
  clear_has_company_scale();
  if (company_scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_scale_;
    company_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_company_scale(::std::string* company_scale) {
  if (company_scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_scale_;
  }
  if (company_scale) {
    set_has_company_scale();
    company_scale_ = company_scale;
  } else {
    clear_has_company_scale();
    company_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.company_scale)
}

// required uint32 user_count = 5;
inline bool CompanyInfo::has_user_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CompanyInfo::set_has_user_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CompanyInfo::clear_has_user_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CompanyInfo::clear_user_count() {
  user_count_ = 0u;
  clear_has_user_count();
}
inline ::google::protobuf::uint32 CompanyInfo::user_count() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.user_count)
  return user_count_;
}
inline void CompanyInfo::set_user_count(::google::protobuf::uint32 value) {
  set_has_user_count();
  user_count_ = value;
  // @@protoc_insertion_point(field_set:CompanyInfo.user_count)
}

// required uint32 active = 6;
inline bool CompanyInfo::has_active() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CompanyInfo::set_has_active() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CompanyInfo::clear_has_active() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CompanyInfo::clear_active() {
  active_ = 0u;
  clear_has_active();
}
inline ::google::protobuf::uint32 CompanyInfo::active() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.active)
  return active_;
}
inline void CompanyInfo::set_active(::google::protobuf::uint32 value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:CompanyInfo.active)
}

// required string address = 7;
inline bool CompanyInfo::has_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CompanyInfo::set_has_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CompanyInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CompanyInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& CompanyInfo::address() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.address)
  return *address_;
}
inline void CompanyInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.address)
}
inline void CompanyInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.address)
}
inline void CompanyInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.address)
}
inline ::std::string* CompanyInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.address)
  return address_;
}
inline ::std::string* CompanyInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.address)
}

// required string country = 8;
inline bool CompanyInfo::has_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CompanyInfo::set_has_country() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CompanyInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CompanyInfo::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& CompanyInfo::country() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.country)
  return *country_;
}
inline void CompanyInfo::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.country)
}
inline void CompanyInfo::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.country)
}
inline void CompanyInfo::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.country)
}
inline ::std::string* CompanyInfo::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.country)
  return country_;
}
inline ::std::string* CompanyInfo::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.country)
}

// required int32 auth_status = 9;
inline bool CompanyInfo::has_auth_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CompanyInfo::set_has_auth_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CompanyInfo::clear_has_auth_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CompanyInfo::clear_auth_status() {
  auth_status_ = 0;
  clear_has_auth_status();
}
inline ::google::protobuf::int32 CompanyInfo::auth_status() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.auth_status)
  return auth_status_;
}
inline void CompanyInfo::set_auth_status(::google::protobuf::int32 value) {
  set_has_auth_status();
  auth_status_ = value;
  // @@protoc_insertion_point(field_set:CompanyInfo.auth_status)
}

// required string contractor_name = 10;
inline bool CompanyInfo::has_contractor_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CompanyInfo::set_has_contractor_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CompanyInfo::clear_has_contractor_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CompanyInfo::clear_contractor_name() {
  if (contractor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_name_->clear();
  }
  clear_has_contractor_name();
}
inline const ::std::string& CompanyInfo::contractor_name() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.contractor_name)
  return *contractor_name_;
}
inline void CompanyInfo::set_contractor_name(const ::std::string& value) {
  set_has_contractor_name();
  if (contractor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_name_ = new ::std::string;
  }
  contractor_name_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.contractor_name)
}
inline void CompanyInfo::set_contractor_name(const char* value) {
  set_has_contractor_name();
  if (contractor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_name_ = new ::std::string;
  }
  contractor_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.contractor_name)
}
inline void CompanyInfo::set_contractor_name(const char* value, size_t size) {
  set_has_contractor_name();
  if (contractor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_name_ = new ::std::string;
  }
  contractor_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.contractor_name)
}
inline ::std::string* CompanyInfo::mutable_contractor_name() {
  set_has_contractor_name();
  if (contractor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.contractor_name)
  return contractor_name_;
}
inline ::std::string* CompanyInfo::release_contractor_name() {
  clear_has_contractor_name();
  if (contractor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractor_name_;
    contractor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_contractor_name(::std::string* contractor_name) {
  if (contractor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_name_;
  }
  if (contractor_name) {
    set_has_contractor_name();
    contractor_name_ = contractor_name;
  } else {
    clear_has_contractor_name();
    contractor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.contractor_name)
}

// required string contractor_email = 11;
inline bool CompanyInfo::has_contractor_email() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CompanyInfo::set_has_contractor_email() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CompanyInfo::clear_has_contractor_email() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CompanyInfo::clear_contractor_email() {
  if (contractor_email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_email_->clear();
  }
  clear_has_contractor_email();
}
inline const ::std::string& CompanyInfo::contractor_email() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.contractor_email)
  return *contractor_email_;
}
inline void CompanyInfo::set_contractor_email(const ::std::string& value) {
  set_has_contractor_email();
  if (contractor_email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_email_ = new ::std::string;
  }
  contractor_email_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.contractor_email)
}
inline void CompanyInfo::set_contractor_email(const char* value) {
  set_has_contractor_email();
  if (contractor_email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_email_ = new ::std::string;
  }
  contractor_email_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.contractor_email)
}
inline void CompanyInfo::set_contractor_email(const char* value, size_t size) {
  set_has_contractor_email();
  if (contractor_email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_email_ = new ::std::string;
  }
  contractor_email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.contractor_email)
}
inline ::std::string* CompanyInfo::mutable_contractor_email() {
  set_has_contractor_email();
  if (contractor_email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.contractor_email)
  return contractor_email_;
}
inline ::std::string* CompanyInfo::release_contractor_email() {
  clear_has_contractor_email();
  if (contractor_email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractor_email_;
    contractor_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_contractor_email(::std::string* contractor_email) {
  if (contractor_email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_email_;
  }
  if (contractor_email) {
    set_has_contractor_email();
    contractor_email_ = contractor_email;
  } else {
    clear_has_contractor_email();
    contractor_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.contractor_email)
}

// required string contractor_tel = 12;
inline bool CompanyInfo::has_contractor_tel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CompanyInfo::set_has_contractor_tel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CompanyInfo::clear_has_contractor_tel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CompanyInfo::clear_contractor_tel() {
  if (contractor_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_tel_->clear();
  }
  clear_has_contractor_tel();
}
inline const ::std::string& CompanyInfo::contractor_tel() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.contractor_tel)
  return *contractor_tel_;
}
inline void CompanyInfo::set_contractor_tel(const ::std::string& value) {
  set_has_contractor_tel();
  if (contractor_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_tel_ = new ::std::string;
  }
  contractor_tel_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.contractor_tel)
}
inline void CompanyInfo::set_contractor_tel(const char* value) {
  set_has_contractor_tel();
  if (contractor_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_tel_ = new ::std::string;
  }
  contractor_tel_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.contractor_tel)
}
inline void CompanyInfo::set_contractor_tel(const char* value, size_t size) {
  set_has_contractor_tel();
  if (contractor_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_tel_ = new ::std::string;
  }
  contractor_tel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.contractor_tel)
}
inline ::std::string* CompanyInfo::mutable_contractor_tel() {
  set_has_contractor_tel();
  if (contractor_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_tel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.contractor_tel)
  return contractor_tel_;
}
inline ::std::string* CompanyInfo::release_contractor_tel() {
  clear_has_contractor_tel();
  if (contractor_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractor_tel_;
    contractor_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_contractor_tel(::std::string* contractor_tel) {
  if (contractor_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_tel_;
  }
  if (contractor_tel) {
    set_has_contractor_tel();
    contractor_tel_ = contractor_tel;
  } else {
    clear_has_contractor_tel();
    contractor_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.contractor_tel)
}

// required string contractor_mobile = 13;
inline bool CompanyInfo::has_contractor_mobile() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CompanyInfo::set_has_contractor_mobile() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CompanyInfo::clear_has_contractor_mobile() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CompanyInfo::clear_contractor_mobile() {
  if (contractor_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_mobile_->clear();
  }
  clear_has_contractor_mobile();
}
inline const ::std::string& CompanyInfo::contractor_mobile() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.contractor_mobile)
  return *contractor_mobile_;
}
inline void CompanyInfo::set_contractor_mobile(const ::std::string& value) {
  set_has_contractor_mobile();
  if (contractor_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_mobile_ = new ::std::string;
  }
  contractor_mobile_->assign(value);
  // @@protoc_insertion_point(field_set:CompanyInfo.contractor_mobile)
}
inline void CompanyInfo::set_contractor_mobile(const char* value) {
  set_has_contractor_mobile();
  if (contractor_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_mobile_ = new ::std::string;
  }
  contractor_mobile_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompanyInfo.contractor_mobile)
}
inline void CompanyInfo::set_contractor_mobile(const char* value, size_t size) {
  set_has_contractor_mobile();
  if (contractor_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_mobile_ = new ::std::string;
  }
  contractor_mobile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompanyInfo.contractor_mobile)
}
inline ::std::string* CompanyInfo::mutable_contractor_mobile() {
  set_has_contractor_mobile();
  if (contractor_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractor_mobile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompanyInfo.contractor_mobile)
  return contractor_mobile_;
}
inline ::std::string* CompanyInfo::release_contractor_mobile() {
  clear_has_contractor_mobile();
  if (contractor_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractor_mobile_;
    contractor_mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompanyInfo::set_allocated_contractor_mobile(::std::string* contractor_mobile) {
  if (contractor_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractor_mobile_;
  }
  if (contractor_mobile) {
    set_has_contractor_mobile();
    contractor_mobile_ = contractor_mobile;
  } else {
    clear_has_contractor_mobile();
    contractor_mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyInfo.contractor_mobile)
}

// required uint32 create_time = 14;
inline bool CompanyInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CompanyInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CompanyInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CompanyInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 CompanyInfo::create_time() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.create_time)
  return create_time_;
}
inline void CompanyInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:CompanyInfo.create_time)
}

// required uint32 update_time = 15;
inline bool CompanyInfo::has_update_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CompanyInfo::set_has_update_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CompanyInfo::clear_has_update_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CompanyInfo::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 CompanyInfo::update_time() const {
  // @@protoc_insertion_point(field_get:CompanyInfo.update_time)
  return update_time_;
}
inline void CompanyInfo::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:CompanyInfo.update_time)
}

// -------------------------------------------------------------------

// UserInfo

// required uint32 company_id = 1;
inline bool UserInfo::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 UserInfo::company_id() const {
  // @@protoc_insertion_point(field_get:UserInfo.company_id)
  return company_id_;
}
inline void UserInfo::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.company_id)
}

// required uint32 user_id = 2;
inline bool UserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_id)
  return user_id_;
}
inline void UserInfo::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.user_id)
}

// required uint32 user_gender = 3;
inline bool UserInfo::has_user_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_user_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
inline ::google::protobuf::uint32 UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_gender)
  return user_gender_;
}
inline void UserInfo::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.user_gender)
}

// required string user_nick_name = 4;
inline bool UserInfo::has_user_nick_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_user_nick_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_user_nick_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_user_nick_name() {
  if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_->clear();
  }
  clear_has_user_nick_name();
}
inline const ::std::string& UserInfo::user_nick_name() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_nick_name)
  return *user_nick_name_;
}
inline void UserInfo::set_user_nick_name(const ::std::string& value) {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  user_nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(const char* value) {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  user_nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(const char* value, size_t size) {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  user_nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_nick_name)
}
inline ::std::string* UserInfo::mutable_user_nick_name() {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.user_nick_name)
  return user_nick_name_;
}
inline ::std::string* UserInfo::release_user_nick_name() {
  clear_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nick_name_;
    user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_user_nick_name(::std::string* user_nick_name) {
  if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nick_name_;
  }
  if (user_nick_name) {
    set_has_user_nick_name();
    user_nick_name_ = user_nick_name;
  } else {
    clear_has_user_nick_name();
    user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_nick_name)
}

// required string avatar_url = 5;
inline bool UserInfo::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:UserInfo.avatar_url)
  return *avatar_url_;
}
inline void UserInfo::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.avatar_url)
}
inline void UserInfo::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.avatar_url)
}
inline void UserInfo::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.avatar_url)
}
inline ::std::string* UserInfo::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.avatar_url)
  return avatar_url_;
}
inline ::std::string* UserInfo::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.avatar_url)
}

// required uint64 avatar_update_time = 6;
inline bool UserInfo::has_avatar_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_avatar_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_avatar_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_avatar_update_time() {
  avatar_update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_avatar_update_time();
}
inline ::google::protobuf::uint64 UserInfo::avatar_update_time() const {
  // @@protoc_insertion_point(field_get:UserInfo.avatar_update_time)
  return avatar_update_time_;
}
inline void UserInfo::set_avatar_update_time(::google::protobuf::uint64 value) {
  set_has_avatar_update_time();
  avatar_update_time_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.avatar_update_time)
}

// required string email = 7;
inline bool UserInfo::has_email() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_email() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:UserInfo.email)
  return *email_;
}
inline void UserInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.email)
}
inline void UserInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.email)
}
inline void UserInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.email)
}
inline ::std::string* UserInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.email)
  return email_;
}
inline ::std::string* UserInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.email)
}

// required string user_real_name = 8;
inline bool UserInfo::has_user_real_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_user_real_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_user_real_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_user_real_name() {
  if (user_real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_real_name_->clear();
  }
  clear_has_user_real_name();
}
inline const ::std::string& UserInfo::user_real_name() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_real_name)
  return *user_real_name_;
}
inline void UserInfo::set_user_real_name(const ::std::string& value) {
  set_has_user_real_name();
  if (user_real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_real_name_ = new ::std::string;
  }
  user_real_name_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.user_real_name)
}
inline void UserInfo::set_user_real_name(const char* value) {
  set_has_user_real_name();
  if (user_real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_real_name_ = new ::std::string;
  }
  user_real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.user_real_name)
}
inline void UserInfo::set_user_real_name(const char* value, size_t size) {
  set_has_user_real_name();
  if (user_real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_real_name_ = new ::std::string;
  }
  user_real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_real_name)
}
inline ::std::string* UserInfo::mutable_user_real_name() {
  set_has_user_real_name();
  if (user_real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.user_real_name)
  return user_real_name_;
}
inline ::std::string* UserInfo::release_user_real_name() {
  clear_has_user_real_name();
  if (user_real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_real_name_;
    user_real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_user_real_name(::std::string* user_real_name) {
  if (user_real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_real_name_;
  }
  if (user_real_name) {
    set_has_user_real_name();
    user_real_name_ = user_real_name;
  } else {
    clear_has_user_real_name();
    user_real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_real_name)
}

// required string user_mobile = 9;
inline bool UserInfo::has_user_mobile() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_user_mobile() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_user_mobile() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_user_mobile() {
  if (user_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_mobile_->clear();
  }
  clear_has_user_mobile();
}
inline const ::std::string& UserInfo::user_mobile() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_mobile)
  return *user_mobile_;
}
inline void UserInfo::set_user_mobile(const ::std::string& value) {
  set_has_user_mobile();
  if (user_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_mobile_ = new ::std::string;
  }
  user_mobile_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.user_mobile)
}
inline void UserInfo::set_user_mobile(const char* value) {
  set_has_user_mobile();
  if (user_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_mobile_ = new ::std::string;
  }
  user_mobile_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.user_mobile)
}
inline void UserInfo::set_user_mobile(const char* value, size_t size) {
  set_has_user_mobile();
  if (user_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_mobile_ = new ::std::string;
  }
  user_mobile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_mobile)
}
inline ::std::string* UserInfo::mutable_user_mobile() {
  set_has_user_mobile();
  if (user_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_mobile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.user_mobile)
  return user_mobile_;
}
inline ::std::string* UserInfo::release_user_mobile() {
  clear_has_user_mobile();
  if (user_mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_mobile_;
    user_mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_user_mobile(::std::string* user_mobile) {
  if (user_mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_mobile_;
  }
  if (user_mobile) {
    set_has_user_mobile();
    user_mobile_ = user_mobile;
  } else {
    clear_has_user_mobile();
    user_mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_mobile)
}

// required string user_tel = 10;
inline bool UserInfo::has_user_tel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_user_tel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_user_tel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_user_tel() {
  if (user_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_tel_->clear();
  }
  clear_has_user_tel();
}
inline const ::std::string& UserInfo::user_tel() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_tel)
  return *user_tel_;
}
inline void UserInfo::set_user_tel(const ::std::string& value) {
  set_has_user_tel();
  if (user_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_tel_ = new ::std::string;
  }
  user_tel_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.user_tel)
}
inline void UserInfo::set_user_tel(const char* value) {
  set_has_user_tel();
  if (user_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_tel_ = new ::std::string;
  }
  user_tel_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.user_tel)
}
inline void UserInfo::set_user_tel(const char* value, size_t size) {
  set_has_user_tel();
  if (user_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_tel_ = new ::std::string;
  }
  user_tel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_tel)
}
inline ::std::string* UserInfo::mutable_user_tel() {
  set_has_user_tel();
  if (user_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_tel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.user_tel)
  return user_tel_;
}
inline ::std::string* UserInfo::release_user_tel() {
  clear_has_user_tel();
  if (user_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_tel_;
    user_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_user_tel(::std::string* user_tel) {
  if (user_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_tel_;
  }
  if (user_tel) {
    set_has_user_tel();
    user_tel_ = user_tel;
  } else {
    clear_has_user_tel();
    user_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_tel)
}

// required string user_english_name = 11;
inline bool UserInfo::has_user_english_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_user_english_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_user_english_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_user_english_name() {
  if (user_english_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_english_name_->clear();
  }
  clear_has_user_english_name();
}
inline const ::std::string& UserInfo::user_english_name() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_english_name)
  return *user_english_name_;
}
inline void UserInfo::set_user_english_name(const ::std::string& value) {
  set_has_user_english_name();
  if (user_english_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_english_name_ = new ::std::string;
  }
  user_english_name_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.user_english_name)
}
inline void UserInfo::set_user_english_name(const char* value) {
  set_has_user_english_name();
  if (user_english_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_english_name_ = new ::std::string;
  }
  user_english_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.user_english_name)
}
inline void UserInfo::set_user_english_name(const char* value, size_t size) {
  set_has_user_english_name();
  if (user_english_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_english_name_ = new ::std::string;
  }
  user_english_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_english_name)
}
inline ::std::string* UserInfo::mutable_user_english_name() {
  set_has_user_english_name();
  if (user_english_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_english_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.user_english_name)
  return user_english_name_;
}
inline ::std::string* UserInfo::release_user_english_name() {
  clear_has_user_english_name();
  if (user_english_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_english_name_;
    user_english_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_user_english_name(::std::string* user_english_name) {
  if (user_english_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_english_name_;
  }
  if (user_english_name) {
    set_has_user_english_name();
    user_english_name_ = user_english_name;
  } else {
    clear_has_user_english_name();
    user_english_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_english_name)
}

// required uint32 status = 12;
inline bool UserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:UserInfo.status)
  return status_;
}
inline void UserInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.status)
}

// required uint32 user_borndate = 13;
inline bool UserInfo::has_user_borndate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserInfo::set_has_user_borndate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserInfo::clear_has_user_borndate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserInfo::clear_user_borndate() {
  user_borndate_ = 0u;
  clear_has_user_borndate();
}
inline ::google::protobuf::uint32 UserInfo::user_borndate() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_borndate)
  return user_borndate_;
}
inline void UserInfo::set_user_borndate(::google::protobuf::uint32 value) {
  set_has_user_borndate();
  user_borndate_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.user_borndate)
}

// required uint64 update_time = 14;
inline bool UserInfo::has_update_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserInfo::set_has_update_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserInfo::clear_has_update_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserInfo::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 UserInfo::update_time() const {
  // @@protoc_insertion_point(field_get:UserInfo.update_time)
  return update_time_;
}
inline void UserInfo::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.update_time)
}

// required uint32 work_id = 15;
inline bool UserInfo::has_work_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserInfo::set_has_work_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserInfo::clear_has_work_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserInfo::clear_work_id() {
  work_id_ = 0u;
  clear_has_work_id();
}
inline ::google::protobuf::uint32 UserInfo::work_id() const {
  // @@protoc_insertion_point(field_get:UserInfo.work_id)
  return work_id_;
}
inline void UserInfo::set_work_id(::google::protobuf::uint32 value) {
  set_has_work_id();
  work_id_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.work_id)
}

// required string pos_json = 16;
inline bool UserInfo::has_pos_json() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserInfo::set_has_pos_json() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserInfo::clear_has_pos_json() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserInfo::clear_pos_json() {
  if (pos_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_json_->clear();
  }
  clear_has_pos_json();
}
inline const ::std::string& UserInfo::pos_json() const {
  // @@protoc_insertion_point(field_get:UserInfo.pos_json)
  return *pos_json_;
}
inline void UserInfo::set_pos_json(const ::std::string& value) {
  set_has_pos_json();
  if (pos_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_json_ = new ::std::string;
  }
  pos_json_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.pos_json)
}
inline void UserInfo::set_pos_json(const char* value) {
  set_has_pos_json();
  if (pos_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_json_ = new ::std::string;
  }
  pos_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.pos_json)
}
inline void UserInfo::set_pos_json(const char* value, size_t size) {
  set_has_pos_json();
  if (pos_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_json_ = new ::std::string;
  }
  pos_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.pos_json)
}
inline ::std::string* UserInfo::mutable_pos_json() {
  set_has_pos_json();
  if (pos_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.pos_json)
  return pos_json_;
}
inline ::std::string* UserInfo::release_pos_json() {
  clear_has_pos_json();
  if (pos_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pos_json_;
    pos_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_pos_json(::std::string* pos_json) {
  if (pos_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pos_json_;
  }
  if (pos_json) {
    set_has_pos_json();
    pos_json_ = pos_json;
  } else {
    clear_has_pos_json();
    pos_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.pos_json)
}

// optional string sign_info = 17;
inline bool UserInfo::has_sign_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserInfo::set_has_sign_info() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserInfo::clear_has_sign_info() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserInfo::clear_sign_info() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_->clear();
  }
  clear_has_sign_info();
}
inline const ::std::string& UserInfo::sign_info() const {
  // @@protoc_insertion_point(field_get:UserInfo.sign_info)
  return *sign_info_;
}
inline void UserInfo::set_sign_info(const ::std::string& value) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(const char* value) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(const char* value, size_t size) {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  sign_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.sign_info)
}
inline ::std::string* UserInfo::mutable_sign_info() {
  set_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.sign_info)
  return sign_info_;
}
inline ::std::string* UserInfo::release_sign_info() {
  clear_has_sign_info();
  if (sign_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_info_;
    sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (sign_info) {
    set_has_sign_info();
    sign_info_ = sign_info;
  } else {
    clear_has_sign_info();
    sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.sign_info)
}

// -------------------------------------------------------------------

// GlobalSesssion

// required uint32 company_id = 1;
inline bool GlobalSesssion::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalSesssion::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalSesssion::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalSesssion::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 GlobalSesssion::company_id() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.company_id)
  return company_id_;
}
inline void GlobalSesssion::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.company_id)
}

// required uint32 user_id = 2;
inline bool GlobalSesssion::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalSesssion::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalSesssion::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalSesssion::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 GlobalSesssion::user_id() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.user_id)
  return user_id_;
}
inline void GlobalSesssion::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.user_id)
}

// required uint32 connsvr_id = 3;
inline bool GlobalSesssion::has_connsvr_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalSesssion::set_has_connsvr_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalSesssion::clear_has_connsvr_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalSesssion::clear_connsvr_id() {
  connsvr_id_ = 0u;
  clear_has_connsvr_id();
}
inline ::google::protobuf::uint32 GlobalSesssion::connsvr_id() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.connsvr_id)
  return connsvr_id_;
}
inline void GlobalSesssion::set_connsvr_id(::google::protobuf::uint32 value) {
  set_has_connsvr_id();
  connsvr_id_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.connsvr_id)
}

// required uint32 connsocket_index = 4;
inline bool GlobalSesssion::has_connsocket_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalSesssion::set_has_connsocket_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalSesssion::clear_has_connsocket_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GlobalSesssion::clear_connsocket_index() {
  connsocket_index_ = 0u;
  clear_has_connsocket_index();
}
inline ::google::protobuf::uint32 GlobalSesssion::connsocket_index() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.connsocket_index)
  return connsocket_index_;
}
inline void GlobalSesssion::set_connsocket_index(::google::protobuf::uint32 value) {
  set_has_connsocket_index();
  connsocket_index_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.connsocket_index)
}

// required uint32 device_type = 5;
inline bool GlobalSesssion::has_device_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GlobalSesssion::set_has_device_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GlobalSesssion::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GlobalSesssion::clear_device_type() {
  device_type_ = 0u;
  clear_has_device_type();
}
inline ::google::protobuf::uint32 GlobalSesssion::device_type() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.device_type)
  return device_type_;
}
inline void GlobalSesssion::set_device_type(::google::protobuf::uint32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.device_type)
}

// required uint32 device_stat = 6;
inline bool GlobalSesssion::has_device_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GlobalSesssion::set_has_device_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GlobalSesssion::clear_has_device_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GlobalSesssion::clear_device_stat() {
  device_stat_ = 0u;
  clear_has_device_stat();
}
inline ::google::protobuf::uint32 GlobalSesssion::device_stat() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.device_stat)
  return device_stat_;
}
inline void GlobalSesssion::set_device_stat(::google::protobuf::uint32 value) {
  set_has_device_stat();
  device_stat_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.device_stat)
}

// required uint32 update_time = 7;
inline bool GlobalSesssion::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GlobalSesssion::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GlobalSesssion::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GlobalSesssion::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 GlobalSesssion::update_time() const {
  // @@protoc_insertion_point(field_get:GlobalSesssion.update_time)
  return update_time_;
}
inline void GlobalSesssion::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:GlobalSesssion.update_time)
}

// -------------------------------------------------------------------

// ConnSessionItem

// required string session_id = 1;
inline bool ConnSessionItem::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnSessionItem::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnSessionItem::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnSessionItem::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& ConnSessionItem::session_id() const {
  // @@protoc_insertion_point(field_get:ConnSessionItem.session_id)
  return *session_id_;
}
inline void ConnSessionItem::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:ConnSessionItem.session_id)
}
inline void ConnSessionItem::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ConnSessionItem.session_id)
}
inline void ConnSessionItem::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConnSessionItem.session_id)
}
inline ::std::string* ConnSessionItem::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ConnSessionItem.session_id)
  return session_id_;
}
inline ::std::string* ConnSessionItem::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnSessionItem::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ConnSessionItem.session_id)
}

// required uint32 update_time = 2;
inline bool ConnSessionItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnSessionItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnSessionItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnSessionItem::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 ConnSessionItem::update_time() const {
  // @@protoc_insertion_point(field_get:ConnSessionItem.update_time)
  return update_time_;
}
inline void ConnSessionItem::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:ConnSessionItem.update_time)
}

// -------------------------------------------------------------------

// UserStat

// required uint32 update_time = 1;
inline bool UserStat::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStat::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStat::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStat::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 UserStat::update_time() const {
  // @@protoc_insertion_point(field_get:UserStat.update_time)
  return update_time_;
}
inline void UserStat::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:UserStat.update_time)
}

// required uint32 online_device = 2;
inline bool UserStat::has_online_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStat::set_has_online_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStat::clear_has_online_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStat::clear_online_device() {
  online_device_ = 0u;
  clear_has_online_device();
}
inline ::google::protobuf::uint32 UserStat::online_device() const {
  // @@protoc_insertion_point(field_get:UserStat.online_device)
  return online_device_;
}
inline void UserStat::set_online_device(::google::protobuf::uint32 value) {
  set_has_online_device();
  online_device_ = value;
  // @@protoc_insertion_point(field_set:UserStat.online_device)
}

// optional string pc_session_id = 3;
inline bool UserStat::has_pc_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserStat::set_has_pc_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserStat::clear_has_pc_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserStat::clear_pc_session_id() {
  if (pc_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pc_session_id_->clear();
  }
  clear_has_pc_session_id();
}
inline const ::std::string& UserStat::pc_session_id() const {
  // @@protoc_insertion_point(field_get:UserStat.pc_session_id)
  return *pc_session_id_;
}
inline void UserStat::set_pc_session_id(const ::std::string& value) {
  set_has_pc_session_id();
  if (pc_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pc_session_id_ = new ::std::string;
  }
  pc_session_id_->assign(value);
  // @@protoc_insertion_point(field_set:UserStat.pc_session_id)
}
inline void UserStat::set_pc_session_id(const char* value) {
  set_has_pc_session_id();
  if (pc_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pc_session_id_ = new ::std::string;
  }
  pc_session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserStat.pc_session_id)
}
inline void UserStat::set_pc_session_id(const char* value, size_t size) {
  set_has_pc_session_id();
  if (pc_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pc_session_id_ = new ::std::string;
  }
  pc_session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserStat.pc_session_id)
}
inline ::std::string* UserStat::mutable_pc_session_id() {
  set_has_pc_session_id();
  if (pc_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pc_session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserStat.pc_session_id)
  return pc_session_id_;
}
inline ::std::string* UserStat::release_pc_session_id() {
  clear_has_pc_session_id();
  if (pc_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pc_session_id_;
    pc_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserStat::set_allocated_pc_session_id(::std::string* pc_session_id) {
  if (pc_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pc_session_id_;
  }
  if (pc_session_id) {
    set_has_pc_session_id();
    pc_session_id_ = pc_session_id;
  } else {
    clear_has_pc_session_id();
    pc_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserStat.pc_session_id)
}

// optional string android_session_id = 4;
inline bool UserStat::has_android_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserStat::set_has_android_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserStat::clear_has_android_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserStat::clear_android_session_id() {
  if (android_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_session_id_->clear();
  }
  clear_has_android_session_id();
}
inline const ::std::string& UserStat::android_session_id() const {
  // @@protoc_insertion_point(field_get:UserStat.android_session_id)
  return *android_session_id_;
}
inline void UserStat::set_android_session_id(const ::std::string& value) {
  set_has_android_session_id();
  if (android_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_session_id_ = new ::std::string;
  }
  android_session_id_->assign(value);
  // @@protoc_insertion_point(field_set:UserStat.android_session_id)
}
inline void UserStat::set_android_session_id(const char* value) {
  set_has_android_session_id();
  if (android_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_session_id_ = new ::std::string;
  }
  android_session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserStat.android_session_id)
}
inline void UserStat::set_android_session_id(const char* value, size_t size) {
  set_has_android_session_id();
  if (android_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_session_id_ = new ::std::string;
  }
  android_session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserStat.android_session_id)
}
inline ::std::string* UserStat::mutable_android_session_id() {
  set_has_android_session_id();
  if (android_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserStat.android_session_id)
  return android_session_id_;
}
inline ::std::string* UserStat::release_android_session_id() {
  clear_has_android_session_id();
  if (android_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = android_session_id_;
    android_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserStat::set_allocated_android_session_id(::std::string* android_session_id) {
  if (android_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete android_session_id_;
  }
  if (android_session_id) {
    set_has_android_session_id();
    android_session_id_ = android_session_id;
  } else {
    clear_has_android_session_id();
    android_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserStat.android_session_id)
}

// optional string ios_session_id = 5;
inline bool UserStat::has_ios_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserStat::set_has_ios_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserStat::clear_has_ios_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserStat::clear_ios_session_id() {
  if (ios_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_session_id_->clear();
  }
  clear_has_ios_session_id();
}
inline const ::std::string& UserStat::ios_session_id() const {
  // @@protoc_insertion_point(field_get:UserStat.ios_session_id)
  return *ios_session_id_;
}
inline void UserStat::set_ios_session_id(const ::std::string& value) {
  set_has_ios_session_id();
  if (ios_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_session_id_ = new ::std::string;
  }
  ios_session_id_->assign(value);
  // @@protoc_insertion_point(field_set:UserStat.ios_session_id)
}
inline void UserStat::set_ios_session_id(const char* value) {
  set_has_ios_session_id();
  if (ios_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_session_id_ = new ::std::string;
  }
  ios_session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserStat.ios_session_id)
}
inline void UserStat::set_ios_session_id(const char* value, size_t size) {
  set_has_ios_session_id();
  if (ios_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_session_id_ = new ::std::string;
  }
  ios_session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserStat.ios_session_id)
}
inline ::std::string* UserStat::mutable_ios_session_id() {
  set_has_ios_session_id();
  if (ios_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserStat.ios_session_id)
  return ios_session_id_;
}
inline ::std::string* UserStat::release_ios_session_id() {
  clear_has_ios_session_id();
  if (ios_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ios_session_id_;
    ios_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserStat::set_allocated_ios_session_id(::std::string* ios_session_id) {
  if (ios_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ios_session_id_;
  }
  if (ios_session_id) {
    set_has_ios_session_id();
    ios_session_id_ = ios_session_id;
  } else {
    clear_has_ios_session_id();
    ios_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserStat.ios_session_id)
}

// optional string mac_session_id = 6;
inline bool UserStat::has_mac_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserStat::set_has_mac_session_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserStat::clear_has_mac_session_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserStat::clear_mac_session_id() {
  if (mac_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_session_id_->clear();
  }
  clear_has_mac_session_id();
}
inline const ::std::string& UserStat::mac_session_id() const {
  // @@protoc_insertion_point(field_get:UserStat.mac_session_id)
  return *mac_session_id_;
}
inline void UserStat::set_mac_session_id(const ::std::string& value) {
  set_has_mac_session_id();
  if (mac_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_session_id_ = new ::std::string;
  }
  mac_session_id_->assign(value);
  // @@protoc_insertion_point(field_set:UserStat.mac_session_id)
}
inline void UserStat::set_mac_session_id(const char* value) {
  set_has_mac_session_id();
  if (mac_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_session_id_ = new ::std::string;
  }
  mac_session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserStat.mac_session_id)
}
inline void UserStat::set_mac_session_id(const char* value, size_t size) {
  set_has_mac_session_id();
  if (mac_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_session_id_ = new ::std::string;
  }
  mac_session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserStat.mac_session_id)
}
inline ::std::string* UserStat::mutable_mac_session_id() {
  set_has_mac_session_id();
  if (mac_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserStat.mac_session_id)
  return mac_session_id_;
}
inline ::std::string* UserStat::release_mac_session_id() {
  clear_has_mac_session_id();
  if (mac_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_session_id_;
    mac_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserStat::set_allocated_mac_session_id(::std::string* mac_session_id) {
  if (mac_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_session_id_;
  }
  if (mac_session_id) {
    set_has_mac_session_id();
    mac_session_id_ = mac_session_id;
  } else {
    clear_has_mac_session_id();
    mac_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserStat.mac_session_id)
}

// -------------------------------------------------------------------

// UserFriendItem

// required uint32 company_id = 1;
inline bool UserFriendItem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFriendItem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFriendItem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFriendItem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 UserFriendItem::company_id() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.company_id)
  return company_id_;
}
inline void UserFriendItem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:UserFriendItem.company_id)
}

// required uint32 user_id = 2;
inline bool UserFriendItem::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFriendItem::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFriendItem::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFriendItem::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserFriendItem::user_id() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.user_id)
  return user_id_;
}
inline void UserFriendItem::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserFriendItem.user_id)
}

// required uint32 is_fixtop = 3;
inline bool UserFriendItem::has_is_fixtop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFriendItem::set_has_is_fixtop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFriendItem::clear_has_is_fixtop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFriendItem::clear_is_fixtop() {
  is_fixtop_ = 0u;
  clear_has_is_fixtop();
}
inline ::google::protobuf::uint32 UserFriendItem::is_fixtop() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.is_fixtop)
  return is_fixtop_;
}
inline void UserFriendItem::set_is_fixtop(::google::protobuf::uint32 value) {
  set_has_is_fixtop();
  is_fixtop_ = value;
  // @@protoc_insertion_point(field_set:UserFriendItem.is_fixtop)
}

// required uint32 fix_order = 4;
inline bool UserFriendItem::has_fix_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFriendItem::set_has_fix_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFriendItem::clear_has_fix_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFriendItem::clear_fix_order() {
  fix_order_ = 0u;
  clear_has_fix_order();
}
inline ::google::protobuf::uint32 UserFriendItem::fix_order() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.fix_order)
  return fix_order_;
}
inline void UserFriendItem::set_fix_order(::google::protobuf::uint32 value) {
  set_has_fix_order();
  fix_order_ = value;
  // @@protoc_insertion_point(field_set:UserFriendItem.fix_order)
}

// required string remark = 6;
inline bool UserFriendItem::has_remark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserFriendItem::set_has_remark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserFriendItem::clear_has_remark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserFriendItem::clear_remark() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& UserFriendItem::remark() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.remark)
  return *remark_;
}
inline void UserFriendItem::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set:UserFriendItem.remark)
}
inline void UserFriendItem::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserFriendItem.remark)
}
inline void UserFriendItem::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserFriendItem.remark)
}
inline ::std::string* UserFriendItem::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserFriendItem.remark)
  return remark_;
}
inline ::std::string* UserFriendItem::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserFriendItem::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserFriendItem.remark)
}

// required uint64 update_time = 7;
inline bool UserFriendItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserFriendItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserFriendItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserFriendItem::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 UserFriendItem::update_time() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.update_time)
  return update_time_;
}
inline void UserFriendItem::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:UserFriendItem.update_time)
}

// required bool is_delete = 8;
inline bool UserFriendItem::has_is_delete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserFriendItem::set_has_is_delete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserFriendItem::clear_has_is_delete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserFriendItem::clear_is_delete() {
  is_delete_ = false;
  clear_has_is_delete();
}
inline bool UserFriendItem::is_delete() const {
  // @@protoc_insertion_point(field_get:UserFriendItem.is_delete)
  return is_delete_;
}
inline void UserFriendItem::set_is_delete(bool value) {
  set_has_is_delete();
  is_delete_ = value;
  // @@protoc_insertion_point(field_set:UserFriendItem.is_delete)
}

// -------------------------------------------------------------------

// UserFriendList

// repeated .UserFriendItem friend_list = 1;
inline int UserFriendList::friend_list_size() const {
  return friend_list_.size();
}
inline void UserFriendList::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::UserFriendItem& UserFriendList::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:UserFriendList.friend_list)
  return friend_list_.Get(index);
}
inline ::UserFriendItem* UserFriendList::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:UserFriendList.friend_list)
  return friend_list_.Mutable(index);
}
inline ::UserFriendItem* UserFriendList::add_friend_list() {
  // @@protoc_insertion_point(field_add:UserFriendList.friend_list)
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserFriendItem >&
UserFriendList::friend_list() const {
  // @@protoc_insertion_point(field_list:UserFriendList.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserFriendItem >*
UserFriendList::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:UserFriendList.friend_list)
  return &friend_list_;
}

// -------------------------------------------------------------------

// UserFriendVerItem

// required uint32 company_id = 1;
inline bool UserFriendVerItem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFriendVerItem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFriendVerItem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFriendVerItem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 UserFriendVerItem::company_id() const {
  // @@protoc_insertion_point(field_get:UserFriendVerItem.company_id)
  return company_id_;
}
inline void UserFriendVerItem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:UserFriendVerItem.company_id)
}

// required uint32 user_id = 2;
inline bool UserFriendVerItem::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFriendVerItem::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFriendVerItem::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFriendVerItem::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserFriendVerItem::user_id() const {
  // @@protoc_insertion_point(field_get:UserFriendVerItem.user_id)
  return user_id_;
}
inline void UserFriendVerItem::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserFriendVerItem.user_id)
}

// required uint64 update_time = 3;
inline bool UserFriendVerItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFriendVerItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFriendVerItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFriendVerItem::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 UserFriendVerItem::update_time() const {
  // @@protoc_insertion_point(field_get:UserFriendVerItem.update_time)
  return update_time_;
}
inline void UserFriendVerItem::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:UserFriendVerItem.update_time)
}

// -------------------------------------------------------------------

// UserSession

// required uint32 company_id = 1;
inline bool UserSession::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSession::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSession::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSession::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 UserSession::company_id() const {
  // @@protoc_insertion_point(field_get:UserSession.company_id)
  return company_id_;
}
inline void UserSession::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:UserSession.company_id)
}

// required uint32 user_id = 2;
inline bool UserSession::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSession::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSession::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSession::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserSession::user_id() const {
  // @@protoc_insertion_point(field_get:UserSession.user_id)
  return user_id_;
}
inline void UserSession::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserSession.user_id)
}

// required uint32 device_type = 3;
inline bool UserSession::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSession::set_has_device_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSession::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSession::clear_device_type() {
  device_type_ = 0u;
  clear_has_device_type();
}
inline ::google::protobuf::uint32 UserSession::device_type() const {
  // @@protoc_insertion_point(field_get:UserSession.device_type)
  return device_type_;
}
inline void UserSession::set_device_type(::google::protobuf::uint32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:UserSession.device_type)
}

// -------------------------------------------------------------------

// UserRecentContractoritem

// required uint32 company_id = 1;
inline bool UserRecentContractoritem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRecentContractoritem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRecentContractoritem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRecentContractoritem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 UserRecentContractoritem::company_id() const {
  // @@protoc_insertion_point(field_get:UserRecentContractoritem.company_id)
  return company_id_;
}
inline void UserRecentContractoritem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:UserRecentContractoritem.company_id)
}

// required uint32 user_id = 2;
inline bool UserRecentContractoritem::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRecentContractoritem::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRecentContractoritem::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRecentContractoritem::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserRecentContractoritem::user_id() const {
  // @@protoc_insertion_point(field_get:UserRecentContractoritem.user_id)
  return user_id_;
}
inline void UserRecentContractoritem::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserRecentContractoritem.user_id)
}

// required uint32 friend_type = 3;
inline bool UserRecentContractoritem::has_friend_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRecentContractoritem::set_has_friend_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRecentContractoritem::clear_has_friend_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRecentContractoritem::clear_friend_type() {
  friend_type_ = 0u;
  clear_has_friend_type();
}
inline ::google::protobuf::uint32 UserRecentContractoritem::friend_type() const {
  // @@protoc_insertion_point(field_get:UserRecentContractoritem.friend_type)
  return friend_type_;
}
inline void UserRecentContractoritem::set_friend_type(::google::protobuf::uint32 value) {
  set_has_friend_type();
  friend_type_ = value;
  // @@protoc_insertion_point(field_set:UserRecentContractoritem.friend_type)
}

// required uint32 is_fixtop = 4;
inline bool UserRecentContractoritem::has_is_fixtop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRecentContractoritem::set_has_is_fixtop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRecentContractoritem::clear_has_is_fixtop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRecentContractoritem::clear_is_fixtop() {
  is_fixtop_ = 0u;
  clear_has_is_fixtop();
}
inline ::google::protobuf::uint32 UserRecentContractoritem::is_fixtop() const {
  // @@protoc_insertion_point(field_get:UserRecentContractoritem.is_fixtop)
  return is_fixtop_;
}
inline void UserRecentContractoritem::set_is_fixtop(::google::protobuf::uint32 value) {
  set_has_is_fixtop();
  is_fixtop_ = value;
  // @@protoc_insertion_point(field_set:UserRecentContractoritem.is_fixtop)
}

// required uint32 fix_order = 5;
inline bool UserRecentContractoritem::has_fix_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRecentContractoritem::set_has_fix_order() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRecentContractoritem::clear_has_fix_order() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRecentContractoritem::clear_fix_order() {
  fix_order_ = 0u;
  clear_has_fix_order();
}
inline ::google::protobuf::uint32 UserRecentContractoritem::fix_order() const {
  // @@protoc_insertion_point(field_get:UserRecentContractoritem.fix_order)
  return fix_order_;
}
inline void UserRecentContractoritem::set_fix_order(::google::protobuf::uint32 value) {
  set_has_fix_order();
  fix_order_ = value;
  // @@protoc_insertion_point(field_set:UserRecentContractoritem.fix_order)
}

// required uint32 update_time = 6;
inline bool UserRecentContractoritem::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRecentContractoritem::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRecentContractoritem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRecentContractoritem::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 UserRecentContractoritem::update_time() const {
  // @@protoc_insertion_point(field_get:UserRecentContractoritem.update_time)
  return update_time_;
}
inline void UserRecentContractoritem::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:UserRecentContractoritem.update_time)
}

// -------------------------------------------------------------------

// UserRecentChatList

// repeated .UserRecentContractoritem friend_list = 1;
inline int UserRecentChatList::friend_list_size() const {
  return friend_list_.size();
}
inline void UserRecentChatList::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::UserRecentContractoritem& UserRecentChatList::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:UserRecentChatList.friend_list)
  return friend_list_.Get(index);
}
inline ::UserRecentContractoritem* UserRecentChatList::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:UserRecentChatList.friend_list)
  return friend_list_.Mutable(index);
}
inline ::UserRecentContractoritem* UserRecentChatList::add_friend_list() {
  // @@protoc_insertion_point(field_add:UserRecentChatList.friend_list)
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserRecentContractoritem >&
UserRecentChatList::friend_list() const {
  // @@protoc_insertion_point(field_list:UserRecentChatList.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserRecentContractoritem >*
UserRecentChatList::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:UserRecentChatList.friend_list)
  return &friend_list_;
}

// -------------------------------------------------------------------

// GroupListItem

// required uint32 company_id = 1;
inline bool GroupListItem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupListItem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupListItem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupListItem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 GroupListItem::company_id() const {
  // @@protoc_insertion_point(field_get:GroupListItem.company_id)
  return company_id_;
}
inline void GroupListItem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.company_id)
}

// required uint32 group_id = 2;
inline bool GroupListItem::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupListItem::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupListItem::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupListItem::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 GroupListItem::group_id() const {
  // @@protoc_insertion_point(field_get:GroupListItem.group_id)
  return group_id_;
}
inline void GroupListItem::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.group_id)
}

// required .GroupType group_type = 3;
inline bool GroupListItem::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupListItem::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupListItem::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupListItem::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
inline ::GroupType GroupListItem::group_type() const {
  // @@protoc_insertion_point(field_get:GroupListItem.group_type)
  return static_cast< ::GroupType >(group_type_);
}
inline void GroupListItem::set_group_type(::GroupType value) {
  assert(::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.group_type)
}

// required uint32 is_fixtop = 4;
inline bool GroupListItem::has_is_fixtop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupListItem::set_has_is_fixtop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupListItem::clear_has_is_fixtop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupListItem::clear_is_fixtop() {
  is_fixtop_ = 0u;
  clear_has_is_fixtop();
}
inline ::google::protobuf::uint32 GroupListItem::is_fixtop() const {
  // @@protoc_insertion_point(field_get:GroupListItem.is_fixtop)
  return is_fixtop_;
}
inline void GroupListItem::set_is_fixtop(::google::protobuf::uint32 value) {
  set_has_is_fixtop();
  is_fixtop_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.is_fixtop)
}

// required uint32 fix_order = 5;
inline bool GroupListItem::has_fix_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupListItem::set_has_fix_order() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupListItem::clear_has_fix_order() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupListItem::clear_fix_order() {
  fix_order_ = 0u;
  clear_has_fix_order();
}
inline ::google::protobuf::uint32 GroupListItem::fix_order() const {
  // @@protoc_insertion_point(field_get:GroupListItem.fix_order)
  return fix_order_;
}
inline void GroupListItem::set_fix_order(::google::protobuf::uint32 value) {
  set_has_fix_order();
  fix_order_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.fix_order)
}

// required string remark = 7;
inline bool GroupListItem::has_remark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupListItem::set_has_remark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupListItem::clear_has_remark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupListItem::clear_remark() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& GroupListItem::remark() const {
  // @@protoc_insertion_point(field_get:GroupListItem.remark)
  return *remark_;
}
inline void GroupListItem::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set:GroupListItem.remark)
}
inline void GroupListItem::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:GroupListItem.remark)
}
inline void GroupListItem::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GroupListItem.remark)
}
inline ::std::string* GroupListItem::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GroupListItem.remark)
  return remark_;
}
inline ::std::string* GroupListItem::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupListItem::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GroupListItem.remark)
}

// required uint64 update_time = 8;
inline bool GroupListItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupListItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupListItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupListItem::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 GroupListItem::update_time() const {
  // @@protoc_insertion_point(field_get:GroupListItem.update_time)
  return update_time_;
}
inline void GroupListItem::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.update_time)
}

// required bool is_delete = 9;
inline bool GroupListItem::has_is_delete() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GroupListItem::set_has_is_delete() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GroupListItem::clear_has_is_delete() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GroupListItem::clear_is_delete() {
  is_delete_ = false;
  clear_has_is_delete();
}
inline bool GroupListItem::is_delete() const {
  // @@protoc_insertion_point(field_get:GroupListItem.is_delete)
  return is_delete_;
}
inline void GroupListItem::set_is_delete(bool value) {
  set_has_is_delete();
  is_delete_ = value;
  // @@protoc_insertion_point(field_set:GroupListItem.is_delete)
}

// -------------------------------------------------------------------

// UserGroupList

// repeated .GroupListItem group_list = 1;
inline int UserGroupList::group_list_size() const {
  return group_list_.size();
}
inline void UserGroupList::clear_group_list() {
  group_list_.Clear();
}
inline const ::GroupListItem& UserGroupList::group_list(int index) const {
  // @@protoc_insertion_point(field_get:UserGroupList.group_list)
  return group_list_.Get(index);
}
inline ::GroupListItem* UserGroupList::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:UserGroupList.group_list)
  return group_list_.Mutable(index);
}
inline ::GroupListItem* UserGroupList::add_group_list() {
  // @@protoc_insertion_point(field_add:UserGroupList.group_list)
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupListItem >&
UserGroupList::group_list() const {
  // @@protoc_insertion_point(field_list:UserGroupList.group_list)
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupListItem >*
UserGroupList::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:UserGroupList.group_list)
  return &group_list_;
}

// -------------------------------------------------------------------

// GroupMemberItem

// required uint32 company_id = 1;
inline bool GroupMemberItem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMemberItem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMemberItem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMemberItem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 GroupMemberItem::company_id() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.company_id)
  return company_id_;
}
inline void GroupMemberItem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:GroupMemberItem.company_id)
}

// required uint32 member_id = 2;
inline bool GroupMemberItem::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMemberItem::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMemberItem::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMemberItem::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 GroupMemberItem::member_id() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.member_id)
  return member_id_;
}
inline void GroupMemberItem::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:GroupMemberItem.member_id)
}

// required string member_name = 3;
inline bool GroupMemberItem::has_member_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupMemberItem::set_has_member_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupMemberItem::clear_has_member_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupMemberItem::clear_member_name() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_->clear();
  }
  clear_has_member_name();
}
inline const ::std::string& GroupMemberItem::member_name() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.member_name)
  return *member_name_;
}
inline void GroupMemberItem::set_member_name(const ::std::string& value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set:GroupMemberItem.member_name)
}
inline void GroupMemberItem::set_member_name(const char* value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GroupMemberItem.member_name)
}
inline void GroupMemberItem::set_member_name(const char* value, size_t size) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GroupMemberItem.member_name)
}
inline ::std::string* GroupMemberItem::mutable_member_name() {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GroupMemberItem.member_name)
  return member_name_;
}
inline ::std::string* GroupMemberItem::release_member_name() {
  clear_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = member_name_;
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMemberItem::set_allocated_member_name(::std::string* member_name) {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (member_name) {
    set_has_member_name();
    member_name_ = member_name;
  } else {
    clear_has_member_name();
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GroupMemberItem.member_name)
}

// required string member_remark = 4;
inline bool GroupMemberItem::has_member_remark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupMemberItem::set_has_member_remark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupMemberItem::clear_has_member_remark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupMemberItem::clear_member_remark() {
  if (member_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_remark_->clear();
  }
  clear_has_member_remark();
}
inline const ::std::string& GroupMemberItem::member_remark() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.member_remark)
  return *member_remark_;
}
inline void GroupMemberItem::set_member_remark(const ::std::string& value) {
  set_has_member_remark();
  if (member_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_remark_ = new ::std::string;
  }
  member_remark_->assign(value);
  // @@protoc_insertion_point(field_set:GroupMemberItem.member_remark)
}
inline void GroupMemberItem::set_member_remark(const char* value) {
  set_has_member_remark();
  if (member_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_remark_ = new ::std::string;
  }
  member_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:GroupMemberItem.member_remark)
}
inline void GroupMemberItem::set_member_remark(const char* value, size_t size) {
  set_has_member_remark();
  if (member_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_remark_ = new ::std::string;
  }
  member_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GroupMemberItem.member_remark)
}
inline ::std::string* GroupMemberItem::mutable_member_remark() {
  set_has_member_remark();
  if (member_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GroupMemberItem.member_remark)
  return member_remark_;
}
inline ::std::string* GroupMemberItem::release_member_remark() {
  clear_has_member_remark();
  if (member_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = member_remark_;
    member_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMemberItem::set_allocated_member_remark(::std::string* member_remark) {
  if (member_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_remark_;
  }
  if (member_remark) {
    set_has_member_remark();
    member_remark_ = member_remark;
  } else {
    clear_has_member_remark();
    member_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GroupMemberItem.member_remark)
}

// required uint32 member_role = 5;
inline bool GroupMemberItem::has_member_role() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupMemberItem::set_has_member_role() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupMemberItem::clear_has_member_role() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupMemberItem::clear_member_role() {
  member_role_ = 0u;
  clear_has_member_role();
}
inline ::google::protobuf::uint32 GroupMemberItem::member_role() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.member_role)
  return member_role_;
}
inline void GroupMemberItem::set_member_role(::google::protobuf::uint32 value) {
  set_has_member_role();
  member_role_ = value;
  // @@protoc_insertion_point(field_set:GroupMemberItem.member_role)
}

// required uint32 update_time = 6;
inline bool GroupMemberItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupMemberItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupMemberItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupMemberItem::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 GroupMemberItem::update_time() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.update_time)
  return update_time_;
}
inline void GroupMemberItem::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:GroupMemberItem.update_time)
}

// required bool is_delete = 7;
inline bool GroupMemberItem::has_is_delete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupMemberItem::set_has_is_delete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupMemberItem::clear_has_is_delete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupMemberItem::clear_is_delete() {
  is_delete_ = false;
  clear_has_is_delete();
}
inline bool GroupMemberItem::is_delete() const {
  // @@protoc_insertion_point(field_get:GroupMemberItem.is_delete)
  return is_delete_;
}
inline void GroupMemberItem::set_is_delete(bool value) {
  set_has_is_delete();
  is_delete_ = value;
  // @@protoc_insertion_point(field_set:GroupMemberItem.is_delete)
}

// -------------------------------------------------------------------

// GroupMemberList

// repeated .GroupMemberItem member_list = 1;
inline int GroupMemberList::member_list_size() const {
  return member_list_.size();
}
inline void GroupMemberList::clear_member_list() {
  member_list_.Clear();
}
inline const ::GroupMemberItem& GroupMemberList::member_list(int index) const {
  // @@protoc_insertion_point(field_get:GroupMemberList.member_list)
  return member_list_.Get(index);
}
inline ::GroupMemberItem* GroupMemberList::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:GroupMemberList.member_list)
  return member_list_.Mutable(index);
}
inline ::GroupMemberItem* GroupMemberList::add_member_list() {
  // @@protoc_insertion_point(field_add:GroupMemberList.member_list)
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMemberItem >&
GroupMemberList::member_list() const {
  // @@protoc_insertion_point(field_list:GroupMemberList.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMemberItem >*
GroupMemberList::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:GroupMemberList.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// OrgGroupMemberItem

// required uint32 company_id = 1;
inline bool OrgGroupMemberItem::has_company_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrgGroupMemberItem::set_has_company_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrgGroupMemberItem::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrgGroupMemberItem::clear_company_id() {
  company_id_ = 0u;
  clear_has_company_id();
}
inline ::google::protobuf::uint32 OrgGroupMemberItem::company_id() const {
  // @@protoc_insertion_point(field_get:OrgGroupMemberItem.company_id)
  return company_id_;
}
inline void OrgGroupMemberItem::set_company_id(::google::protobuf::uint32 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:OrgGroupMemberItem.company_id)
}

// required uint32 member_id = 2;
inline bool OrgGroupMemberItem::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrgGroupMemberItem::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrgGroupMemberItem::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrgGroupMemberItem::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 OrgGroupMemberItem::member_id() const {
  // @@protoc_insertion_point(field_get:OrgGroupMemberItem.member_id)
  return member_id_;
}
inline void OrgGroupMemberItem::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:OrgGroupMemberItem.member_id)
}

// required uint32 update_time = 3;
inline bool OrgGroupMemberItem::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrgGroupMemberItem::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrgGroupMemberItem::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrgGroupMemberItem::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 OrgGroupMemberItem::update_time() const {
  // @@protoc_insertion_point(field_get:OrgGroupMemberItem.update_time)
  return update_time_;
}
inline void OrgGroupMemberItem::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:OrgGroupMemberItem.update_time)
}

// -------------------------------------------------------------------

// OrgGroupMemberList

// repeated .OrgGroupMemberItem member_list = 1;
inline int OrgGroupMemberList::member_list_size() const {
  return member_list_.size();
}
inline void OrgGroupMemberList::clear_member_list() {
  member_list_.Clear();
}
inline const ::OrgGroupMemberItem& OrgGroupMemberList::member_list(int index) const {
  // @@protoc_insertion_point(field_get:OrgGroupMemberList.member_list)
  return member_list_.Get(index);
}
inline ::OrgGroupMemberItem* OrgGroupMemberList::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:OrgGroupMemberList.member_list)
  return member_list_.Mutable(index);
}
inline ::OrgGroupMemberItem* OrgGroupMemberList::add_member_list() {
  // @@protoc_insertion_point(field_add:OrgGroupMemberList.member_list)
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OrgGroupMemberItem >&
OrgGroupMemberList::member_list() const {
  // @@protoc_insertion_point(field_list:OrgGroupMemberList.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::OrgGroupMemberItem >*
OrgGroupMemberList::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:OrgGroupMemberList.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// OrgNode

// required uint32 id = 1;
inline bool OrgNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrgNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrgNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrgNode::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OrgNode::id() const {
  // @@protoc_insertion_point(field_get:OrgNode.id)
  return id_;
}
inline void OrgNode::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:OrgNode.id)
}

// required uint32 lvalue = 2;
inline bool OrgNode::has_lvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrgNode::set_has_lvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrgNode::clear_has_lvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrgNode::clear_lvalue() {
  lvalue_ = 0u;
  clear_has_lvalue();
}
inline ::google::protobuf::uint32 OrgNode::lvalue() const {
  // @@protoc_insertion_point(field_get:OrgNode.lvalue)
  return lvalue_;
}
inline void OrgNode::set_lvalue(::google::protobuf::uint32 value) {
  set_has_lvalue();
  lvalue_ = value;
  // @@protoc_insertion_point(field_set:OrgNode.lvalue)
}

// required uint32 rvalue = 3;
inline bool OrgNode::has_rvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrgNode::set_has_rvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrgNode::clear_has_rvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrgNode::clear_rvalue() {
  rvalue_ = 0u;
  clear_has_rvalue();
}
inline ::google::protobuf::uint32 OrgNode::rvalue() const {
  // @@protoc_insertion_point(field_get:OrgNode.rvalue)
  return rvalue_;
}
inline void OrgNode::set_rvalue(::google::protobuf::uint32 value) {
  set_has_rvalue();
  rvalue_ = value;
  // @@protoc_insertion_point(field_set:OrgNode.rvalue)
}

// required uint32 type = 4;
inline bool OrgNode::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrgNode::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrgNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrgNode::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 OrgNode::type() const {
  // @@protoc_insertion_point(field_get:OrgNode.type)
  return type_;
}
inline void OrgNode::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:OrgNode.type)
}

// -------------------------------------------------------------------

// OrgTree

// repeated .OrgNode org_node_list = 1;
inline int OrgTree::org_node_list_size() const {
  return org_node_list_.size();
}
inline void OrgTree::clear_org_node_list() {
  org_node_list_.Clear();
}
inline const ::OrgNode& OrgTree::org_node_list(int index) const {
  // @@protoc_insertion_point(field_get:OrgTree.org_node_list)
  return org_node_list_.Get(index);
}
inline ::OrgNode* OrgTree::mutable_org_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:OrgTree.org_node_list)
  return org_node_list_.Mutable(index);
}
inline ::OrgNode* OrgTree::add_org_node_list() {
  // @@protoc_insertion_point(field_add:OrgTree.org_node_list)
  return org_node_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OrgNode >&
OrgTree::org_node_list() const {
  // @@protoc_insertion_point(field_list:OrgTree.org_node_list)
  return org_node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::OrgNode >*
OrgTree::mutable_org_node_list() {
  // @@protoc_insertion_point(field_mutable_list:OrgTree.org_node_list)
  return &org_node_list_;
}

// -------------------------------------------------------------------

// CompanyUserList

// repeated uint32 user_id = 1;
inline int CompanyUserList::user_id_size() const {
  return user_id_.size();
}
inline void CompanyUserList::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 CompanyUserList::user_id(int index) const {
  // @@protoc_insertion_point(field_get:CompanyUserList.user_id)
  return user_id_.Get(index);
}
inline void CompanyUserList::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CompanyUserList.user_id)
}
inline void CompanyUserList::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:CompanyUserList.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CompanyUserList::user_id() const {
  // @@protoc_insertion_point(field_list:CompanyUserList.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CompanyUserList::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:CompanyUserList.user_id)
  return &user_id_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GroupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GroupType>() {
  return ::GroupType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eRedisStruct_2eproto__INCLUDED
